
SRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008250  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a4  080084a4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084ac  080084ac  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084ac  080084ac  000184ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b0  080084b0  000184b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080084b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  2000007c  08008530  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  08008530  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001facc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aff  00000000  00000000  0003fb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00042678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  000437c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c662  00000000  00000000  000447a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ed9  00000000  00000000  00060e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b18ef  00000000  00000000  00076ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001285d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd0  00000000  00000000  00128624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083d8 	.word	0x080083d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080083d8 	.word	0x080083d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <HAL_GPIO_EXTI_Callback>:
char sensorDistanciaPrint[20];
char MeasurementUnity[20] = "";


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{   //Interrupcao do laser 1
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_LASER1_Pin){
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d11d      	bne.n	8000bdc <HAL_GPIO_EXTI_Callback+0x4c>

		if(i < 10){
 8000ba0:	4b3c      	ldr	r3, [pc, #240]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x104>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b09      	cmp	r3, #9
 8000ba6:	d808      	bhi.n	8000bba <HAL_GPIO_EXTI_Callback+0x2a>
			t1[i] = HAL_GetTick();
 8000ba8:	4b3a      	ldr	r3, [pc, #232]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x104>)
 8000baa:	681c      	ldr	r4, [r3, #0]
 8000bac:	f000 fd3c 	bl	8001628 <HAL_GetTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a39      	ldr	r2, [pc, #228]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x108>)
 8000bb4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8000bb8:	e00a      	b.n	8000bd0 <HAL_GPIO_EXTI_Callback+0x40>
		}
		else{
			i = 0;
 8000bba:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
			t1[i] = HAL_GetTick();
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bc2:	681c      	ldr	r4, [r3, #0]
 8000bc4:	f000 fd30 	bl	8001628 <HAL_GetTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x108>)
 8000bcc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		}
		i++;
 8000bd0:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x104>)
 8000bd8:	6013      	str	r3, [r2, #0]
			start = 1;
		}


	}
}
 8000bda:	e056      	b.n	8000c8a <HAL_GPIO_EXTI_Callback+0xfa>
	else if(GPIO_Pin == GPIO_LASER2_Pin){
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d12f      	bne.n	8000c42 <HAL_GPIO_EXTI_Callback+0xb2>
		if(j < 10){
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b09      	cmp	r3, #9
 8000be8:	d808      	bhi.n	8000bfc <HAL_GPIO_EXTI_Callback+0x6c>
			t2[j] = HAL_GetTick();
 8000bea:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000bec:	681c      	ldr	r4, [r3, #0]
 8000bee:	f000 fd1b 	bl	8001628 <HAL_GetTick>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x110>)
 8000bf6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8000bfa:	e00a      	b.n	8000c12 <HAL_GPIO_EXTI_Callback+0x82>
			j = 0;
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
			t2[j] = HAL_GetTick();
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c04:	681c      	ldr	r4, [r3, #0]
 8000c06:	f000 fd0f 	bl	8001628 <HAL_GetTick>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a24      	ldr	r2, [pc, #144]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x110>)
 8000c0e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		deltat = t2[j]- t1[j];
 8000c12:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a22      	ldr	r2, [pc, #136]	; (8000ca0 <HAL_GPIO_EXTI_Callback+0x110>)
 8000c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	491d      	ldr	r1, [pc, #116]	; (8000c98 <HAL_GPIO_EXTI_Callback+0x108>)
 8000c22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x114>)
 8000c2a:	6013      	str	r3, [r2, #0]
		j++;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <HAL_GPIO_EXTI_Callback+0x10c>)
 8000c34:	6013      	str	r3, [r2, #0]
		count ++;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <HAL_GPIO_EXTI_Callback+0x118>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	e023      	b.n	8000c8a <HAL_GPIO_EXTI_Callback+0xfa>
	else if(GPIO_Pin == SWITCH_INFO_BUTTON_Pin){
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	2b10      	cmp	r3, #16
 8000c46:	d120      	bne.n	8000c8a <HAL_GPIO_EXTI_Callback+0xfa>
		if(start == 1){
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_GPIO_EXTI_Callback+0x11c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d119      	bne.n	8000c84 <HAL_GPIO_EXTI_Callback+0xf4>
			if(typeMeasurement == 0){						//Metros por segundos
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d106      	bne.n	8000c66 <HAL_GPIO_EXTI_Callback+0xd6>
				typeMeasurement = 1;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
				strcpy(MeasurementUnity, "M/s");
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000c60:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x128>)
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	e011      	b.n	8000c8a <HAL_GPIO_EXTI_Callback+0xfa>
			else if (typeMeasurement == 1){					//Kilometros por hora
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d10d      	bne.n	8000c8a <HAL_GPIO_EXTI_Callback+0xfa>
				typeMeasurement = 0;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x120>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
				strcpy(MeasurementUnity, "Km/h");
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x124>)
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <HAL_GPIO_EXTI_Callback+0x12c>)
 8000c78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c7c:	6018      	str	r0, [r3, #0]
 8000c7e:	3304      	adds	r3, #4
 8000c80:	7019      	strb	r1, [r3, #0]
}
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_EXTI_Callback+0xfa>
			start = 1;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_GPIO_EXTI_Callback+0x11c>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000e8 	.word	0x200000e8
 8000c98:	20000098 	.word	0x20000098
 8000c9c:	200000ec 	.word	0x200000ec
 8000ca0:	200000c0 	.word	0x200000c0
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	200000f0 	.word	0x200000f0
 8000cac:	200000fc 	.word	0x200000fc
 8000cb0:	200000f4 	.word	0x200000f4
 8000cb4:	20000100 	.word	0x20000100
 8000cb8:	00732f4d 	.word	0x00732f4d
 8000cbc:	080083f0 	.word	0x080083f0

08000cc0 <VelocityCalculation>:

//Calcula velocidade de acordo com a unidade de medida selecionada pelo usuario no botao
uint32_t VelocityCalculation(){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	if(typeMeasurement == 0){
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <VelocityCalculation+0x60>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10a      	bne.n	8000ce2 <VelocityCalculation+0x22>

		return sensorDistanceCm/deltat*1000;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <VelocityCalculation+0x64>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <VelocityCalculation+0x68>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	e018      	b.n	8000d14 <VelocityCalculation+0x54>
	}
	else{
        return (sensorDistanceCm/deltat*1000) * 3.6;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <VelocityCalculation+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <VelocityCalculation+0x68>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fd2e 	bl	8000758 <__aeabi_ui2d>
 8000cfc:	a306      	add	r3, pc, #24	; (adr r3, 8000d18 <VelocityCalculation+0x58>)
 8000cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d02:	f7ff fabd 	bl	8000280 <__aeabi_dmul>
 8000d06:	4602      	mov	r2, r0
 8000d08:	460b      	mov	r3, r1
 8000d0a:	4610      	mov	r0, r2
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f7ff fd9d 	bl	800084c <__aeabi_d2uiz>
 8000d12:	4603      	mov	r3, r0
	}


}
 8000d14:	4618      	mov	r0, r3
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	cccccccd 	.word	0xcccccccd
 8000d1c:	400ccccc 	.word	0x400ccccc
 8000d20:	200000f4 	.word	0x200000f4
 8000d24:	200000f8 	.word	0x200000f8
 8000d28:	20000000 	.word	0x20000000

08000d2c <app_init>:


void app_init(void){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0


	lcd_init ();
 8000d30:	f002 fc94 	bl	800365c <lcd_init>

	HAL_ADC_Start(&hadc1);
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <app_init+0x34>)
 8000d36:	f000 fceb 	bl	8001710 <HAL_ADC_Start>
	//Trava o programa enquanto o usuario não aperta o botao para confirmar a regulagem do potenciometro(Distancia entre sensores)
	while(start == 0){
 8000d3a:	e009      	b.n	8000d50 <app_init+0x24>

		sensorDistanceCm = GetDistanceSensor();
 8000d3c:	f002 fd4e 	bl	80037dc <GetDistanceSensor>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <app_init+0x38>)
 8000d44:	6013      	str	r3, [r2, #0]
		showSensorDistance(sensorDistanceCm);
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <app_init+0x38>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 fcd8 	bl	8003700 <showSensorDistance>
	while(start == 0){
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <app_init+0x3c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f1      	beq.n	8000d3c <app_init+0x10>
	}
	ConfigAndStartSensor();
 8000d58:	f006 fdf0 	bl	800793c <ConfigAndStartSensor>

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000114 	.word	0x20000114
 8000d64:	200000f8 	.word	0x200000f8
 8000d68:	200000fc 	.word	0x200000fc

08000d6c <app_loop>:

void app_loop(void){
 8000d6c:	b598      	push	{r3, r4, r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	//Mostra a quantidade de objetos que passou pelo radar, a velocidade do último objeto e a unidade de medida
	showVelocityAndCount(count, VelocityCalculation(), MeasurementUnity);
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <app_loop+0x1c>)
 8000d72:	681c      	ldr	r4, [r3, #0]
 8000d74:	f7ff ffa4 	bl	8000cc0 <VelocityCalculation>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <app_loop+0x20>)
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f002 fce4 	bl	800374c <showVelocityAndCount>

}
 8000d84:	bf00      	nop
 8000d86:	bd98      	pop	{r3, r4, r7, pc}
 8000d88:	200000f0 	.word	0x200000f0
 8000d8c:	20000100 	.word	0x20000100

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 fbe2 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f810 	bl	8000dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f000 f952 	bl	8001044 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000da0:	f000 f8c6 	bl	8000f30 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000da4:	f000 f8f2 	bl	8000f8c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000da8:	f000 f91e 	bl	8000fe8 <MX_I2C3_Init>
  MX_ADC1_Init();
 8000dac:	f000 f86e 	bl	8000e8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000db0:	f7ff ffbc 	bl	8000d2c <app_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  app_loop();
 8000db4:	f7ff ffda 	bl	8000d6c <app_loop>
 8000db8:	e7fc      	b.n	8000db4 <main+0x24>
	...

08000dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b094      	sub	sp, #80	; 0x50
 8000dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc2:	f107 0320 	add.w	r3, r7, #32
 8000dc6:	2230      	movs	r2, #48	; 0x30
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f006 fe9c 	bl	8007b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <SystemClock_Config+0xc8>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <SystemClock_Config+0xc8>)
 8000dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dee:	6413      	str	r3, [r2, #64]	; 0x40
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <SystemClock_Config+0xc8>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <SystemClock_Config+0xcc>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a20      	ldr	r2, [pc, #128]	; (8000e88 <SystemClock_Config+0xcc>)
 8000e06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <SystemClock_Config+0xcc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e30:	2364      	movs	r3, #100	; 0x64
 8000e32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fef3 	bl	8002c2c <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e4c:	f000 f980 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 f955 	bl	800311c <HAL_RCC_ClockConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e78:	f000 f96a 	bl	8001150 <Error_Handler>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3750      	adds	r7, #80	; 0x50
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40007000 	.word	0x40007000

08000e8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ea0:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <MX_ADC1_Init+0x9c>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ea6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ece:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <MX_ADC1_Init+0xa0>)
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eee:	f000 fbcb 	bl	8001688 <HAL_ADC_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ef8:	f000 f92a 	bl	8001150 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000f0e:	f000 fd4b 	bl	80019a8 <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f18:	f000 f91a 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000114 	.word	0x20000114
 8000f28:	40012000 	.word	0x40012000
 8000f2c:	0f000001 	.word	0x0f000001

08000f30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <MX_I2C1_Init+0x54>)
 8000f38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f3c:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <MX_I2C1_Init+0x58>)
 8000f3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_I2C1_Init+0x50>)
 8000f6e:	f001 fa11 	bl	8002394 <HAL_I2C_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f78:	f000 f8ea 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000015c 	.word	0x2000015c
 8000f84:	40005400 	.word	0x40005400
 8000f88:	00061a80 	.word	0x00061a80

08000f8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000f92:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <MX_I2C2_Init+0x54>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_I2C2_Init+0x58>)
 8000f9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_I2C2_Init+0x50>)
 8000fca:	f001 f9e3 	bl	8002394 <HAL_I2C_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fd4:	f000 f8bc 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200001b0 	.word	0x200001b0
 8000fe0:	40005800 	.word	0x40005800
 8000fe4:	000186a0 	.word	0x000186a0

08000fe8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_I2C3_Init+0x50>)
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <MX_I2C3_Init+0x54>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_I2C3_Init+0x50>)
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_I2C3_Init+0x58>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_I2C3_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_I2C3_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_I2C3_Init+0x50>)
 8001006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_I2C3_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_I2C3_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_I2C3_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_I2C3_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_I2C3_Init+0x50>)
 8001026:	f001 f9b5 	bl	8002394 <HAL_I2C_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001030:	f000 f88e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000204 	.word	0x20000204
 800103c:	40005c00 	.word	0x40005c00
 8001040:	000186a0 	.word	0x000186a0

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	4b39      	ldr	r3, [pc, #228]	; (8001144 <MX_GPIO_Init+0x100>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a38      	ldr	r2, [pc, #224]	; (8001144 <MX_GPIO_Init+0x100>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b36      	ldr	r3, [pc, #216]	; (8001144 <MX_GPIO_Init+0x100>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <MX_GPIO_Init+0x100>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a31      	ldr	r2, [pc, #196]	; (8001144 <MX_GPIO_Init+0x100>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <MX_GPIO_Init+0x100>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_GPIO_Init+0x100>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a2a      	ldr	r2, [pc, #168]	; (8001144 <MX_GPIO_Init+0x100>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <MX_GPIO_Init+0x100>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_NHD_GPIO_Port, RESET_NHD_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	4824      	ldr	r0, [pc, #144]	; (8001148 <MX_GPIO_Init+0x104>)
 80010b6:	f001 f93b 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SWITCH_INFO_BUTTON_Pin */
  GPIO_InitStruct.Pin = SWITCH_INFO_BUTTON_Pin;
 80010ba:	2310      	movs	r3, #16
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SWITCH_INFO_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	4619      	mov	r1, r3
 80010ce:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_GPIO_Init+0x108>)
 80010d0:	f000 ffaa 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LASER2_Pin GPIO_LASER1_Pin */
  GPIO_InitStruct.Pin = GPIO_LASER2_Pin|GPIO_LASER1_Pin;
 80010d4:	2306      	movs	r3, #6
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	4619      	mov	r1, r3
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <MX_GPIO_Init+0x104>)
 80010ea:	f000 ff9d 	bl	8002028 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_NHD_Pin */
  GPIO_InitStruct.Pin = RESET_NHD_Pin;
 80010ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_NHD_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	4810      	ldr	r0, [pc, #64]	; (8001148 <MX_GPIO_Init+0x104>)
 8001108:	f000 ff8e 	bl	8002028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2103      	movs	r1, #3
 8001110:	2007      	movs	r0, #7
 8001112:	f000 ff52 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001116:	2007      	movs	r0, #7
 8001118:	f000 ff6b 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2103      	movs	r1, #3
 8001120:	2008      	movs	r0, #8
 8001122:	f000 ff4a 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001126:	2008      	movs	r0, #8
 8001128:	f000 ff63 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 4, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	200a      	movs	r0, #10
 8001132:	f000 ff42 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001136:	200a      	movs	r0, #10
 8001138:	f000 ff5b 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40020400 	.word	0x40020400
 800114c:	40020000 	.word	0x40020000

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_ADC_MspInit+0x7c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d127      	bne.n	800121e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a15      	ldr	r2, [pc, #84]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_ADC_MspInit+0x80>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = DISTANCE_REGULATOR_Pin;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISTANCE_REGULATOR_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <HAL_ADC_MspInit+0x84>)
 800121a:	f000 ff05 	bl	8002028 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3728      	adds	r7, #40	; 0x28
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40012000 	.word	0x40012000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000

08001234 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a63      	ldr	r2, [pc, #396]	; (80013e0 <HAL_I2C_MspInit+0x1ac>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d12c      	bne.n	80012b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b62      	ldr	r3, [pc, #392]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a61      	ldr	r2, [pc, #388]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SLC_LASER1_Pin|I2C1_SDA_LASER1_Pin;
 8001272:	23c0      	movs	r3, #192	; 0xc0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001276:	2312      	movs	r3, #18
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001282:	2304      	movs	r3, #4
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	4856      	ldr	r0, [pc, #344]	; (80013e8 <HAL_I2C_MspInit+0x1b4>)
 800128e:	f000 fecb 	bl	8002028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a52      	ldr	r2, [pc, #328]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 800129c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012ae:	e092      	b.n	80013d6 <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a4d      	ldr	r2, [pc, #308]	; (80013ec <HAL_I2C_MspInit+0x1b8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d13d      	bne.n	8001336 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = I2C2_SCL_LASER2_Pin;
 80012d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012e8:	2304      	movs	r3, #4
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C2_SCL_LASER2_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	483d      	ldr	r0, [pc, #244]	; (80013e8 <HAL_I2C_MspInit+0x1b4>)
 80012f4:	f000 fe98 	bl	8002028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_LASER2_Pin;
 80012f8:	2308      	movs	r3, #8
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fc:	2312      	movs	r3, #18
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001308:	2309      	movs	r3, #9
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C2_SDA_LASER2_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	4835      	ldr	r0, [pc, #212]	; (80013e8 <HAL_I2C_MspInit+0x1b4>)
 8001314:	f000 fe88 	bl	8002028 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a30      	ldr	r2, [pc, #192]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 8001322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
}
 8001334:	e04f      	b.n	80013d6 <HAL_I2C_MspInit+0x1a2>
  else if(hi2c->Instance==I2C3)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <HAL_I2C_MspInit+0x1bc>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d14a      	bne.n	80013d6 <HAL_I2C_MspInit+0x1a2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4a26      	ldr	r2, [pc, #152]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6313      	str	r3, [r2, #48]	; 0x30
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	6313      	str	r3, [r2, #48]	; 0x30
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SCL_NHD_Pin;
 8001378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137e:	2312      	movs	r3, #18
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800138a:	2304      	movs	r3, #4
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C3_SCL_NHD_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001392:	4619      	mov	r1, r3
 8001394:	4817      	ldr	r0, [pc, #92]	; (80013f4 <HAL_I2C_MspInit+0x1c0>)
 8001396:	f000 fe47 	bl	8002028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SDA_NHD_Pin;
 800139a:	2310      	movs	r3, #16
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	2312      	movs	r3, #18
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80013aa:	2309      	movs	r3, #9
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2C3_SDA_NHD_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <HAL_I2C_MspInit+0x1b4>)
 80013b6:	f000 fe37 	bl	8002028 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 80013c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_I2C_MspInit+0x1b0>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
}
 80013d6:	bf00      	nop
 80013d8:	3738      	adds	r7, #56	; 0x38
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40005400 	.word	0x40005400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40005800 	.word	0x40005800
 80013f0:	40005c00 	.word	0x40005c00
 80013f4:	40020000 	.word	0x40020000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 f8dc 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_LASER2_Pin);
 8001450:	2002      	movs	r0, #2
 8001452:	f000 ff87 	bl	8002364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}

0800145a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_LASER1_Pin);
 800145e:	2004      	movs	r0, #4
 8001460:	f000 ff80 	bl	8002364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_INFO_BUTTON_Pin);
 800146c:	2010      	movs	r0, #16
 800146e:	f000 ff79 	bl	8002364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001480:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <_sbrk+0x5c>)
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <_sbrk+0x60>)
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <_sbrk+0x64>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <_sbrk+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d207      	bcs.n	80014b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a8:	f006 faf6 	bl	8007a98 <__errno>
 80014ac:	4603      	mov	r3, r0
 80014ae:	220c      	movs	r2, #12
 80014b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e009      	b.n	80014cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <_sbrk+0x64>)
 80014c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ca:	68fb      	ldr	r3, [r7, #12]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20020000 	.word	0x20020000
 80014d8:	00000400 	.word	0x00000400
 80014dc:	20000258 	.word	0x20000258
 80014e0:	200009b8 	.word	0x200009b8

080014e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <SystemInit+0x20>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <SystemInit+0x20>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001540 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800150c:	480d      	ldr	r0, [pc, #52]	; (8001544 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800150e:	490e      	ldr	r1, [pc, #56]	; (8001548 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001510:	4a0e      	ldr	r2, [pc, #56]	; (800154c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001524:	4c0b      	ldr	r4, [pc, #44]	; (8001554 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001532:	f7ff ffd7 	bl	80014e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001536:	f006 fab5 	bl	8007aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff fc29 	bl	8000d90 <main>
  bx  lr    
 800153e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800154c:	080084b4 	.word	0x080084b4
  ldr r2, =_sbss
 8001550:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001554:	200009b8 	.word	0x200009b8

08001558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <HAL_Init+0x40>)
 8001566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <HAL_Init+0x40>)
 8001572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <HAL_Init+0x40>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 fd0d 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f808 	bl	80015a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fde4 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023c00 	.word	0x40023c00

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x54>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_InitTick+0x58>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fd25 	bl	800200e <HAL_SYSTICK_Config>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e00e      	b.n	80015ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d80a      	bhi.n	80015ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	f04f 30ff 	mov.w	r0, #4294967295
 80015dc:	f000 fced 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <HAL_InitTick+0x5c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	e000      	b.n	80015ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000004 	.word	0x20000004
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	20000008 	.word	0x20000008

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	2000000c 	.word	0x2000000c
 8001624:	2000025c 	.word	0x2000025c

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	2000025c 	.word	0x2000025c

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff ffee 	bl	8001628 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffde 	bl	8001628 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000000c 	.word	0x2000000c

08001688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e033      	b.n	8001706 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fd80 	bl	80011ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ce:	f023 0302 	bic.w	r3, r3, #2
 80016d2:	f043 0202 	orr.w	r2, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fa96 	bl	8001c0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f023 0303 	bic.w	r3, r3, #3
 80016ee:	f043 0201 	orr.w	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
 80016f6:	e001      	b.n	80016fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_ADC_Start+0x1a>
 8001726:	2302      	movs	r3, #2
 8001728:	e097      	b.n	800185a <HAL_ADC_Start+0x14a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d018      	beq.n	8001772 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001750:	4b45      	ldr	r3, [pc, #276]	; (8001868 <HAL_ADC_Start+0x158>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a45      	ldr	r2, [pc, #276]	; (800186c <HAL_ADC_Start+0x15c>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9a      	lsrs	r2, r3, #18
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001764:	e002      	b.n	800176c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	3b01      	subs	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f9      	bne.n	8001766 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b01      	cmp	r3, #1
 800177e:	d15f      	bne.n	8001840 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017be:	d106      	bne.n	80017ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c4:	f023 0206 	bic.w	r2, r3, #6
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
 80017cc:	e002      	b.n	80017d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_ADC_Start+0x160>)
 80017de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 031f 	and.w	r3, r3, #31
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10f      	bne.n	8001816 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d129      	bne.n	8001858 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	e020      	b.n	8001858 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_ADC_Start+0x164>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d11b      	bne.n	8001858 <HAL_ADC_Start+0x148>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d114      	bne.n	8001858 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	e00b      	b.n	8001858 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f043 0210 	orr.w	r2, r3, #16
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000004 	.word	0x20000004
 800186c:	431bde83 	.word	0x431bde83
 8001870:	40012300 	.word	0x40012300
 8001874:	40012000 	.word	0x40012000

08001878 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001894:	d113      	bne.n	80018be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a4:	d10b      	bne.n	80018be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f043 0220 	orr.w	r2, r3, #32
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e063      	b.n	8001986 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80018be:	f7ff feb3 	bl	8001628 <HAL_GetTick>
 80018c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018c4:	e021      	b.n	800190a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d01d      	beq.n	800190a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_ADC_PollForConversion+0x6c>
 80018d4:	f7ff fea8 	bl	8001628 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d212      	bcs.n	800190a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d00b      	beq.n	800190a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f043 0204 	orr.w	r2, r3, #4
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e03d      	b.n	8001986 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b02      	cmp	r3, #2
 8001916:	d1d6      	bne.n	80018c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0212 	mvn.w	r2, #18
 8001920:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d123      	bne.n	8001984 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d11f      	bne.n	8001984 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800195c:	2b00      	cmp	r3, #0
 800195e:	d111      	bne.n	8001984 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f043 0201 	orr.w	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1c>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e113      	b.n	8001bec <HAL_ADC_ConfigChannel+0x244>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d925      	bls.n	8001a20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68d9      	ldr	r1, [r3, #12]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	3b1e      	subs	r3, #30
 80019ea:	2207      	movs	r2, #7
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43da      	mvns	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	400a      	ands	r2, r1
 80019f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68d9      	ldr	r1, [r3, #12]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4403      	add	r3, r0
 8001a12:	3b1e      	subs	r3, #30
 8001a14:	409a      	lsls	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	e022      	b.n	8001a66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6919      	ldr	r1, [r3, #16]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	2207      	movs	r2, #7
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	400a      	ands	r2, r1
 8001a42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4403      	add	r3, r0
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d824      	bhi.n	8001ab8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3b05      	subs	r3, #5
 8001a80:	221f      	movs	r2, #31
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b05      	subs	r3, #5
 8001aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab6:	e04c      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b0c      	cmp	r3, #12
 8001abe:	d824      	bhi.n	8001b0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	3b23      	subs	r3, #35	; 0x23
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	400a      	ands	r2, r1
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b23      	subs	r3, #35	; 0x23
 8001afc:	fa00 f203 	lsl.w	r2, r0, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	631a      	str	r2, [r3, #48]	; 0x30
 8001b08:	e023      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	3b41      	subs	r3, #65	; 0x41
 8001b1c:	221f      	movs	r2, #31
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	400a      	ands	r2, r1
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	3b41      	subs	r3, #65	; 0x41
 8001b46:	fa00 f203 	lsl.w	r2, r0, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b52:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <HAL_ADC_ConfigChannel+0x250>)
 8001b54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_ADC_ConfigChannel+0x254>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d10f      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1d8>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b12      	cmp	r3, #18
 8001b66:	d10b      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_ADC_ConfigChannel+0x254>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d12b      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x23a>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <HAL_ADC_ConfigChannel+0x258>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x1f4>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b11      	cmp	r3, #17
 8001b9a:	d122      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_ADC_ConfigChannel+0x258>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d111      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_ADC_ConfigChannel+0x25c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_ADC_ConfigChannel+0x260>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	0c9a      	lsrs	r2, r3, #18
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bd4:	e002      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f9      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40012300 	.word	0x40012300
 8001bfc:	40012000 	.word	0x40012000
 8001c00:	10000012 	.word	0x10000012
 8001c04:	20000004 	.word	0x20000004
 8001c08:	431bde83 	.word	0x431bde83

08001c0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c14:	4b79      	ldr	r3, [pc, #484]	; (8001dfc <ADC_Init+0x1f0>)
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	021a      	lsls	r2, r3, #8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6899      	ldr	r1, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	4a58      	ldr	r2, [pc, #352]	; (8001e00 <ADC_Init+0x1f4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d022      	beq.n	8001cea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6899      	ldr	r1, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6899      	ldr	r1, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	e00f      	b.n	8001d0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0202 	bic.w	r2, r2, #2
 8001d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6899      	ldr	r1, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7e1b      	ldrb	r3, [r3, #24]
 8001d24:	005a      	lsls	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01b      	beq.n	8001d70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	3b01      	subs	r3, #1
 8001d64:	035a      	lsls	r2, r3, #13
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	e007      	b.n	8001d80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	051a      	lsls	r2, r3, #20
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dc2:	025a      	lsls	r2, r3, #9
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6899      	ldr	r1, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	029a      	lsls	r2, r3, #10
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	609a      	str	r2, [r3, #8]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40012300 	.word	0x40012300
 8001e00:	0f000001 	.word	0x0f000001

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <__NVIC_EnableIRQ+0x38>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff29 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff3e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff8e 	bl	8001ef8 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff31 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	e159      	b.n	80022f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8148 	bne.w	80022f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d005      	beq.n	800207a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002076:	2b02      	cmp	r3, #2
 8002078:	d130      	bne.n	80020dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b0:	2201      	movs	r2, #1
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 0201 	and.w	r2, r3, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d017      	beq.n	8002118 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d123      	bne.n	800216c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	69b9      	ldr	r1, [r7, #24]
 8002168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a2 	beq.w	80022f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b57      	ldr	r3, [pc, #348]	; (8002310 <HAL_GPIO_Init+0x2e8>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a56      	ldr	r2, [pc, #344]	; (8002310 <HAL_GPIO_Init+0x2e8>)
 80021b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b54      	ldr	r3, [pc, #336]	; (8002310 <HAL_GPIO_Init+0x2e8>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ca:	4a52      	ldr	r2, [pc, #328]	; (8002314 <HAL_GPIO_Init+0x2ec>)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a49      	ldr	r2, [pc, #292]	; (8002318 <HAL_GPIO_Init+0x2f0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x202>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a48      	ldr	r2, [pc, #288]	; (800231c <HAL_GPIO_Init+0x2f4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x1fe>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a47      	ldr	r2, [pc, #284]	; (8002320 <HAL_GPIO_Init+0x2f8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x1fa>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a46      	ldr	r2, [pc, #280]	; (8002324 <HAL_GPIO_Init+0x2fc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x1f6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a45      	ldr	r2, [pc, #276]	; (8002328 <HAL_GPIO_Init+0x300>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x1f2>
 8002216:	2304      	movs	r3, #4
 8002218:	e008      	b.n	800222c <HAL_GPIO_Init+0x204>
 800221a:	2307      	movs	r3, #7
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x204>
 800221e:	2303      	movs	r3, #3
 8002220:	e004      	b.n	800222c <HAL_GPIO_Init+0x204>
 8002222:	2302      	movs	r3, #2
 8002224:	e002      	b.n	800222c <HAL_GPIO_Init+0x204>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_GPIO_Init+0x204>
 800222a:	2300      	movs	r3, #0
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	f002 0203 	and.w	r2, r2, #3
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	4093      	lsls	r3, r2
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800223c:	4935      	ldr	r1, [pc, #212]	; (8002314 <HAL_GPIO_Init+0x2ec>)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224a:	4b38      	ldr	r3, [pc, #224]	; (800232c <HAL_GPIO_Init+0x304>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800226e:	4a2f      	ldr	r2, [pc, #188]	; (800232c <HAL_GPIO_Init+0x304>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_GPIO_Init+0x304>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002298:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_GPIO_Init+0x304>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800229e:	4b23      	ldr	r3, [pc, #140]	; (800232c <HAL_GPIO_Init+0x304>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022c2:	4a1a      	ldr	r2, [pc, #104]	; (800232c <HAL_GPIO_Init+0x304>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_GPIO_Init+0x304>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <HAL_GPIO_Init+0x304>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	f67f aea2 	bls.w	8002044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	40013800 	.word	0x40013800
 8002318:	40020000 	.word	0x40020000
 800231c:	40020400 	.word	0x40020400
 8002320:	40020800 	.word	0x40020800
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40021000 	.word	0x40021000
 800232c:	40013c00 	.word	0x40013c00

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	041a      	lsls	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	619a      	str	r2, [r3, #24]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fc04 	bl	8000b90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40013c00 	.word	0x40013c00

08002394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e12b      	b.n	80025fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe ff3a 	bl	8001234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f8:	f001 f886 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 80023fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a81      	ldr	r2, [pc, #516]	; (8002608 <HAL_I2C_Init+0x274>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d807      	bhi.n	8002418 <HAL_I2C_Init+0x84>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a80      	ldr	r2, [pc, #512]	; (800260c <HAL_I2C_Init+0x278>)
 800240c:	4293      	cmp	r3, r2
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e006      	b.n	8002426 <HAL_I2C_Init+0x92>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a7d      	ldr	r2, [pc, #500]	; (8002610 <HAL_I2C_Init+0x27c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	bf94      	ite	ls
 8002420:	2301      	movls	r3, #1
 8002422:	2300      	movhi	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0e7      	b.n	80025fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4a78      	ldr	r2, [pc, #480]	; (8002614 <HAL_I2C_Init+0x280>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9b      	lsrs	r3, r3, #18
 8002438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	430a      	orrs	r2, r1
 800244c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_I2C_Init+0x274>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d802      	bhi.n	8002468 <HAL_I2C_Init+0xd4>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3301      	adds	r3, #1
 8002466:	e009      	b.n	800247c <HAL_I2C_Init+0xe8>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	4a69      	ldr	r2, [pc, #420]	; (8002618 <HAL_I2C_Init+0x284>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	3301      	adds	r3, #1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	430b      	orrs	r3, r1
 8002482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800248e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	495c      	ldr	r1, [pc, #368]	; (8002608 <HAL_I2C_Init+0x274>)
 8002498:	428b      	cmp	r3, r1
 800249a:	d819      	bhi.n	80024d0 <HAL_I2C_Init+0x13c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1e59      	subs	r1, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024b0:	400b      	ands	r3, r1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_I2C_Init+0x138>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1e59      	subs	r1, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ca:	e051      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024cc:	2304      	movs	r3, #4
 80024ce:	e04f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d111      	bne.n	80024fc <HAL_I2C_Init+0x168>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	440b      	add	r3, r1
 80024e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e012      	b.n	8002522 <HAL_I2C_Init+0x18e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e58      	subs	r0, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	0099      	lsls	r1, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Init+0x196>
 8002526:	2301      	movs	r3, #1
 8002528:	e022      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10e      	bne.n	8002550 <HAL_I2C_Init+0x1bc>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1e58      	subs	r0, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	440b      	add	r3, r1
 8002540:	fbb0 f3f3 	udiv	r3, r0, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800254e:	e00f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	6809      	ldr	r1, [r1, #0]
 8002574:	4313      	orrs	r3, r2
 8002576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800259e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6911      	ldr	r1, [r2, #16]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68d2      	ldr	r2, [r2, #12]
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	000186a0 	.word	0x000186a0
 800260c:	001e847f 	.word	0x001e847f
 8002610:	003d08ff 	.word	0x003d08ff
 8002614:	431bde83 	.word	0x431bde83
 8002618:	10624dd3 	.word	0x10624dd3

0800261c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	461a      	mov	r2, r3
 8002628:	460b      	mov	r3, r1
 800262a:	817b      	strh	r3, [r7, #10]
 800262c:	4613      	mov	r3, r2
 800262e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7fe fffa 	bl	8001628 <HAL_GetTick>
 8002634:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b20      	cmp	r3, #32
 8002640:	f040 80e0 	bne.w	8002804 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2319      	movs	r3, #25
 800264a:	2201      	movs	r2, #1
 800264c:	4970      	ldr	r1, [pc, #448]	; (8002810 <HAL_I2C_Master_Transmit+0x1f4>)
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f964 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800265a:	2302      	movs	r3, #2
 800265c:	e0d3      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2C_Master_Transmit+0x50>
 8002668:	2302      	movs	r3, #2
 800266a:	e0cc      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d007      	beq.n	8002692 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2221      	movs	r2, #33	; 0x21
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2210      	movs	r2, #16
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	893a      	ldrh	r2, [r7, #8]
 80026c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4a50      	ldr	r2, [pc, #320]	; (8002814 <HAL_I2C_Master_Transmit+0x1f8>)
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026d4:	8979      	ldrh	r1, [r7, #10]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f89c 	bl	8002818 <I2C_MasterRequestWrite>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e08d      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002700:	e066      	b.n	80027d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f9de 	bl	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b04      	cmp	r3, #4
 8002718:	d107      	bne.n	800272a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06b      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d11b      	bne.n	80027a4 <HAL_I2C_Master_Transmit+0x188>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	d017      	beq.n	80027a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	6a39      	ldr	r1, [r7, #32]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f9ce 	bl	8002b4a <I2C_WaitOnBTFFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00d      	beq.n	80027d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d107      	bne.n	80027cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e01a      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d194      	bne.n	8002702 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	00100002 	.word	0x00100002
 8002814:	ffff0000 	.word	0xffff0000

08002818 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	460b      	mov	r3, r1
 8002826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d006      	beq.n	8002842 <I2C_MasterRequestWrite+0x2a>
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d003      	beq.n	8002842 <I2C_MasterRequestWrite+0x2a>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002840:	d108      	bne.n	8002854 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e00b      	b.n	800286c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	2b12      	cmp	r3, #18
 800285a:	d107      	bne.n	800286c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800286a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 f84f 	bl	800291c <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002892:	d103      	bne.n	800289c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e035      	b.n	800290c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a8:	d108      	bne.n	80028bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028aa:	897b      	ldrh	r3, [r7, #10]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028b8:	611a      	str	r2, [r3, #16]
 80028ba:	e01b      	b.n	80028f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028bc:	897b      	ldrh	r3, [r7, #10]
 80028be:	11db      	asrs	r3, r3, #7
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0306 	and.w	r3, r3, #6
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f063 030f 	orn	r3, r3, #15
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	490e      	ldr	r1, [pc, #56]	; (8002914 <I2C_MasterRequestWrite+0xfc>)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f875 	bl	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e010      	b.n	800290c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4907      	ldr	r1, [pc, #28]	; (8002918 <I2C_MasterRequestWrite+0x100>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f865 	bl	80029ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	00010008 	.word	0x00010008
 8002918:	00010002 	.word	0x00010002

0800291c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800292c:	e025      	b.n	800297a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d021      	beq.n	800297a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002936:	f7fe fe77 	bl	8001628 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d116      	bne.n	800297a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e023      	b.n	80029c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d10d      	bne.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4013      	ands	r3, r2
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf0c      	ite	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	2300      	movne	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	e00c      	b.n	80029ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d0b6      	beq.n	800292e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d8:	e051      	b.n	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	d123      	bne.n	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f043 0204 	orr.w	r2, r3, #4
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e046      	b.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d021      	beq.n	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7fe fdf5 	bl	8001628 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d116      	bne.n	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e020      	b.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10c      	bne.n	8002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4013      	ands	r3, r2
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e00b      	b.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4013      	ands	r3, r2
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d18d      	bne.n	80029da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad4:	e02d      	b.n	8002b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f878 	bl	8002bcc <I2C_IsAcknowledgeFailed>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e02d      	b.n	8002b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d021      	beq.n	8002b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe fd9b 	bl	8001628 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0220 	orr.w	r2, r3, #32
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e007      	b.n	8002b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b80      	cmp	r3, #128	; 0x80
 8002b3e:	d1ca      	bne.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b56:	e02d      	b.n	8002bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f837 	bl	8002bcc <I2C_IsAcknowledgeFailed>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e02d      	b.n	8002bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d021      	beq.n	8002bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b70:	f7fe fd5a 	bl	8001628 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d302      	bcc.n	8002b86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e007      	b.n	8002bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d1ca      	bne.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be2:	d11b      	bne.n	8002c1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f043 0204 	orr.w	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e267      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d075      	beq.n	8002d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d00c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c56:	4b85      	ldr	r3, [pc, #532]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d112      	bne.n	8002c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c62:	4b82      	ldr	r3, [pc, #520]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6e:	d10b      	bne.n	8002c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	4b7e      	ldr	r3, [pc, #504]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x108>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d157      	bne.n	8002d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e242      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x74>
 8002c92:	4b76      	ldr	r3, [pc, #472]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a75      	ldr	r2, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xb0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x98>
 8002caa:	4b70      	ldr	r3, [pc, #448]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6f      	ldr	r2, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b6d      	ldr	r3, [pc, #436]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6c      	ldr	r2, [pc, #432]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xb0>
 8002cc4:	4b69      	ldr	r3, [pc, #420]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a68      	ldr	r2, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b66      	ldr	r3, [pc, #408]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a65      	ldr	r2, [pc, #404]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fca0 	bl	8001628 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fc9c 	bl	8001628 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e207      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b5b      	ldr	r3, [pc, #364]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xc0>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fc8c 	bl	8001628 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fc88 	bl	8001628 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1f3      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	4b51      	ldr	r3, [pc, #324]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0xe8>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d063      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d42:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d11c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d116      	bne.n	8002d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x152>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e1c7      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4937      	ldr	r1, [pc, #220]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	e03a      	b.n	8002e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9c:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_RCC_OscConfig+0x244>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe fc41 	bl	8001628 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fe fc3d 	bl	8001628 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1a8      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4925      	ldr	r1, [pc, #148]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e015      	b.n	8002e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_OscConfig+0x244>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fc20 	bl	8001628 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe fc1c 	bl	8001628 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e187      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d036      	beq.n	8002e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_RCC_OscConfig+0x248>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fc00 	bl	8001628 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fbfc 	bl	8001628 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e167      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x200>
 8002e4a:	e01b      	b.n	8002e84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_OscConfig+0x248>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7fe fbe9 	bl	8001628 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	e00e      	b.n	8002e78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5a:	f7fe fbe5 	bl	8001628 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d907      	bls.n	8002e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e150      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	42470000 	.word	0x42470000
 8002e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ea      	bne.n	8002e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8097 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b81      	ldr	r3, [pc, #516]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	4b7d      	ldr	r3, [pc, #500]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a7c      	ldr	r2, [pc, #496]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b7a      	ldr	r3, [pc, #488]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b77      	ldr	r3, [pc, #476]	; (80030a0 <HAL_RCC_OscConfig+0x474>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d118      	bne.n	8002f00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ece:	4b74      	ldr	r3, [pc, #464]	; (80030a0 <HAL_RCC_OscConfig+0x474>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a73      	ldr	r2, [pc, #460]	; (80030a0 <HAL_RCC_OscConfig+0x474>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eda:	f7fe fba5 	bl	8001628 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee2:	f7fe fba1 	bl	8001628 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e10c      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x474>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2ea>
 8002f08:	4b64      	ldr	r3, [pc, #400]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a63      	ldr	r2, [pc, #396]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	e01c      	b.n	8002f50 <HAL_RCC_OscConfig+0x324>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x30c>
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a5e      	ldr	r2, [pc, #376]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	4b5c      	ldr	r3, [pc, #368]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a5b      	ldr	r2, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0x324>
 8002f38:	4b58      	ldr	r3, [pc, #352]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a57      	ldr	r2, [pc, #348]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	4b55      	ldr	r3, [pc, #340]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a54      	ldr	r2, [pc, #336]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	f023 0304 	bic.w	r3, r3, #4
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe fb66 	bl	8001628 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fe fb62 	bl	8001628 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0cb      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	4b49      	ldr	r3, [pc, #292]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0ee      	beq.n	8002f60 <HAL_RCC_OscConfig+0x334>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f84:	f7fe fb50 	bl	8001628 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fb4c 	bl	8001628 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0b5      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa2:	4b3e      	ldr	r3, [pc, #248]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ee      	bne.n	8002f8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb4:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4a38      	ldr	r2, [pc, #224]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a1 	beq.w	800310c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fca:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d05c      	beq.n	8003090 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d141      	bne.n	8003062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_RCC_OscConfig+0x478>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fb20 	bl	8001628 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fe fb1c 	bl	8001628 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e087      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	4b27      	ldr	r3, [pc, #156]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	019b      	lsls	r3, r3, #6
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	3b01      	subs	r3, #1
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	491b      	ldr	r1, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x478>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fe faf5 	bl	8001628 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003042:	f7fe faf1 	bl	8001628 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e05c      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x416>
 8003060:	e054      	b.n	800310c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_RCC_OscConfig+0x478>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fade 	bl	8001628 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe fada 	bl	8001628 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e045      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x444>
 800308e:	e03d      	b.n	800310c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e038      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000
 80030a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x4ec>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d028      	beq.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d121      	bne.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d11a      	bne.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d111      	bne.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800

0800311c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0cc      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4b68      	ldr	r3, [pc, #416]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d90c      	bls.n	8003158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b65      	ldr	r3, [pc, #404]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b63      	ldr	r3, [pc, #396]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0b8      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003170:	4b59      	ldr	r3, [pc, #356]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a58      	ldr	r2, [pc, #352]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800317a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003188:	4b53      	ldr	r3, [pc, #332]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	494d      	ldr	r1, [pc, #308]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d044      	beq.n	800323c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d119      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d003      	beq.n	80031da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e06f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e067      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4934      	ldr	r1, [pc, #208]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320c:	f7fe fa0c 	bl	8001628 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7fe fa08 	bl	8001628 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e04f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 020c 	and.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d1eb      	bne.n	8003214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d20c      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e032      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4916      	ldr	r1, [pc, #88]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	490e      	ldr	r1, [pc, #56]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032a2:	f000 f821 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80032a6:	4602      	mov	r2, r0
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	490a      	ldr	r1, [pc, #40]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	5ccb      	ldrb	r3, [r1, r3]
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe f96c 	bl	80015a0 <HAL_InitTick>

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023c00 	.word	0x40023c00
 80032d8:	40023800 	.word	0x40023800
 80032dc:	08008458 	.word	0x08008458
 80032e0:	20000004 	.word	0x20000004
 80032e4:	20000008 	.word	0x20000008

080032e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b094      	sub	sp, #80	; 0x50
 80032ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	647b      	str	r3, [r7, #68]	; 0x44
 80032f4:	2300      	movs	r3, #0
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f8:	2300      	movs	r3, #0
 80032fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003300:	4b79      	ldr	r3, [pc, #484]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b08      	cmp	r3, #8
 800330a:	d00d      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x40>
 800330c:	2b08      	cmp	r3, #8
 800330e:	f200 80e1 	bhi.w	80034d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x34>
 8003316:	2b04      	cmp	r3, #4
 8003318:	d003      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x3a>
 800331a:	e0db      	b.n	80034d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b73      	ldr	r3, [pc, #460]	; (80034ec <HAL_RCC_GetSysClockFreq+0x204>)
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003320:	e0db      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003322:	4b72      	ldr	r3, [pc, #456]	; (80034ec <HAL_RCC_GetSysClockFreq+0x204>)
 8003324:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003326:	e0d8      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003328:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003330:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003332:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d063      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333e:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	099b      	lsrs	r3, r3, #6
 8003344:	2200      	movs	r2, #0
 8003346:	63bb      	str	r3, [r7, #56]	; 0x38
 8003348:	63fa      	str	r2, [r7, #60]	; 0x3c
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003350:	633b      	str	r3, [r7, #48]	; 0x30
 8003352:	2300      	movs	r3, #0
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
 8003356:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800335a:	4622      	mov	r2, r4
 800335c:	462b      	mov	r3, r5
 800335e:	f04f 0000 	mov.w	r0, #0
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336c:	0150      	lsls	r0, r2, #5
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4621      	mov	r1, r4
 8003374:	1a51      	subs	r1, r2, r1
 8003376:	6139      	str	r1, [r7, #16]
 8003378:	4629      	mov	r1, r5
 800337a:	eb63 0301 	sbc.w	r3, r3, r1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800338c:	4659      	mov	r1, fp
 800338e:	018b      	lsls	r3, r1, #6
 8003390:	4651      	mov	r1, sl
 8003392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003396:	4651      	mov	r1, sl
 8003398:	018a      	lsls	r2, r1, #6
 800339a:	4651      	mov	r1, sl
 800339c:	ebb2 0801 	subs.w	r8, r2, r1
 80033a0:	4659      	mov	r1, fp
 80033a2:	eb63 0901 	sbc.w	r9, r3, r1
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ba:	4690      	mov	r8, r2
 80033bc:	4699      	mov	r9, r3
 80033be:	4623      	mov	r3, r4
 80033c0:	eb18 0303 	adds.w	r3, r8, r3
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	462b      	mov	r3, r5
 80033c8:	eb49 0303 	adc.w	r3, r9, r3
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033da:	4629      	mov	r1, r5
 80033dc:	028b      	lsls	r3, r1, #10
 80033de:	4621      	mov	r1, r4
 80033e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e4:	4621      	mov	r1, r4
 80033e6:	028a      	lsls	r2, r1, #10
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ee:	2200      	movs	r2, #0
 80033f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033f8:	f7fd fa48 	bl	800088c <__aeabi_uldivmod>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4613      	mov	r3, r2
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003404:	e058      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003406:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	2200      	movs	r2, #0
 800340e:	4618      	mov	r0, r3
 8003410:	4611      	mov	r1, r2
 8003412:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003416:	623b      	str	r3, [r7, #32]
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
 800341c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003420:	4642      	mov	r2, r8
 8003422:	464b      	mov	r3, r9
 8003424:	f04f 0000 	mov.w	r0, #0
 8003428:	f04f 0100 	mov.w	r1, #0
 800342c:	0159      	lsls	r1, r3, #5
 800342e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003432:	0150      	lsls	r0, r2, #5
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4641      	mov	r1, r8
 800343a:	ebb2 0a01 	subs.w	sl, r2, r1
 800343e:	4649      	mov	r1, r9
 8003440:	eb63 0b01 	sbc.w	fp, r3, r1
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003450:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003454:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003458:	ebb2 040a 	subs.w	r4, r2, sl
 800345c:	eb63 050b 	sbc.w	r5, r3, fp
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	00eb      	lsls	r3, r5, #3
 800346a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800346e:	00e2      	lsls	r2, r4, #3
 8003470:	4614      	mov	r4, r2
 8003472:	461d      	mov	r5, r3
 8003474:	4643      	mov	r3, r8
 8003476:	18e3      	adds	r3, r4, r3
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	464b      	mov	r3, r9
 800347c:	eb45 0303 	adc.w	r3, r5, r3
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800348e:	4629      	mov	r1, r5
 8003490:	028b      	lsls	r3, r1, #10
 8003492:	4621      	mov	r1, r4
 8003494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003498:	4621      	mov	r1, r4
 800349a:	028a      	lsls	r2, r1, #10
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a2:	2200      	movs	r2, #0
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	61fa      	str	r2, [r7, #28]
 80034a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ac:	f7fd f9ee 	bl	800088c <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4613      	mov	r3, r2
 80034b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	3301      	adds	r3, #1
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034d2:	e002      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetSysClockFreq+0x204>)
 80034d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3750      	adds	r7, #80	; 0x50
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e6:	bf00      	nop
 80034e8:	40023800 	.word	0x40023800
 80034ec:	00f42400 	.word	0x00f42400

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a9b      	lsrs	r3, r3, #10
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	08008468 	.word	0x08008468

08003530 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af02      	add	r7, sp, #8
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	f023 030f 	bic.w	r3, r3, #15
 8003540:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	f043 030c 	orr.w	r3, r3, #12
 800354e:	b2db      	uxtb	r3, r3
 8003550:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	f043 0308 	orr.w	r3, r3, #8
 8003558:	b2db      	uxtb	r3, r3
 800355a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800355c:	7bbb      	ldrb	r3, [r7, #14]
 800355e:	f043 030c 	orr.w	r3, r3, #12
 8003562:	b2db      	uxtb	r3, r3
 8003564:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003566:	7bbb      	ldrb	r3, [r7, #14]
 8003568:	f043 0308 	orr.w	r3, r3, #8
 800356c:	b2db      	uxtb	r3, r3
 800356e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003570:	f107 0208 	add.w	r2, r7, #8
 8003574:	2364      	movs	r3, #100	; 0x64
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	2304      	movs	r3, #4
 800357a:	214e      	movs	r1, #78	; 0x4e
 800357c:	4803      	ldr	r0, [pc, #12]	; (800358c <lcd_send_cmd+0x5c>)
 800357e:	f7ff f84d 	bl	800261c <HAL_I2C_Master_Transmit>
}
 8003582:	bf00      	nop
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000204 	.word	0x20000204

08003590 <lcd_send_data>:

void lcd_send_data (char data)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f023 030f 	bic.w	r3, r3, #15
 80035a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	f043 030d 	orr.w	r3, r3, #13
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	f043 0309 	orr.w	r3, r3, #9
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80035bc:	7bbb      	ldrb	r3, [r7, #14]
 80035be:	f043 030d 	orr.w	r3, r3, #13
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80035c6:	7bbb      	ldrb	r3, [r7, #14]
 80035c8:	f043 0309 	orr.w	r3, r3, #9
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80035d0:	f107 0208 	add.w	r2, r7, #8
 80035d4:	2364      	movs	r3, #100	; 0x64
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2304      	movs	r3, #4
 80035da:	214e      	movs	r1, #78	; 0x4e
 80035dc:	4803      	ldr	r0, [pc, #12]	; (80035ec <lcd_send_data+0x5c>)
 80035de:	f7ff f81d 	bl	800261c <HAL_I2C_Master_Transmit>
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000204 	.word	0x20000204

080035f0 <lcd_clear>:

void lcd_clear (void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80035f6:	2080      	movs	r0, #128	; 0x80
 80035f8:	f7ff ff9a 	bl	8003530 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	e005      	b.n	800360e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8003602:	2020      	movs	r0, #32
 8003604:	f7ff ffc4 	bl	8003590 <lcd_send_data>
	for (int i=0; i<70; i++)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3301      	adds	r3, #1
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b45      	cmp	r3, #69	; 0x45
 8003612:	ddf6      	ble.n	8003602 <lcd_clear+0x12>
	}
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
    switch (row)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <lcd_put_cur+0x18>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d005      	beq.n	8003640 <lcd_put_cur+0x22>
 8003634:	e009      	b.n	800364a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800363c:	603b      	str	r3, [r7, #0]
            break;
 800363e:	e004      	b.n	800364a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003646:	603b      	str	r3, [r7, #0]
            break;
 8003648:	bf00      	nop
    }

    lcd_send_cmd (col);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ff6e 	bl	8003530 <lcd_send_cmd>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <lcd_init>:


void lcd_init (void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8003660:	2032      	movs	r0, #50	; 0x32
 8003662:	f7fd ffed 	bl	8001640 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003666:	2030      	movs	r0, #48	; 0x30
 8003668:	f7ff ff62 	bl	8003530 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800366c:	2005      	movs	r0, #5
 800366e:	f7fd ffe7 	bl	8001640 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003672:	2030      	movs	r0, #48	; 0x30
 8003674:	f7ff ff5c 	bl	8003530 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003678:	2001      	movs	r0, #1
 800367a:	f7fd ffe1 	bl	8001640 <HAL_Delay>
	lcd_send_cmd (0x30);
 800367e:	2030      	movs	r0, #48	; 0x30
 8003680:	f7ff ff56 	bl	8003530 <lcd_send_cmd>
	HAL_Delay(10);
 8003684:	200a      	movs	r0, #10
 8003686:	f7fd ffdb 	bl	8001640 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800368a:	2020      	movs	r0, #32
 800368c:	f7ff ff50 	bl	8003530 <lcd_send_cmd>
	HAL_Delay(10);
 8003690:	200a      	movs	r0, #10
 8003692:	f7fd ffd5 	bl	8001640 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003696:	2028      	movs	r0, #40	; 0x28
 8003698:	f7ff ff4a 	bl	8003530 <lcd_send_cmd>
	HAL_Delay(1);
 800369c:	2001      	movs	r0, #1
 800369e:	f7fd ffcf 	bl	8001640 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80036a2:	2008      	movs	r0, #8
 80036a4:	f7ff ff44 	bl	8003530 <lcd_send_cmd>
	HAL_Delay(1);
 80036a8:	2001      	movs	r0, #1
 80036aa:	f7fd ffc9 	bl	8001640 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80036ae:	2001      	movs	r0, #1
 80036b0:	f7ff ff3e 	bl	8003530 <lcd_send_cmd>
	HAL_Delay(1);
 80036b4:	2001      	movs	r0, #1
 80036b6:	f7fd ffc3 	bl	8001640 <HAL_Delay>
	HAL_Delay(1);
 80036ba:	2001      	movs	r0, #1
 80036bc:	f7fd ffc0 	bl	8001640 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80036c0:	2006      	movs	r0, #6
 80036c2:	f7ff ff35 	bl	8003530 <lcd_send_cmd>
	HAL_Delay(1);
 80036c6:	2001      	movs	r0, #1
 80036c8:	f7fd ffba 	bl	8001640 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80036cc:	200c      	movs	r0, #12
 80036ce:	f7ff ff2f 	bl	8003530 <lcd_send_cmd>
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80036de:	e006      	b.n	80036ee <lcd_send_string+0x18>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff51 	bl	8003590 <lcd_send_data>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f4      	bne.n	80036e0 <lcd_send_string+0xa>
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <showSensorDistance>:


void showSensorDistance(uint32_t sensorDistanciaEmCm){
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	char sensorDistanciaPrint[20];

	lcd_clear();
 8003708:	f7ff ff72 	bl	80035f0 <lcd_clear>
	lcd_put_cur(0, 0);
 800370c:	2100      	movs	r1, #0
 800370e:	2000      	movs	r0, #0
 8003710:	f7ff ff85 	bl	800361e <lcd_put_cur>
	lcd_send_string ("D Sensores: ");
 8003714:	480b      	ldr	r0, [pc, #44]	; (8003744 <showSensorDistance+0x44>)
 8003716:	f7ff ffde 	bl	80036d6 <lcd_send_string>
	lcd_put_cur(0, 13);
 800371a:	210d      	movs	r1, #13
 800371c:	2000      	movs	r0, #0
 800371e:	f7ff ff7e 	bl	800361e <lcd_put_cur>
	sprintf(sensorDistanciaPrint, "%lu", (unsigned long)sensorDistanciaEmCm);
 8003722:	f107 030c 	add.w	r3, r7, #12
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4907      	ldr	r1, [pc, #28]	; (8003748 <showSensorDistance+0x48>)
 800372a:	4618      	mov	r0, r3
 800372c:	f004 f9f4 	bl	8007b18 <siprintf>
	lcd_send_string(sensorDistanciaPrint);
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ffce 	bl	80036d6 <lcd_send_string>
}
 800373a:	bf00      	nop
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	080083f8 	.word	0x080083f8
 8003748:	08008408 	.word	0x08008408

0800374c <showVelocityAndCount>:

void showVelocityAndCount(uint32_t count, uint32_t velocity, char MeasurementUnity[20]){
 800374c:	b580      	push	{r7, lr}
 800374e:	b08e      	sub	sp, #56	; 0x38
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]

	char contagem[20];
	char velMed[20];

	lcd_clear();
 8003758:	f7ff ff4a 	bl	80035f0 <lcd_clear>
	lcd_put_cur(0, 0);
 800375c:	2100      	movs	r1, #0
 800375e:	2000      	movs	r0, #0
 8003760:	f7ff ff5d 	bl	800361e <lcd_put_cur>
	lcd_send_string ("Count: ");
 8003764:	481a      	ldr	r0, [pc, #104]	; (80037d0 <showVelocityAndCount+0x84>)
 8003766:	f7ff ffb6 	bl	80036d6 <lcd_send_string>
	lcd_put_cur(0, 8);
 800376a:	2108      	movs	r1, #8
 800376c:	2000      	movs	r0, #0
 800376e:	f7ff ff56 	bl	800361e <lcd_put_cur>
	sprintf(contagem, "%lu", (unsigned long)count);
 8003772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	; (80037d4 <showVelocityAndCount+0x88>)
 800377a:	4618      	mov	r0, r3
 800377c:	f004 f9cc 	bl	8007b18 <siprintf>
	lcd_send_string (contagem);
 8003780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ffa6 	bl	80036d6 <lcd_send_string>
	lcd_put_cur(1, 0);
 800378a:	2100      	movs	r1, #0
 800378c:	2001      	movs	r0, #1
 800378e:	f7ff ff46 	bl	800361e <lcd_put_cur>
	lcd_send_string ("Vel Med: ");
 8003792:	4811      	ldr	r0, [pc, #68]	; (80037d8 <showVelocityAndCount+0x8c>)
 8003794:	f7ff ff9f 	bl	80036d6 <lcd_send_string>
	lcd_put_cur(1, 10);
 8003798:	210a      	movs	r1, #10
 800379a:	2001      	movs	r0, #1
 800379c:	f7ff ff3f 	bl	800361e <lcd_put_cur>
	sprintf(velMed, "%lu", (unsigned long)velocity);
 80037a0:	f107 0310 	add.w	r3, r7, #16
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	490b      	ldr	r1, [pc, #44]	; (80037d4 <showVelocityAndCount+0x88>)
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 f9b5 	bl	8007b18 <siprintf>
	lcd_send_string (velMed);
 80037ae:	f107 0310 	add.w	r3, r7, #16
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ff8f 	bl	80036d6 <lcd_send_string>
	lcd_put_cur(1, 13);
 80037b8:	210d      	movs	r1, #13
 80037ba:	2001      	movs	r0, #1
 80037bc:	f7ff ff2f 	bl	800361e <lcd_put_cur>
	lcd_send_string (MeasurementUnity);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff88 	bl	80036d6 <lcd_send_string>

}
 80037c6:	bf00      	nop
 80037c8:	3738      	adds	r7, #56	; 0x38
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	0800840c 	.word	0x0800840c
 80037d4:	08008408 	.word	0x08008408
 80037d8:	08008414 	.word	0x08008414

080037dc <GetDistanceSensor>:
#include "main.h"


extern ADC_HandleTypeDef hadc1;

uint32_t GetDistanceSensor(){
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0

	uint32_t readValue;
	uint32_t distancia;

	HAL_ADC_PollForConversion(&hadc1,1000);
 80037e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037e6:	480b      	ldr	r0, [pc, #44]	; (8003814 <GetDistanceSensor+0x38>)
 80037e8:	f7fe f846 	bl	8001878 <HAL_ADC_PollForConversion>
	readValue = HAL_ADC_GetValue(&hadc1);
 80037ec:	4809      	ldr	r0, [pc, #36]	; (8003814 <GetDistanceSensor+0x38>)
 80037ee:	f7fe f8ce 	bl	800198e <HAL_ADC_GetValue>
 80037f2:	6078      	str	r0, [r7, #4]

	distancia = (readValue*(500-10))/(4095+10);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	4a06      	ldr	r2, [pc, #24]	; (8003818 <GetDistanceSensor+0x3c>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	0b1b      	lsrs	r3, r3, #12
 8003806:	603b      	str	r3, [r7, #0]


	return distancia;
 8003808:	683b      	ldr	r3, [r7, #0]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000114 	.word	0x20000114
 8003818:	ff7050d3 	.word	0xff7050d3

0800381c <ConvertModeToLLD>:
	return Status;
}

static VL53L1_GPIO_Interrupt_Mode ConvertModeToLLD(VL53L1_Error *pStatus,
		VL53L1_ThresholdMode CrossMode)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	70fb      	strb	r3, [r7, #3]
	VL53L1_GPIO_Interrupt_Mode Mode;

	switch (CrossMode) {
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d816      	bhi.n	800385c <ConvertModeToLLD+0x40>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <ConvertModeToLLD+0x18>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	08003845 	.word	0x08003845
 8003838:	0800384b 	.word	0x0800384b
 800383c:	08003851 	.word	0x08003851
 8003840:	08003857 	.word	0x08003857
	case VL53L1_THRESHOLD_CROSSED_LOW:
		Mode = VL53L1_GPIOINTMODE_LEVEL_LOW;
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]
		break;
 8003848:	e00d      	b.n	8003866 <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_CROSSED_HIGH:
		Mode = VL53L1_GPIOINTMODE_LEVEL_HIGH;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
		break;
 800384e:	e00a      	b.n	8003866 <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_OUT_OF_WINDOW:
		Mode = VL53L1_GPIOINTMODE_OUT_OF_WINDOW;
 8003850:	2302      	movs	r3, #2
 8003852:	73fb      	strb	r3, [r7, #15]
		break;
 8003854:	e007      	b.n	8003866 <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_IN_WINDOW:
		Mode = VL53L1_GPIOINTMODE_IN_WINDOW;
 8003856:	2303      	movs	r3, #3
 8003858:	73fb      	strb	r3, [r7, #15]
		break;
 800385a:	e004      	b.n	8003866 <ConvertModeToLLD+0x4a>
	default:
		/* define Mode to avoid warning but actual value doesn't mind */
		Mode = VL53L1_GPIOINTMODE_LEVEL_HIGH;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
		*pStatus = VL53L1_ERROR_INVALID_PARAMS;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	22fc      	movs	r2, #252	; 0xfc
 8003864:	701a      	strb	r2, [r3, #0]
	}
	return Mode;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8003880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8003888:	2101      	movs	r1, #1
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fcd8 	bl	8004240 <VL53L1_data_init>
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8003894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d107      	bne.n	80038ac <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2208      	movs	r2, #8
 80038a8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038ac:	2300      	movs	r3, #0
 80038ae:	73bb      	strb	r3, [r7, #14]
 80038b0:	e012      	b.n	80038d8 <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 80038b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d112      	bne.n	80038e0 <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80038ba:	7bbb      	ldrb	r3, [r7, #14]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2201      	movs	r2, #1
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fb16 	bl	8003ef4 <VL53L1_SetLimitCheckEnable>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461a      	mov	r2, r3
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038d2:	7bbb      	ldrb	r3, [r7, #14]
 80038d4:	3301      	adds	r3, #1
 80038d6:	73bb      	strb	r3, [r7, #14]
 80038d8:	7bbb      	ldrb	r3, [r7, #14]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d9e9      	bls.n	80038b2 <VL53L1_DataInit+0x3e>
 80038de:	e000      	b.n	80038e2 <VL53L1_DataInit+0x6e>
		else
			break;
 80038e0:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d107      	bne.n	80038fa <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 80038ea:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80038ee:	2100      	movs	r1, #0
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fb3d 	bl	8003f70 <VL53L1_SetLimitCheckValue>
 80038f6:	4603      	mov	r3, r0
 80038f8:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 80038fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d107      	bne.n	8003912 <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8003902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003906:	2101      	movs	r1, #1
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fb31 	bl	8003f70 <VL53L1_SetLimitCheckValue>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003912:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2203      	movs	r2, #3
 800392e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003932:	2320      	movs	r3, #32
 8003934:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7bba      	ldrb	r2, [r7, #14]
 800393a:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2203      	movs	r2, #3
 8003940:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2203      	movs	r2, #3
 8003948:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2203      	movs	r2, #3
 8003950:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8003954:	2108      	movs	r1, #8
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8eb 	bl	8003b32 <VL53L1_SetPresetMode>
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 8003960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003974:	2300      	movs	r3, #0
 8003976:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8003978:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f004 f85f 	bl	8007a40 <VL53L1_poll_for_boot_completion>
 8003982:	4603      	mov	r3, r0
 8003984:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8003986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	603a      	str	r2, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
 80039a0:	460b      	mov	r3, r1
 80039a2:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 80039a8:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <ComputeDevicePresetMode+0xc4>)
 80039aa:	f107 0310 	add.w	r3, r7, #16
 80039ae:	6812      	ldr	r2, [r2, #0]
 80039b0:	4611      	mov	r1, r2
 80039b2:	8019      	strh	r1, [r3, #0]
 80039b4:	3302      	adds	r3, #2
 80039b6:	0c12      	lsrs	r2, r2, #16
 80039b8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 80039ba:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <ComputeDevicePresetMode+0xc8>)
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	4611      	mov	r1, r2
 80039c4:	8019      	strh	r1, [r3, #0]
 80039c6:	3302      	adds	r3, #2
 80039c8:	0c12      	lsrs	r2, r2, #16
 80039ca:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80039cc:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <ComputeDevicePresetMode+0xcc>)
 80039ce:	f107 0308 	add.w	r3, r7, #8
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	4611      	mov	r1, r2
 80039d6:	8019      	strh	r1, [r3, #0]
 80039d8:	3302      	adds	r3, #2
 80039da:	0c12      	lsrs	r2, r2, #16
 80039dc:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80039e4:	79bb      	ldrb	r3, [r7, #6]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d002      	beq.n	80039f0 <ComputeDevicePresetMode+0x5c>
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d003      	beq.n	80039f6 <ComputeDevicePresetMode+0x62>
 80039ee:	e005      	b.n	80039fc <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	75bb      	strb	r3, [r7, #22]
		break;
 80039f4:	e004      	b.n	8003a00 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75bb      	strb	r3, [r7, #22]
		break;
 80039fa:	e001      	b.n	8003a00 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80039fc:	2302      	movs	r3, #2
 80039fe:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d015      	beq.n	8003a32 <ComputeDevicePresetMode+0x9e>
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	dc1b      	bgt.n	8003a42 <ComputeDevicePresetMode+0xae>
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d009      	beq.n	8003a22 <ComputeDevicePresetMode+0x8e>
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d117      	bne.n	8003a42 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8003a12:	7dbb      	ldrb	r3, [r7, #22]
 8003a14:	3318      	adds	r3, #24
 8003a16:	443b      	add	r3, r7
 8003a18:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
		break;
 8003a20:	e011      	b.n	8003a46 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8003a22:	7dbb      	ldrb	r3, [r7, #22]
 8003a24:	3318      	adds	r3, #24
 8003a26:	443b      	add	r3, r7
 8003a28:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	701a      	strb	r2, [r3, #0]
		break;
 8003a30:	e009      	b.n	8003a46 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8003a32:	7dbb      	ldrb	r3, [r7, #22]
 8003a34:	3318      	adds	r3, #24
 8003a36:	443b      	add	r3, r7
 8003a38:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	701a      	strb	r2, [r3, #0]
		break;
 8003a40:	e001      	b.n	8003a46 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003a42:	23f8      	movs	r3, #248	; 0xf8
 8003a44:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8003a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	0800844c 	.word	0x0800844c
 8003a5c:	08008450 	.word	0x08008450
 8003a60:	08008454 	.word	0x08008454

08003a64 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003a64:	b5b0      	push	{r4, r5, r7, lr}
 8003a66:	b08e      	sub	sp, #56	; 0x38
 8003a68:	af04      	add	r7, sp, #16
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	72fb      	strb	r3, [r7, #11]
 8003a72:	4613      	mov	r3, r2
 8003a74:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d002      	beq.n	8003a88 <SetPresetMode+0x24>
 8003a82:	7afb      	ldrb	r3, [r7, #11]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d103      	bne.n	8003a90 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8003a88:	2340      	movs	r3, #64	; 0x40
 8003a8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a8e:	e002      	b.n	8003a96 <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003a90:	2320      	movs	r3, #32
 8003a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8003a96:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8003a9a:	7ab9      	ldrb	r1, [r7, #10]
 8003a9c:	7afb      	ldrb	r3, [r7, #11]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ff78 	bl	8003994 <ComputeDevicePresetMode>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003aaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d112      	bne.n	8003ad8 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8003ab2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003ab6:	f107 001c 	add.w	r0, r7, #28
 8003aba:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8003abe:	f107 0314 	add.w	r3, r7, #20
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	f107 0318 	add.w	r3, r7, #24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	4603      	mov	r3, r0
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fe51 	bl	8004774 <VL53L1_get_preset_mode_timing_cfg>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8003ad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d112      	bne.n	8003b06 <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8003ae0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8003ae4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003ae6:	69fd      	ldr	r5, [r7, #28]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	9102      	str	r1, [sp, #8]
 8003af0:	9201      	str	r2, [sp, #4]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	462b      	mov	r3, r5
 8003af6:	4622      	mov	r2, r4
 8003af8:	4601      	mov	r1, r0
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fee4 	bl	80048c8 <VL53L1_set_preset_mode>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003b06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <SetPresetMode+0xb2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003b14:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 8003b16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	7afa      	ldrb	r2, [r7, #11]
 8003b22:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8003b26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3728      	adds	r7, #40	; 0x28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bdb0      	pop	{r4, r5, r7, pc}

08003b32 <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003b42:	2303      	movs	r3, #3
 8003b44:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 8003b46:	7bba      	ldrb	r2, [r7, #14]
 8003b48:	78f9      	ldrb	r1, [r7, #3]
 8003b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff ff88 	bl	8003a64 <SetPresetMode>
 8003b54:	4603      	mov	r3, r0
 8003b56:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8003b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11f      	bne.n	8003ba0 <VL53L1_SetPresetMode+0x6e>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7bba      	ldrb	r2, [r7, #14]
 8003b64:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	7bba      	ldrb	r2, [r7, #14]
 8003b6c:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d005      	beq.n	8003b82 <VL53L1_SetPresetMode+0x50>
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d002      	beq.n	8003b82 <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d107      	bne.n	8003b92 <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b82:	f24a 0128 	movw	r1, #41000	; 0xa028
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8a2 	bl	8003cd0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	73fb      	strb	r3, [r7, #15]
 8003b90:	e006      	b.n	8003ba0 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b92:	f248 2135 	movw	r1, #33333	; 0x8235
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f89a 	bl	8003cd0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8003ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f965 	bl	8003e7c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b088      	sub	sp, #32
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003bd8:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d008      	beq.n	8003bf2 <VL53L1_SetDistanceMode+0x30>
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d005      	beq.n	8003bf2 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d002      	beq.n	8003bf2 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8003bec:	f06f 0303 	mvn.w	r3, #3
 8003bf0:	e069      	b.n	8003cc6 <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 8003bf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d002      	beq.n	8003c06 <VL53L1_SetDistanceMode+0x44>
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d102      	bne.n	8003c0c <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	77bb      	strb	r3, [r7, #30]
 8003c0a:	e001      	b.n	8003c10 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 8003c10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8003c18:	f107 0308 	add.w	r3, r7, #8
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fd51 	bl	80046c6 <VL53L1_get_user_zone>
 8003c24:	4603      	mov	r3, r0
 8003c26:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003c2e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	f107 0210 	add.w	r2, r7, #16
 8003c3e:	f107 010c 	add.w	r1, r7, #12
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fc7a 	bl	800453c <VL53L1_get_timeouts_us>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8003c4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d107      	bne.n	8003c64 <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 8003c54:	7fba      	ldrb	r2, [r7, #30]
 8003c56:	7f79      	ldrb	r1, [r7, #29]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ff02 	bl	8003a64 <SetPresetMode>
 8003c60:	4603      	mov	r3, r0
 8003c62:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8003c64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <VL53L1_SetDistanceMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7fba      	ldrb	r2, [r7, #30]
 8003c70:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7fba      	ldrb	r2, [r7, #30]
 8003c78:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003c84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10e      	bne.n	8003caa <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8003c8c:	68f9      	ldr	r1, [r7, #12]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fc1a 	bl	80044cc <VL53L1_set_timeouts_us>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8003c9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <VL53L1_SetDistanceMode+0xe8>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003caa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d107      	bne.n	8003cc2 <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8003cb2:	f107 0308 	add.w	r3, r7, #8
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fce1 	bl	8004680 <VL53L1_set_user_zone>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8003cc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08c      	sub	sp, #48	; 0x30
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003ce0:	4b64      	ldr	r3, [pc, #400]	; (8003e74 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 8003ce2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4a64      	ldr	r2, [pc, #400]	; (8003e78 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d902      	bls.n	8003cf2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003cec:	23fc      	movs	r3, #252	; 0xfc
 8003cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8003cf2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003cfa:	f107 031a 	add.w	r3, r7, #26
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2105      	movs	r1, #5
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f96d 	bl	8003fe2 <VL53L1_GetSequenceStepEnable>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003d0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003d16:	f107 0319 	add.w	r3, r7, #25
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2106      	movs	r1, #6
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f95f 	bl	8003fe2 <VL53L1_GetSequenceStepEnable>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003d2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	f107 0210 	add.w	r2, r7, #16
 8003d3a:	f107 010c 	add.w	r1, r7, #12
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fbfc 	bl	800453c <VL53L1_get_timeouts_us>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8003d4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 8081 	bne.w	8003e56 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003d5a:	76fb      	strb	r3, [r7, #27]

		TimingGuard = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8003d60:	2301      	movs	r3, #1
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8003d64:	7efb      	ldrb	r3, [r7, #27]
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d026      	beq.n	8003db8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	dc43      	bgt.n	8003df6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d00f      	beq.n	8003d92 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc2>
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d13f      	bne.n	8003df6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003d76:	7ebb      	ldrb	r3, [r7, #26]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d002      	beq.n	8003d82 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb2>
 8003d7c:	7e7b      	ldrb	r3, [r7, #25]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d103      	bne.n	8003d8a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xba>
				TimingGuard = 5000;
 8003d82:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8003d88:	e038      	b.n	8003dfc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				TimingGuard = 1000;
 8003d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003d90:	e034      	b.n	8003dfc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003d98:	7ebb      	ldrb	r3, [r7, #26]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d002      	beq.n	8003da4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd4>
 8003d9e:	7e7b      	ldrb	r3, [r7, #25]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d103      	bne.n	8003dac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xdc>
				TimingGuard = 26600;
 8003da4:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003daa:	e002      	b.n	8003db2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe2>
			else
				TimingGuard = 21600;
 8003dac:	f245 4360 	movw	r3, #21600	; 0x5460
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8003db2:	2302      	movs	r3, #2
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003db6:	e021      	b.n	8003dfc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003dbe:	23f5      	movs	r3, #245	; 0xf5
 8003dc0:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8003dc2:	f107 0308 	add.w	r3, r7, #8
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f248 0136 	movw	r1, #32822	; 0x8036
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f001 fa0f 	bl	80051f0 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	dd07      	ble.n	8003de8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x118>
				vhv += vhv_loops *
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	22f5      	movs	r2, #245	; 0xf5
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	4413      	add	r3, r2
 8003de6:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8003df0:	2302      	movs	r3, #2
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003df4:	e002      	b.n	8003dfc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003df6:	23f8      	movs	r3, #248	; 0xf8
 8003df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d803      	bhi.n	8003e0c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003e04:	23fc      	movs	r3, #252	; 0xfc
 8003e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003e0a:	e003      	b.n	8003e14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x144>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8003e12:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8003e14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d11c      	bne.n	8003e56 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d203      	bcs.n	8003e2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x15c>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8003e24:	23fc      	movs	r3, #252	; 0xfc
 8003e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003e2a:	e00d      	b.n	8003e48 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
			else {
				TimingBudget /= divisor;
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8003e36:	68f9      	ldr	r1, [r7, #12]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb45 	bl	80044cc <VL53L1_set_timeouts_us>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8003e48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
				VL53L1DevDataSet(Dev,
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8003e56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d103      	bne.n	8003e66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		VL53L1DevDataSet(Dev,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3730      	adds	r7, #48	; 0x30
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	00086470 	.word	0x00086470
 8003e78:	00989680 	.word	0x00989680

08003e7c <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 faf4 	bl	800447a <VL53L1_set_inter_measurement_period_ms>
 8003e92:	4603      	mov	r3, r0
 8003e94:	73fb      	strb	r3, [r7, #15]
			InterMeasurementPeriodMilliSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003eb4:	897b      	ldrh	r3, [r7, #10]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <SetLimitValue+0x1e>
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d009      	beq.n	8003ed2 <SetLimitValue+0x30>
 8003ebe:	e011      	b.n	8003ee4 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	0b9b      	lsrs	r3, r3, #14
 8003ec4:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8003ec6:	8abb      	ldrh	r3, [r7, #20]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 fe72 	bl	8004bb4 <VL53L1_set_lite_sigma_threshold>
		break;
 8003ed0:	e00a      	b.n	8003ee8 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0a5b      	lsrs	r3, r3, #9
 8003ed6:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8003ed8:	8abb      	ldrh	r3, [r7, #20]
 8003eda:	4619      	mov	r1, r3
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fe7f 	bl	8004be0 <VL53L1_set_lite_min_count_rate>
		break;
 8003ee2:	e001      	b.n	8003ee8 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003ee4:	23fc      	movs	r3, #252	; 0xfc
 8003ee6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
 8003f00:	4613      	mov	r3, r2
 8003f02:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d902      	bls.n	8003f18 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003f12:	23fc      	movs	r3, #252	; 0xfc
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	e014      	b.n	8003f42 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8003f18:	787b      	ldrb	r3, [r7, #1]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	e006      	b.n	8003f32 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003f24:	887b      	ldrh	r3, [r7, #2]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	33e0      	adds	r3, #224	; 0xe0
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8003f32:	887b      	ldrh	r3, [r7, #2]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ffb2 	bl	8003ea2 <SetLimitValue>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8003f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003f4a:	787b      	ldrb	r3, [r7, #1]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	460a      	mov	r2, r1
 8003f60:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8003f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <VL53L1_SetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d902      	bls.n	8003f8e <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003f88:	23fc      	movs	r3, #252	; 0xfc
 8003f8a:	75fb      	strb	r3, [r7, #23]
 8003f8c:	e023      	b.n	8003fd6 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8003f98:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8003f9a:	7dbb      	ldrb	r3, [r7, #22]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d107      	bne.n	8003fb0 <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003fa0:	897b      	ldrh	r3, [r7, #10]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	33e0      	adds	r3, #224	; 0xe0
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	e012      	b.n	8003fd6 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 8003fb0:	897b      	ldrh	r3, [r7, #10]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff ff73 	bl	8003ea2 <SetLimitValue>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 8003fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d106      	bne.n	8003fd6 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8003fc8:	897b      	ldrh	r3, [r7, #10]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	33e0      	adds	r3, #224	; 0xe0
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	460b      	mov	r3, r1
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8003ff4:	7afb      	ldrb	r3, [r7, #11]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fb09 	bl	8004612 <VL53L1_get_sequence_config_bit>
 8004000:	4603      	mov	r3, r0
 8004002:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8004004:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8004022:	73bb      	strb	r3, [r7, #14]
	switch (CurrPalState) {
 8004024:	7bbb      	ldrb	r3, [r7, #14]
 8004026:	2b63      	cmp	r3, #99	; 0x63
 8004028:	dc12      	bgt.n	8004050 <VL53L1_StartMeasurement+0x40>
 800402a:	2b62      	cmp	r3, #98	; 0x62
 800402c:	da0d      	bge.n	800404a <VL53L1_StartMeasurement+0x3a>
 800402e:	2b05      	cmp	r3, #5
 8004030:	dc0e      	bgt.n	8004050 <VL53L1_StartMeasurement+0x40>
 8004032:	2b04      	cmp	r3, #4
 8004034:	da09      	bge.n	800404a <VL53L1_StartMeasurement+0x3a>
 8004036:	2b02      	cmp	r3, #2
 8004038:	dc02      	bgt.n	8004040 <VL53L1_StartMeasurement+0x30>
 800403a:	2b00      	cmp	r3, #0
 800403c:	da05      	bge.n	800404a <VL53L1_StartMeasurement+0x3a>
 800403e:	e007      	b.n	8004050 <VL53L1_StartMeasurement+0x40>
 8004040:	2b03      	cmp	r3, #3
 8004042:	d105      	bne.n	8004050 <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]
		break;
 8004048:	e004      	b.n	8004054 <VL53L1_StartMeasurement+0x44>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800404a:	23f2      	movs	r3, #242	; 0xf2
 800404c:	73fb      	strb	r3, [r7, #15]
		break;
 800404e:	e001      	b.n	8004054 <VL53L1_StartMeasurement+0x44>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8004050:	23fd      	movs	r3, #253	; 0xfd
 8004052:	73fb      	strb	r3, [r7, #15]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	789b      	ldrb	r3, [r3, #2]
 8004058:	737b      	strb	r3, [r7, #13]

	if (Status == VL53L1_ERROR_NONE)
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d107      	bne.n	8004072 <VL53L1_StartMeasurement+0x62>
		Status = VL53L1_init_and_start_range(
 8004062:	7b7b      	ldrb	r3, [r7, #13]
 8004064:	2206      	movs	r2, #6
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fdef 	bl	8004c4c <VL53L1_init_and_start_range>
 800406e:	4603      	mov	r3, r0
 8004070:	73fb      	strb	r3, [r7, #15]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8004072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <VL53L1_StartMeasurement+0x72>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2204      	movs	r2, #4
 800407e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8004082:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <VL53L1_SetThresholdConfig>:

/* Group PAL detection triggered events Functions */

VL53L1_Error VL53L1_SetThresholdConfig(VL53L1_DEV Dev,
		VL53L1_DetectionConfig_t *pConfig)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08e      	sub	sp, #56	; 0x38
 8004094:	af02      	add	r7, sp, #8
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
#define BADTHRESBOUNDS(T) \
	(((T.CrossMode == VL53L1_THRESHOLD_OUT_OF_WINDOW) || \
	(T.CrossMode == VL53L1_THRESHOLD_IN_WINDOW)) && (T.Low > T.High))

	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800409a:	2300      	movs	r3, #0
 800409c:	76fb      	strb	r3, [r7, #27]
	FixPoint1616_t gain, high1616, low1616;
	VL53L1_LLDriverData_t *pdev;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	Status = VL53L1_get_GPIO_interrupt_config(Dev, &Cfg);
 80040a2:	f107 030c 	add.w	r3, r7, #12
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f001 f85f 	bl	800516c <VL53L1_get_GPIO_interrupt_config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	76fb      	strb	r3, [r7, #27]
	if (Status == VL53L1_ERROR_NONE) {
 80040b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f040 80bc 	bne.w	8004234 <VL53L1_SetThresholdConfig+0x1a4>
		if (pConfig->DetectionMode == VL53L1_DETECTION_NORMAL_RUN) {
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10d      	bne.n	80040e0 <VL53L1_SetThresholdConfig+0x50>
			Cfg.intr_new_measure_ready = 1;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73bb      	strb	r3, [r7, #14]
			Status = VL53L1_set_GPIO_interrupt_config_struct(Dev,
 80040c8:	8b3b      	ldrh	r3, [r7, #24]
 80040ca:	f8ad 3000 	strh.w	r3, [sp]
 80040ce:	f107 030c 	add.w	r3, r7, #12
 80040d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f001 f81b 	bl	8005110 <VL53L1_set_GPIO_interrupt_config_struct>
 80040da:	4603      	mov	r3, r0
 80040dc:	76fb      	strb	r3, [r7, #27]
 80040de:	e0a9      	b.n	8004234 <VL53L1_SetThresholdConfig+0x1a4>
					Cfg);
		} else {
			if (BADTHRESBOUNDS(pConfig->Distance))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	789b      	ldrb	r3, [r3, #2]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d003      	beq.n	80040f0 <VL53L1_SetThresholdConfig+0x60>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	789b      	ldrb	r3, [r3, #2]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d107      	bne.n	8004100 <VL53L1_SetThresholdConfig+0x70>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	88da      	ldrh	r2, [r3, #6]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	889b      	ldrh	r3, [r3, #4]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d901      	bls.n	8004100 <VL53L1_SetThresholdConfig+0x70>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80040fc:	23fc      	movs	r3, #252	; 0xfc
 80040fe:	76fb      	strb	r3, [r7, #27]
			if ((Status == VL53L1_ERROR_NONE) &&
 8004100:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10f      	bne.n	8004128 <VL53L1_SetThresholdConfig+0x98>
					(BADTHRESBOUNDS(pConfig->Rate)))
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	7a1b      	ldrb	r3, [r3, #8]
			if ((Status == VL53L1_ERROR_NONE) &&
 800410c:	2b02      	cmp	r3, #2
 800410e:	d003      	beq.n	8004118 <VL53L1_SetThresholdConfig+0x88>
					(BADTHRESBOUNDS(pConfig->Rate)))
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	7a1b      	ldrb	r3, [r3, #8]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d107      	bne.n	8004128 <VL53L1_SetThresholdConfig+0x98>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	429a      	cmp	r2, r3
 8004122:	d901      	bls.n	8004128 <VL53L1_SetThresholdConfig+0x98>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8004124:	23fc      	movs	r3, #252	; 0xfc
 8004126:	76fb      	strb	r3, [r7, #27]
			if (Status == VL53L1_ERROR_NONE) {
 8004128:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d149      	bne.n	80041c4 <VL53L1_SetThresholdConfig+0x134>
				Cfg.intr_new_measure_ready = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	73bb      	strb	r3, [r7, #14]
				Cfg.intr_no_target = pConfig->IntrNoTarget;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	73fb      	strb	r3, [r7, #15]
				/* fix ticket 466238
				 * Apply invert distance gain to thresholds */
				g = pdev->gain_cal.standard_ranging_gain_factor;
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004140:	857b      	strh	r3, [r7, #42]	; 0x2a
				/* gain is ufix 5.11, convert to 16.16 */
				gain = (FixPoint1616_t) (g << 5);
 8004142:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004144:	015b      	lsls	r3, r3, #5
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
				high1616 = (FixPoint1616_t)
						(pConfig->Distance.High << 16);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	889b      	ldrh	r3, [r3, #4]
 800414c:	041b      	lsls	r3, r3, #16
				high1616 = (FixPoint1616_t)
 800414e:	623b      	str	r3, [r7, #32]
				low1616 = (FixPoint1616_t)
						(pConfig->Distance.Low << 16);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	88db      	ldrh	r3, [r3, #6]
 8004154:	041b      	lsls	r3, r3, #16
				low1616 = (FixPoint1616_t)
 8004156:	61fb      	str	r3, [r7, #28]
				/* +32768 to round the results*/
				high1616 = (high1616 + 32768) / gain;
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	623b      	str	r3, [r7, #32]
				low1616 = (low1616 + 32768) / gain;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	61fb      	str	r3, [r7, #28]
				Cfg.threshold_distance_high = (uint16_t)
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	b29b      	uxth	r3, r3
 8004178:	827b      	strh	r3, [r7, #18]
						(high1616 & 0xFFFF);
				Cfg.threshold_distance_low = (uint16_t)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	b29b      	uxth	r3, r3
 800417e:	82bb      	strh	r3, [r7, #20]
						(low1616 & 0xFFFF);
				/* end fix ticket 466238 */
				Cfg.threshold_rate_high =
					VL53L1_FIXPOINT1616TOFIXPOINT97(
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	0a5b      	lsrs	r3, r3, #9
 8004186:	b29b      	uxth	r3, r3
				Cfg.threshold_rate_high =
 8004188:	82fb      	strh	r3, [r7, #22]
							pConfig->Rate.High);
				Cfg.threshold_rate_low =
					VL53L1_FIXPOINT1616TOFIXPOINT97(
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	0a5b      	lsrs	r3, r3, #9
 8004190:	b29b      	uxth	r3, r3
				Cfg.threshold_rate_low =
 8004192:	833b      	strh	r3, [r7, #24]
							pConfig->Rate.Low);

				Cfg.intr_mode_distance = ConvertModeToLLD(
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	789a      	ldrb	r2, [r3, #2]
 8004198:	f107 031b 	add.w	r3, r7, #27
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fb3c 	bl	800381c <ConvertModeToLLD>
 80041a4:	4603      	mov	r3, r0
 80041a6:	733b      	strb	r3, [r7, #12]
						&Status,
						pConfig->Distance.CrossMode);
				if (Status == VL53L1_ERROR_NONE)
 80041a8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <VL53L1_SetThresholdConfig+0x134>
					Cfg.intr_mode_rate = ConvertModeToLLD(
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	7a1a      	ldrb	r2, [r3, #8]
 80041b4:	f107 031b 	add.w	r3, r7, #27
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fb2e 	bl	800381c <ConvertModeToLLD>
 80041c0:	4603      	mov	r3, r0
 80041c2:	737b      	strb	r3, [r7, #13]
						&Status,
						pConfig->Rate.CrossMode);
			}

			/* Refine thresholds combination now */
			if (Status == VL53L1_ERROR_NONE) {
 80041c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d121      	bne.n	8004210 <VL53L1_SetThresholdConfig+0x180>
				Cfg.intr_combined_mode = 1;
 80041cc:	2301      	movs	r3, #1
 80041ce:	743b      	strb	r3, [r7, #16]
				switch (pConfig->DetectionMode) {
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d817      	bhi.n	800420a <VL53L1_SetThresholdConfig+0x17a>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <VL53L1_SetThresholdConfig+0x150>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f1 	.word	0x080041f1
 80041e4:	080041fb 	.word	0x080041fb
 80041e8:	08004205 	.word	0x08004205
 80041ec:	08004215 	.word	0x08004215
				case VL53L1_DETECTION_DISTANCE_ONLY:
					Cfg.threshold_rate_high = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	82fb      	strh	r3, [r7, #22]
					Cfg.threshold_rate_low = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	833b      	strh	r3, [r7, #24]
					break;
 80041f8:	e00d      	b.n	8004216 <VL53L1_SetThresholdConfig+0x186>
				case VL53L1_DETECTION_RATE_ONLY:
					Cfg.threshold_distance_high = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	827b      	strh	r3, [r7, #18]
					Cfg.threshold_distance_low = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	82bb      	strh	r3, [r7, #20]
					break;
 8004202:	e008      	b.n	8004216 <VL53L1_SetThresholdConfig+0x186>
					/* Nothing to do all is already
					 * in place
					 */
					break;
				case VL53L1_DETECTION_DISTANCE_AND_RATE:
					Cfg.intr_combined_mode = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	743b      	strb	r3, [r7, #16]
					break;
 8004208:	e005      	b.n	8004216 <VL53L1_SetThresholdConfig+0x186>
				default:
					Status = VL53L1_ERROR_INVALID_PARAMS;
 800420a:	23fc      	movs	r3, #252	; 0xfc
 800420c:	76fb      	strb	r3, [r7, #27]
 800420e:	e002      	b.n	8004216 <VL53L1_SetThresholdConfig+0x186>
				}
			}
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <VL53L1_SetThresholdConfig+0x186>
					break;
 8004214:	bf00      	nop

			if (Status == VL53L1_ERROR_NONE)
 8004216:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <VL53L1_SetThresholdConfig+0x1a4>
				Status =
				VL53L1_set_GPIO_interrupt_config_struct(Dev,
 800421e:	8b3b      	ldrh	r3, [r7, #24]
 8004220:	f8ad 3000 	strh.w	r3, [sp]
 8004224:	f107 030c 	add.w	r3, r7, #12
 8004228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 ff70 	bl	8005110 <VL53L1_set_GPIO_interrupt_config_struct>
 8004230:	4603      	mov	r3, r0
				Status =
 8004232:	76fb      	strb	r3, [r7, #27]

		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004234:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3730      	adds	r7, #48	; 0x30
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af04      	add	r7, sp, #16
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8004254:	2162      	movs	r1, #98	; 0x62
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f001 fec8 	bl	8005fec <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2201      	movs	r2, #1
 8004266:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2200      	movs	r2, #0
 800426c:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2201      	movs	r2, #1
 8004272:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2201      	movs	r2, #1
 8004278:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004280:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004288:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004290:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2264      	movs	r2, #100	; 0x64
 8004296:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800429e:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f240 72db 	movw	r2, #2011	; 0x7db
 80042ae:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f001 fe7e 	bl	8005fb4 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <VL53L1_data_init+0x90>
 80042be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d104      	bne.n	80042d0 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f857 	bl	800437a <VL53L1_read_p2p_data>
 80042cc:	4603      	mov	r3, r0
 80042ce:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 f9ae 	bl	8005638 <VL53L1_init_refspadchar_config_struct>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 f9ca 	bl	8005680 <VL53L1_init_ssc_config_struct>
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f103 0242 	add.w	r2, r3, #66	; 0x42
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f001 f9df 	bl	80056c2 <VL53L1_init_xtalk_config_struct>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fa39 	bl	8005786 <VL53L1_init_offset_cal_config_struct>
 8004314:	4603      	mov	r3, r0
 8004316:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	33a4      	adds	r3, #164	; 0xa4
 800431c:	4618      	mov	r0, r3
 800431e:	f001 fa59 	bl	80057d4 <VL53L1_init_tuning_parm_storage_struct>
 8004322:	4603      	mov	r3, r0
 8004324:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8004326:	2120      	movs	r1, #32
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fc6f 	bl	8004c0c <VL53L1_set_vhv_loopbound>
 800432e:	4603      	mov	r3, r0
 8004330:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8004332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d116      	bne.n	8004368 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	7858      	ldrb	r0, [r3, #1]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	8b1c      	ldrh	r4, [r3, #24]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	689d      	ldr	r5, [r3, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	6912      	ldr	r2, [r2, #16]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	6949      	ldr	r1, [r1, #20]
 8004352:	9102      	str	r1, [sp, #8]
 8004354:	9201      	str	r2, [sp, #4]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	462b      	mov	r3, r5
 800435a:	4622      	mov	r2, r4
 800435c:	4601      	mov	r1, r0
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fab2 	bl	80048c8 <VL53L1_set_preset_mode>
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f002 fbcf 	bl	8006b0c <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800436e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bdb0      	pop	{r4, r5, r7, pc}

0800437a <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800438a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d108      	bne.n	80043a4 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f002 fd6e 	bl	8006e7c <VL53L1_get_static_nvm_managed>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80043a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	3342      	adds	r3, #66	; 0x42
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f002 fea0 	bl	80070f8 <VL53L1_get_customer_nvm_managed>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80043bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d115      	bne.n	80043f0 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 80043ca:	4619      	mov	r1, r3
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f003 fa89 	bl	80078e4 <VL53L1_get_nvm_copy_data>
 80043d2:	4603      	mov	r3, r0
 80043d4:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 80043d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d108      	bne.n	80043f0 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	33f0      	adds	r3, #240	; 0xf0
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f001 ff16 	bl	800621c <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 80043f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80043fe:	461a      	mov	r2, r3
 8004400:	21de      	movs	r1, #222	; 0xde
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f002 fc50 	bl	8006ca8 <VL53L1_RdWord>
 8004408:	4603      	mov	r3, r0
 800440a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004416:	d204      	bcs.n	8004422 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800441e:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8004422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	339e      	adds	r3, #158	; 0x9e
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f96a 	bl	800470a <VL53L1_get_mode_mitigation_roi>
 8004436:	4603      	mov	r3, r0
 8004438:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d114      	bne.n	800446e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10f      	bne.n	800446e <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800446e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004484:	2300      	movs	r3, #0
 8004486:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004496:	23f1      	movs	r3, #241	; 0xf1
 8004498:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800449a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 80044ae:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 80044bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80044ec:	23f1      	movs	r3, #241	; 0xf1
 80044ee:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80044f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11b      	bne.n	8004530 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800451c:	9201      	str	r2, [sp, #4]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	460b      	mov	r3, r1
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	68b8      	ldr	r0, [r7, #8]
 8004528:	f002 f958 	bl	80067dc <VL53L1_calc_timeout_register_values>
 800452c:	4603      	mov	r3, r0
 800452e:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800454a:	2300      	movs	r3, #0
 800454c:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004564:	23f1      	movs	r3, #241	; 0xf1
 8004566:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004568:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d14a      	bne.n	8004606 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f001 ffd0 	bl	8006524 <VL53L1_calc_macro_period_us>
 8004584:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800458c:	6979      	ldr	r1, [r7, #20]
 800458e:	4618      	mov	r0, r3
 8004590:	f002 f889 	bl	80066a6 <VL53L1_calc_timeout_us>
 8004594:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 80045a0:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80045a2:	8a7b      	ldrh	r3, [r7, #18]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 80045ae:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80045b0:	4413      	add	r3, r2
 80045b2:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80045b4:	8a7b      	ldrh	r3, [r7, #18]
 80045b6:	6979      	ldr	r1, [r7, #20]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f002 f8b4 	bl	8006726 <VL53L1_calc_decoded_timeout_us>
 80045be:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 80045ca:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80045cc:	8a7b      	ldrh	r3, [r7, #18]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80045d8:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80045da:	4413      	add	r3, r2
 80045dc:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80045de:	8a7b      	ldrh	r3, [r7, #18]
 80045e0:	6979      	ldr	r1, [r7, #20]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f002 f89f 	bl	8006726 <VL53L1_calc_decoded_timeout_us>
 80045e8:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004606:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004612:	b480      	push	{r7}
 8004614:	b087      	sub	sp, #28
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	460b      	mov	r3, r1
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004620:	2300      	movs	r3, #0
 8004622:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004628:	2301      	movs	r3, #1
 800462a:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800462c:	7afb      	ldrb	r3, [r7, #11]
 800462e:	2b07      	cmp	r3, #7
 8004630:	d81c      	bhi.n	800466c <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8004632:	7afb      	ldrb	r3, [r7, #11]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8004638:	7afb      	ldrb	r3, [r7, #11]
 800463a:	2201      	movs	r2, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8004648:	7dbb      	ldrb	r3, [r7, #22]
 800464a:	4013      	ands	r3, r2
 800464c:	b2da      	uxtb	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8004652:	7afb      	ldrb	r3, [r7, #11]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00b      	beq.n	8004670 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	fa42 f303 	asr.w	r3, r2, r3
 8004664:	b2da      	uxtb	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e001      	b.n	8004670 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800466c:	23fc      	movs	r3, #252	; 0xfc
 800466e:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004670:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004674:	4618      	mov	r0, r3
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	7858      	ldrb	r0, [r3, #1]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	7819      	ldrb	r1, [r3, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 80046a0:	461a      	mov	r2, r3
 80046a2:	f002 f914 	bl	80068ce <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	7898      	ldrb	r0, [r3, #2]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	78d9      	ldrb	r1, [r3, #3]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80046b4:	461a      	mov	r2, r3
 80046b6:	f002 f949 	bl	800694c <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 80046ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4619      	mov	r1, r3
 80046e6:	f002 fa8c 	bl	8006c02 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	1c99      	adds	r1, r3, #2
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	3303      	adds	r3, #3
 80046f8:	461a      	mov	r2, r3
 80046fa:	f002 f90f 	bl	800691c <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 80046fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b086      	sub	sp, #24
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004714:	2300      	movs	r3, #0
 8004716:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800472e:	f107 020e 	add.w	r2, r7, #14
 8004732:	f107 010d 	add.w	r1, r7, #13
 8004736:	4618      	mov	r0, r3
 8004738:	f002 fa63 	bl	8006c02 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800473c:	7bba      	ldrb	r2, [r7, #14]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004742:	7b7a      	ldrb	r2, [r7, #13]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800474e:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	b2da      	uxtb	r2, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	b2da      	uxtb	r2, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004766:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	460b      	mov	r3, r1
 8004782:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800478c:	7afb      	ldrb	r3, [r7, #11]
 800478e:	3b01      	subs	r3, #1
 8004790:	2b25      	cmp	r3, #37	; 0x25
 8004792:	f200 808e 	bhi.w	80048b2 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	08004835 	.word	0x08004835
 80047a0:	08004835 	.word	0x08004835
 80047a4:	08004835 	.word	0x08004835
 80047a8:	08004835 	.word	0x08004835
 80047ac:	08004835 	.word	0x08004835
 80047b0:	0800485f 	.word	0x0800485f
 80047b4:	0800485f 	.word	0x0800485f
 80047b8:	0800485f 	.word	0x0800485f
 80047bc:	080048b3 	.word	0x080048b3
 80047c0:	080048b3 	.word	0x080048b3
 80047c4:	080048b3 	.word	0x080048b3
 80047c8:	080048b3 	.word	0x080048b3
 80047cc:	080048b3 	.word	0x080048b3
 80047d0:	080048b3 	.word	0x080048b3
 80047d4:	080048b3 	.word	0x080048b3
 80047d8:	080048b3 	.word	0x080048b3
 80047dc:	08004835 	.word	0x08004835
 80047e0:	0800485f 	.word	0x0800485f
 80047e4:	080048b3 	.word	0x080048b3
 80047e8:	080048b3 	.word	0x080048b3
 80047ec:	080048b3 	.word	0x080048b3
 80047f0:	080048b3 	.word	0x080048b3
 80047f4:	080048b3 	.word	0x080048b3
 80047f8:	080048b3 	.word	0x080048b3
 80047fc:	080048b3 	.word	0x080048b3
 8004800:	080048b3 	.word	0x080048b3
 8004804:	080048b3 	.word	0x080048b3
 8004808:	080048b3 	.word	0x080048b3
 800480c:	080048b3 	.word	0x080048b3
 8004810:	080048b3 	.word	0x080048b3
 8004814:	080048b3 	.word	0x080048b3
 8004818:	080048b3 	.word	0x080048b3
 800481c:	080048b3 	.word	0x080048b3
 8004820:	080048b3 	.word	0x080048b3
 8004824:	080048b3 	.word	0x080048b3
 8004828:	08004889 	.word	0x08004889
 800482c:	08004889 	.word	0x08004889
 8004830:	08004889 	.word	0x08004889
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	601a      	str	r2, [r3, #0]
	break;
 800485c:	e02c      	b.n	80048b8 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	601a      	str	r2, [r3, #0]
	break;
 8004886:	e017      	b.n	80048b8 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	601a      	str	r2, [r3, #0]
	break;
 80048b0:	e002      	b.n	80048b8 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80048b2:	23fc      	movs	r3, #252	; 0xfc
 80048b4:	75fb      	strb	r3, [r7, #23]
		break;
 80048b6:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80048b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b092      	sub	sp, #72	; 0x48
 80048cc:	af04      	add	r7, sp, #16
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	72fb      	strb	r3, [r7, #11]
 80048d6:	4613      	mov	r3, r2
 80048d8:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80048da:	2300      	movs	r3, #0
 80048dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8004902:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800490a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	33a4      	adds	r3, #164	; 0xa4
 8004910:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8004918:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	7afa      	ldrb	r2, [r7, #11]
 800491e:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004924:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800492a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004930:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8004932:	2103      	movs	r1, #3
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f001 fb59 	bl	8005fec <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	3b01      	subs	r3, #1
 800493e:	2b25      	cmp	r3, #37	; 0x25
 8004940:	f200 810c 	bhi.w	8004b5c <VL53L1_set_preset_mode+0x294>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <VL53L1_set_preset_mode+0x84>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	080049e5 	.word	0x080049e5
 8004950:	08004a01 	.word	0x08004a01
 8004954:	08004a1d 	.word	0x08004a1d
 8004958:	08004a39 	.word	0x08004a39
 800495c:	08004a55 	.word	0x08004a55
 8004960:	08004a71 	.word	0x08004a71
 8004964:	08004a8d 	.word	0x08004a8d
 8004968:	08004aa9 	.word	0x08004aa9
 800496c:	08004b5d 	.word	0x08004b5d
 8004970:	08004b5d 	.word	0x08004b5d
 8004974:	08004b5d 	.word	0x08004b5d
 8004978:	08004b5d 	.word	0x08004b5d
 800497c:	08004b5d 	.word	0x08004b5d
 8004980:	08004b5d 	.word	0x08004b5d
 8004984:	08004b5d 	.word	0x08004b5d
 8004988:	08004b5d 	.word	0x08004b5d
 800498c:	08004ac5 	.word	0x08004ac5
 8004990:	08004ae1 	.word	0x08004ae1
 8004994:	08004b5d 	.word	0x08004b5d
 8004998:	08004b5d 	.word	0x08004b5d
 800499c:	08004b5d 	.word	0x08004b5d
 80049a0:	08004b5d 	.word	0x08004b5d
 80049a4:	08004b5d 	.word	0x08004b5d
 80049a8:	08004b5d 	.word	0x08004b5d
 80049ac:	08004b5d 	.word	0x08004b5d
 80049b0:	08004b5d 	.word	0x08004b5d
 80049b4:	08004b5d 	.word	0x08004b5d
 80049b8:	08004b5d 	.word	0x08004b5d
 80049bc:	08004b5d 	.word	0x08004b5d
 80049c0:	08004b5d 	.word	0x08004b5d
 80049c4:	08004b5d 	.word	0x08004b5d
 80049c8:	08004b5d 	.word	0x08004b5d
 80049cc:	08004b5d 	.word	0x08004b5d
 80049d0:	08004b5d 	.word	0x08004b5d
 80049d4:	08004b5d 	.word	0x08004b5d
 80049d8:	08004afd 	.word	0x08004afd
 80049dc:	08004b1d 	.word	0x08004b1d
 80049e0:	08004b3d 	.word	0x08004b3d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049f4:	f000 ff7c 	bl	80058f0 <VL53L1_preset_mode_standard_ranging>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80049fe:	e0b1      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a10:	f001 f88c 	bl	8005b2c <VL53L1_preset_mode_standard_ranging_short_range>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8004a1a:	e0a3      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a2c:	f001 f8bf 	bl	8005bae <VL53L1_preset_mode_standard_ranging_long_range>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8004a36:	e095      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a48:	f001 f8f2 	bl	8005c30 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8004a52:	e087      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a64:	f001 f909 	bl	8005c7a <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8004a6e:	e079      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a80:	f001 f920 	bl	8005cc4 <VL53L1_preset_mode_timed_ranging>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8004a8a:	e06b      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a9c:	f001 f94c 	bl	8005d38 <VL53L1_preset_mode_timed_ranging_short_range>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8004aa6:	e05d      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ab8:	f001 f978 	bl	8005dac <VL53L1_preset_mode_timed_ranging_long_range>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8004ac2:	e04f      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ad4:	f001 fa4c 	bl	8005f70 <VL53L1_preset_mode_olt>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8004ade:	e041      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004af0:	f001 fa08 	bl	8005f04 <VL53L1_preset_mode_singleshot_ranging>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8004afa:	e033      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	9302      	str	r3, [sp, #8]
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b10:	f001 f9ac 	bl	8005e6c <VL53L1_preset_mode_low_power_auto_short_ranging>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8004b1a:	e023      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	9302      	str	r3, [sp, #8]
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b30:	f001 f976 	bl	8005e20 <VL53L1_preset_mode_low_power_auto_ranging>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8004b3a:	e013      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	9302      	str	r3, [sp, #8]
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b50:	f001 f9b2 	bl	8005eb8 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8004b5a:	e003      	b.n	8004b64 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004b5c:	23fc      	movs	r3, #252	; 0xfc
 8004b5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 8004b62:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8004b64:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	893a      	ldrh	r2, [r7, #8]
 8004b70:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	893a      	ldrh	r2, [r7, #8]
 8004b76:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8004b78:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d108      	bne.n	8004b92 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8004b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff fca0 	bl	80044cc <VL53L1_set_timeouts_us>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8004b92:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8004b9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff fc6c 	bl	800447a <VL53L1_set_inter_measurement_period_ms>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8004ba8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3738      	adds	r7, #56	; 0x38
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <VL53L1_set_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8004bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <VL53L1_set_lite_min_count_rate>:
}

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8004bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	4413      	add	r3, r2
 8004c34:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8004c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b0d0      	sub	sp, #320	; 0x140
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c56:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c5a:	6018      	str	r0, [r3, #0]
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c64:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8004c68:	4602      	mov	r2, r0
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c70:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004c74:	460a      	mov	r2, r1
 8004c76:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004c82:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8004c8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004c94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8004c98:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c9c:	3342      	adds	r3, #66	; 0x42
 8004c9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004ca2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ca6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004caa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004cae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cb2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004cb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004cba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cbe:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004cc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004cc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cca:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8004cce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004cd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cd6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004cda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8004cde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ce2:	332c      	adds	r3, #44	; 0x2c
 8004ce4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8004ce8:	f107 030c 	add.w	r3, r7, #12
 8004cec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8004d08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d0c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8004d10:	f2a2 123d 	subw	r2, r2, #317	; 0x13d
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8004d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1c:	791b      	ldrb	r3, [r3, #4]
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8004d26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004d2a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8004d2e:	f993 3000 	ldrsb.w	r3, [r3]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	b25b      	sxtb	r3, r3
 8004d36:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8004d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d3c:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8004d3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d42:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8004d46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d4a:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8004d4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d52:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8004d56:	2bff      	cmp	r3, #255	; 0xff
 8004d58:	d104      	bne.n	8004d64 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8004d5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004d64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d68:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d139      	bne.n	8004de4 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8004d70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d74:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d133      	bne.n	8004de4 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8004d7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d80:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8004d84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d88:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8004d8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8004d96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d9a:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8004d9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10c      	bne.n	8004dc0 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8004da6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004daa:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8004db6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004dba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8004dbe:	e004      	b.n	8004dca <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8004dc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8004dca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004dce:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d805      	bhi.n	8004de4 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8004dd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004ddc:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004de0:	2205      	movs	r2, #5
 8004de2:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004de4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004de8:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d113      	bne.n	8004e18 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8004df0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004df4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10d      	bne.n	8004e18 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8004dfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e00:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8004e04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e08:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8004e0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e10:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004e14:	2206      	movs	r2, #6
 8004e16:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8004e18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004e1c:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	2b05      	cmp	r3, #5
 8004e26:	d827      	bhi.n	8004e78 <VL53L1_init_and_start_range+0x22c>
 8004e28:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <VL53L1_init_and_start_range+0x1e4>)
 8004e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2e:	bf00      	nop
 8004e30:	08004e71 	.word	0x08004e71
 8004e34:	08004e69 	.word	0x08004e69
 8004e38:	08004e61 	.word	0x08004e61
 8004e3c:	08004e59 	.word	0x08004e59
 8004e40:	08004e51 	.word	0x08004e51
 8004e44:	08004e49 	.word	0x08004e49
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8004e4e:	e017      	b.n	8004e80 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8004e50:	230d      	movs	r3, #13
 8004e52:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8004e56:	e013      	b.n	8004e80 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8004e58:	2324      	movs	r3, #36	; 0x24
 8004e5a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8004e5e:	e00f      	b.n	8004e80 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8004e60:	2344      	movs	r3, #68	; 0x44
 8004e62:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8004e66:	e00b      	b.n	8004e80 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8004e68:	235a      	movs	r3, #90	; 0x5a
 8004e6a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8004e6e:	e007      	b.n	8004e80 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8004e70:	2371      	movs	r3, #113	; 0x71
 8004e72:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8004e76:	e003      	b.n	8004e80 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8004e78:	2383      	movs	r3, #131	; 0x83
 8004e7a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8004e7e:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8004e80:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8004e84:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8004e88:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8004e9a:	e00b      	b.n	8004eb4 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 8004e9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8004eaa:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8004eae:	3301      	adds	r3, #1
 8004eb0:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8004eb4:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8004eb8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d3ed      	bcc.n	8004e9c <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8004ec0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004ec4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b05      	cmp	r3, #5
 8004ecc:	d917      	bls.n	8004efe <VL53L1_init_and_start_range+0x2b2>
 8004ece:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d113      	bne.n	8004efe <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8004ed6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8004eda:	f1c3 0301 	rsb	r3, r3, #1
 8004ede:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004ee2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8004ee6:	f107 020c 	add.w	r2, r7, #12
 8004eea:	4413      	add	r3, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	210b      	movs	r1, #11
 8004ef0:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004ef4:	f001 ff0d 	bl	8006d12 <VL53L1_i2c_encode_static_nvm_managed>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8004efe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004f02:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d917      	bls.n	8004f3c <VL53L1_init_and_start_range+0x2f0>
 8004f0c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d113      	bne.n	8004f3c <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8004f14:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8004f18:	f1c3 030d 	rsb	r3, r3, #13
 8004f1c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004f20:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8004f24:	f107 020c 	add.w	r2, r7, #12
 8004f28:	4413      	add	r3, r2
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	2117      	movs	r1, #23
 8004f2e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8004f32:	f001 ffca 	bl	8006eca <VL53L1_i2c_encode_customer_nvm_managed>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8004f3c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004f40:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d917      	bls.n	8004f7a <VL53L1_init_and_start_range+0x32e>
 8004f4a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d113      	bne.n	8004f7a <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8004f52:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8004f56:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8004f5a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004f5e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8004f62:	f107 020c 	add.w	r2, r7, #12
 8004f66:	4413      	add	r3, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004f70:	f002 f8e9 	bl	8007146 <VL53L1_i2c_encode_static_config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8004f7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004f7e:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d917      	bls.n	8004fb8 <VL53L1_init_and_start_range+0x36c>
 8004f88:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d113      	bne.n	8004fb8 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8004f90:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8004f94:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8004f98:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004f9c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8004fa0:	f107 020c 	add.w	r2, r7, #12
 8004fa4:	4413      	add	r3, r2
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2116      	movs	r1, #22
 8004faa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8004fae:	f002 f9ad 	bl	800730c <VL53L1_i2c_encode_general_config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8004fb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004fbc:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d917      	bls.n	8004ff6 <VL53L1_init_and_start_range+0x3aa>
 8004fc6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d113      	bne.n	8004ff6 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8004fce:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8004fd2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8004fd6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8004fda:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8004fde:	f107 020c 	add.w	r2, r7, #12
 8004fe2:	4413      	add	r3, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	2117      	movs	r1, #23
 8004fe8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8004fec:	f002 fa12 	bl	8007414 <VL53L1_i2c_encode_timing_config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8004ff6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004ffa:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d036      	beq.n	8005072 <VL53L1_init_and_start_range+0x426>
 8005004:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005008:	2b00      	cmp	r3, #0
 800500a:	d132      	bne.n	8005072 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800500c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8005010:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005014:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800501c:	791b      	ldrb	r3, [r3, #4]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d017      	beq.n	8005056 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8005026:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800502a:	789b      	ldrb	r3, [r3, #2]
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	b2da      	uxtb	r2, r3
 8005032:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005036:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8005038:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800503c:	789b      	ldrb	r3, [r3, #2]
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	b2da      	uxtb	r2, r3
 8005044:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005048:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800504a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800504e:	789a      	ldrb	r2, [r3, #2]
 8005050:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005054:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005056:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800505a:	f107 020c 	add.w	r2, r7, #12
 800505e:	4413      	add	r3, r2
 8005060:	461a      	mov	r2, r3
 8005062:	2112      	movs	r1, #18
 8005064:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005068:	f002 fa56 	bl	8007518 <VL53L1_i2c_encode_dynamic_config>
 800506c:	4603      	mov	r3, r0
 800506e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 8005072:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005076:	2b00      	cmp	r3, #0
 8005078:	d113      	bne.n	80050a2 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 800507a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800507e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 8005082:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005086:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800508a:	f107 020c 	add.w	r2, r7, #12
 800508e:	4413      	add	r3, r2
 8005090:	461a      	mov	r2, r3
 8005092:	2105      	movs	r1, #5
 8005094:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005098:	f002 fac3 	bl	8007622 <VL53L1_i2c_encode_system_control>
 800509c:	4603      	mov	r3, r0
 800509e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 80050a2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10f      	bne.n	80050ca <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 80050aa:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80050ae:	f107 020c 	add.w	r2, r7, #12
 80050b2:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 80050b6:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80050ba:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 80050be:	6800      	ldr	r0, [r0, #0]
 80050c0:	f001 fdce 	bl	8006c60 <VL53L1_WriteMulti>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 80050ca:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80050d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	f000 ffb0 	bl	8006040 <VL53L1_update_ll_driver_rd_state>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 80050e6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80050ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	f001 f82a 	bl	8006150 <VL53L1_update_ll_driver_cfg_state>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8005102:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 8005106:	4618      	mov	r0, r3
 8005108:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <VL53L1_set_GPIO_interrupt_config_struct>:
 */

VL53L1_Error VL53L1_set_GPIO_interrupt_config_struct(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t	intconf)
{
 8005110:	b084      	sub	sp, #16
 8005112:	b580      	push	{r7, lr}
 8005114:	b086      	sub	sp, #24
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800511e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005122:	2300      	movs	r3, #0
 8005124:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	613b      	str	r3, [r7, #16]
	VL53L1_GPIO_interrupt_config_t *pintconf = &(pdev->gpio_interrupt_config);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3334      	adds	r3, #52	; 0x34
 800512e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	 /* using memcpy(dst, src, size in bytes) */
	memcpy(pintconf, &(intconf), sizeof(VL53L1_GPIO_interrupt_config_t));
 8005130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005134:	220e      	movs	r2, #14
 8005136:	4619      	mov	r1, r3
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f002 fcd7 	bl	8007aec <memcpy>

	/* encoded interrupt config */
	pdev->gen_cfg.system__interrupt_config_gpio =
		VL53L1_encode_GPIO_interrupt_config(pintconf);
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f001 fc1a 	bl	8006978 <VL53L1_encode_GPIO_interrupt_config>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
	pdev->gen_cfg.system__interrupt_config_gpio =
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

	/* set thresholds */
	status = VL53L1_set_GPIO_thresholds_from_struct(
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f001 fcb6 	bl	8006ac2 <VL53L1_set_GPIO_thresholds_from_struct>
 8005156:	4603      	mov	r3, r0
 8005158:	75fb      	strb	r3, [r7, #23]
			Dev,
			pintconf);

	LOG_FUNCTION_END(status);
	return status;
 800515a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005168:	b004      	add	sp, #16
 800516a:	4770      	bx	lr

0800516c <VL53L1_get_GPIO_interrupt_config>:
 */

VL53L1_Error VL53L1_get_GPIO_interrupt_config(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t	*pintconf)
{
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b089      	sub	sp, #36	; 0x24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6178      	str	r0, [r7, #20]
 8005174:	6139      	str	r1, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005176:	2300      	movs	r3, #0
 8005178:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	61bb      	str	r3, [r7, #24]

	/*
	 * Decode the system__interrupt_config_gpio register
	 * This makes sure the structure is in line with the register
	 */
	pdev->gpio_interrupt_config = VL53L1_decode_GPIO_interrupt_config(
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
 8005184:	69bc      	ldr	r4, [r7, #24]
 8005186:	463b      	mov	r3, r7
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f001 fc26 	bl	80069dc <VL53L1_decode_GPIO_interrupt_config>
 8005190:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8005194:	463c      	mov	r4, r7
 8005196:	6820      	ldr	r0, [r4, #0]
 8005198:	6861      	ldr	r1, [r4, #4]
 800519a:	68a2      	ldr	r2, [r4, #8]
 800519c:	c307      	stmia	r3!, {r0, r1, r2}
 800519e:	89a2      	ldrh	r2, [r4, #12]
 80051a0:	801a      	strh	r2, [r3, #0]

	/*
	 * Readout the system thresholds
	 */
	pdev->gpio_interrupt_config.threshold_distance_high =
		pdev->dyn_cfg.system__thresh_high;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
	pdev->gpio_interrupt_config.threshold_distance_high =
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	875a      	strh	r2, [r3, #58]	; 0x3a
	pdev->gpio_interrupt_config.threshold_distance_low =
		pdev->dyn_cfg.system__thresh_low;
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
	pdev->gpio_interrupt_config.threshold_distance_low =
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	879a      	strh	r2, [r3, #60]	; 0x3c

	pdev->gpio_interrupt_config.threshold_rate_high =
		pdev->gen_cfg.system__thresh_rate_high;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
	pdev->gpio_interrupt_config.threshold_rate_high =
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdev->gpio_interrupt_config.threshold_rate_low =
		pdev->gen_cfg.system__thresh_rate_low;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f8b3 2192 	ldrh.w	r2, [r3, #402]	; 0x192
	pdev->gpio_interrupt_config.threshold_rate_low =
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	if (pintconf == &(pdev->gpio_interrupt_config))	{
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	3334      	adds	r3, #52	; 0x34
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d006      	beq.n	80051e4 <VL53L1_get_GPIO_interrupt_config+0x78>
		/* Cowardly refusing to copy the same memory locations */
	} else {

		/* using memcpy(dst, src, size in bytes) */
		memcpy(pintconf, &(pdev->gpio_interrupt_config),
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	3334      	adds	r3, #52	; 0x34
 80051da:	220e      	movs	r2, #14
 80051dc:	4619      	mov	r1, r3
 80051de:	6938      	ldr	r0, [r7, #16]
 80051e0:	f002 fc84 	bl	8007aec <memcpy>
				sizeof(VL53L1_GPIO_interrupt_config_t));
	}

	LOG_FUNCTION_END(status);
	return status;
 80051e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3724      	adds	r7, #36	; 0x24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd90      	pop	{r4, r7, pc}

080051f0 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	460b      	mov	r3, r1
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80051fe:	2300      	movs	r3, #0
 8005200:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800520c:	2b38      	cmp	r3, #56	; 0x38
 800520e:	f200 8204 	bhi.w	800561a <VL53L1_get_tuning_parm+0x42a>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <VL53L1_get_tuning_parm+0x28>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	080052fd 	.word	0x080052fd
 800521c:	0800530b 	.word	0x0800530b
 8005220:	08005319 	.word	0x08005319
 8005224:	08005327 	.word	0x08005327
 8005228:	08005335 	.word	0x08005335
 800522c:	08005343 	.word	0x08005343
 8005230:	08005351 	.word	0x08005351
 8005234:	0800535f 	.word	0x0800535f
 8005238:	0800536d 	.word	0x0800536d
 800523c:	0800537b 	.word	0x0800537b
 8005240:	08005389 	.word	0x08005389
 8005244:	08005397 	.word	0x08005397
 8005248:	080053a5 	.word	0x080053a5
 800524c:	080053b3 	.word	0x080053b3
 8005250:	080053c1 	.word	0x080053c1
 8005254:	080053cf 	.word	0x080053cf
 8005258:	080053dd 	.word	0x080053dd
 800525c:	080053eb 	.word	0x080053eb
 8005260:	080053f9 	.word	0x080053f9
 8005264:	08005407 	.word	0x08005407
 8005268:	08005415 	.word	0x08005415
 800526c:	08005423 	.word	0x08005423
 8005270:	08005431 	.word	0x08005431
 8005274:	0800543f 	.word	0x0800543f
 8005278:	0800544d 	.word	0x0800544d
 800527c:	0800545b 	.word	0x0800545b
 8005280:	08005469 	.word	0x08005469
 8005284:	08005477 	.word	0x08005477
 8005288:	08005485 	.word	0x08005485
 800528c:	08005493 	.word	0x08005493
 8005290:	080054a1 	.word	0x080054a1
 8005294:	080054af 	.word	0x080054af
 8005298:	080054bd 	.word	0x080054bd
 800529c:	080054cb 	.word	0x080054cb
 80052a0:	080054d9 	.word	0x080054d9
 80052a4:	080054e7 	.word	0x080054e7
 80052a8:	080054f5 	.word	0x080054f5
 80052ac:	08005503 	.word	0x08005503
 80052b0:	08005511 	.word	0x08005511
 80052b4:	0800551f 	.word	0x0800551f
 80052b8:	0800552d 	.word	0x0800552d
 80052bc:	0800553b 	.word	0x0800553b
 80052c0:	08005549 	.word	0x08005549
 80052c4:	08005557 	.word	0x08005557
 80052c8:	08005565 	.word	0x08005565
 80052cc:	08005573 	.word	0x08005573
 80052d0:	08005581 	.word	0x08005581
 80052d4:	0800558f 	.word	0x0800558f
 80052d8:	0800559d 	.word	0x0800559d
 80052dc:	080055ab 	.word	0x080055ab
 80052e0:	080055b9 	.word	0x080055b9
 80052e4:	080055c7 	.word	0x080055c7
 80052e8:	080055d5 	.word	0x080055d5
 80052ec:	080055e3 	.word	0x080055e3
 80052f0:	080055f1 	.word	0x080055f1
 80052f4:	080055ff 	.word	0x080055ff
 80052f8:	0800560d 	.word	0x0800560d

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8005302:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	601a      	str	r2, [r3, #0]
	break;
 8005308:	e18e      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8005310:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]
	break;
 8005316:	e187      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800531e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	601a      	str	r2, [r3, #0]
	break;
 8005324:	e180      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800532c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	601a      	str	r2, [r3, #0]
	break;
 8005332:	e179      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800533a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]
	break;
 8005340:	e172      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005348:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	601a      	str	r2, [r3, #0]
	break;
 800534e:	e16b      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005356:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	601a      	str	r2, [r3, #0]
	break;
 800535c:	e164      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8005364:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
	break;
 800536a:	e15d      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8005372:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	601a      	str	r2, [r3, #0]
	break;
 8005378:	e156      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005380:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	601a      	str	r2, [r3, #0]
	break;
 8005386:	e14f      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800538e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
	break;
 8005394:	e148      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800539c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
	break;
 80053a2:	e141      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 80053aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	601a      	str	r2, [r3, #0]
	break;
 80053b0:	e13a      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80053b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	601a      	str	r2, [r3, #0]
	break;
 80053be:	e133      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80053c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	601a      	str	r2, [r3, #0]
	break;
 80053cc:	e12c      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80053d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	601a      	str	r2, [r3, #0]
	break;
 80053da:	e125      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80053e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	601a      	str	r2, [r3, #0]
	break;
 80053e8:	e11e      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80053f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
	break;
 80053f6:	e117      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80053fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601a      	str	r2, [r3, #0]
	break;
 8005404:	e110      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800540c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	601a      	str	r2, [r3, #0]
	break;
 8005412:	e109      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800541a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]
	break;
 8005420:	e102      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 8005428:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	601a      	str	r2, [r3, #0]
	break;
 800542e:	e0fb      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8005436:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
	break;
 800543c:	e0f4      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8005444:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	601a      	str	r2, [r3, #0]
	break;
 800544a:	e0ed      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005452:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]
	break;
 8005458:	e0e6      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005460:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
	break;
 8005466:	e0df      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800546e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]
	break;
 8005474:	e0d8      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800547c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
	break;
 8005482:	e0d1      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800548a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	601a      	str	r2, [r3, #0]
	break;
 8005490:	e0ca      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005498:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	601a      	str	r2, [r3, #0]
	break;
 800549e:	e0c3      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80054a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	601a      	str	r2, [r3, #0]
	break;
 80054ac:	e0bc      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80054b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	601a      	str	r2, [r3, #0]
	break;
 80054ba:	e0b5      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80054c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	601a      	str	r2, [r3, #0]
	break;
 80054c8:	e0ae      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 80054d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	601a      	str	r2, [r3, #0]
	break;
 80054d6:	e0a7      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 80054de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	601a      	str	r2, [r3, #0]
	break;
 80054e4:	e0a0      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 80054ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]
	break;
 80054f2:	e099      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80054fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	601a      	str	r2, [r3, #0]
	break;
 8005500:	e092      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005508:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
	break;
 800550e:	e08b      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005516:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	601a      	str	r2, [r3, #0]
	break;
 800551c:	e084      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005524:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	601a      	str	r2, [r3, #0]
	break;
 800552a:	e07d      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8005532:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]
	break;
 8005538:	e076      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8005540:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
	break;
 8005546:	e06f      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800554e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	601a      	str	r2, [r3, #0]
	break;
 8005554:	e068      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800555c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	601a      	str	r2, [r3, #0]
	break;
 8005562:	e061      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800556a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	601a      	str	r2, [r3, #0]
	break;
 8005570:	e05a      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8005578:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	601a      	str	r2, [r3, #0]
	break;
 800557e:	e053      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8005586:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
	break;
 800558c:	e04c      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8005594:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	601a      	str	r2, [r3, #0]
	break;
 800559a:	e045      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80055a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	601a      	str	r2, [r3, #0]
	break;
 80055a8:	e03e      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80055b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	601a      	str	r2, [r3, #0]
	break;
 80055b6:	e037      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]
	break;
 80055c4:	e030      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80055cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	601a      	str	r2, [r3, #0]
	break;
 80055d2:	e029      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
	break;
 80055e0:	e022      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	601a      	str	r2, [r3, #0]
	break;
 80055ee:	e01b      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80055f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]
	break;
 80055fc:	e014      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005604:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	601a      	str	r2, [r3, #0]
	break;
 800560a:	e00d      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005612:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]
	break;
 8005618:	e006      	b.n	8005628 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005620:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005622:	23fc      	movs	r3, #252	; 0xfc
 8005624:	75fb      	strb	r3, [r7, #23]
	break;
 8005626:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800562c:	4618      	mov	r0, r3
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2208      	movs	r2, #8
 8005648:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	220b      	movs	r2, #11
 800564e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005656:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800565e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8005666:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800566e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8005670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2212      	movs	r2, #18
 8005696:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	220f      	movs	r2, #15
 800569c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80056aa:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	220c      	movs	r2, #12
 80056b0:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80056b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	895b      	ldrh	r3, [r3, #10]
 80056d4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	895b      	ldrh	r3, [r3, #10]
 80056f2:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2200      	movs	r2, #0
 8005710:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2240      	movs	r2, #64	; 0x40
 8005716:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10d      	bne.n	800573c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d103      	bne.n	800573c <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	741a      	strb	r2, [r3, #16]
 800573a:	e002      	b.n	8005742 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2201      	movs	r2, #1
 8005740:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8005742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d114      	bne.n	8005774 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800574e:	2b01      	cmp	r3, #1
 8005750:	d110      	bne.n	8005774 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	7d1b      	ldrb	r3, [r3, #20]
 8005766:	f000 ff0d 	bl	8006584 <VL53L1_calc_range_ignore_threshold>
 800576a:	4603      	mov	r3, r0
 800576c:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	82da      	strh	r2, [r3, #22]
 8005772:	e002      	b.n	800577a <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2200      	movs	r2, #0
 8005778:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800577a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005798:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057a0:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80057a8:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80057b0:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2208      	movs	r2, #8
 80057b6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2228      	movs	r2, #40	; 0x28
 80057bc:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2209      	movs	r2, #9
 80057c2:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80057c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80057dc:	2300      	movs	r3, #0
 80057de:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f248 0203 	movw	r2, #32771	; 0x8003
 80057e6:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f248 0201 	movw	r2, #32769	; 0x8001
 80057ee:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f248 0241 	movw	r2, #32833	; 0x8041
 80057f6:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	220e      	movs	r2, #14
 80057fc:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	220a      	movs	r2, #10
 8005802:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2206      	movs	r2, #6
 8005808:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	220e      	movs	r2, #14
 800580e:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	220a      	movs	r2, #10
 8005814:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2206      	movs	r2, #6
 800581a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2221      	movs	r2, #33	; 0x21
 8005826:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800583a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8005842:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800584a:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	22c0      	movs	r2, #192	; 0xc0
 8005850:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	22c0      	movs	r2, #192	; 0xc0
 8005856:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	22c0      	movs	r2, #192	; 0xc0
 800585c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2208      	movs	r2, #8
 8005862:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2210      	movs	r2, #16
 8005868:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005898:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80058a0:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f248 0230 	movw	r2, #32816	; 0x8030
 80058a8:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80058b8:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f24f 6218 	movw	r2, #63000	; 0xf618
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80058d0:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80058de:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80058e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80058fe:	2300      	movs	r3, #0
 8005900:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005908:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2211      	movs	r2, #17
 800594a:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2202      	movs	r2, #2
 8005950:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2202      	movs	r2, #2
 800595c:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2208      	movs	r2, #8
 8005962:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	22ff      	movs	r2, #255	; 0xff
 80059a0:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2200      	movs	r2, #0
 80059ce:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2220      	movs	r2, #32
 80059d4:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	220b      	movs	r2, #11
 80059da:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2202      	movs	r2, #2
 80059e8:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	220d      	movs	r2, #13
 80059ee:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2200      	movs	r2, #0
 80059fc:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2201      	movs	r2, #1
 8005a02:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2200      	movs	r2, #0
 8005a08:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8005a16:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2238      	movs	r2, #56	; 0x38
 8005a22:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	22ff      	movs	r2, #255	; 0xff
 8005a28:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	221a      	movs	r2, #26
 8005a3a:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	22cc      	movs	r2, #204	; 0xcc
 8005a52:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	220b      	movs	r2, #11
 8005a58:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	22f5      	movs	r2, #245	; 0xf5
 8005a64:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2209      	movs	r2, #9
 8005a6a:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2208      	movs	r2, #8
 8005a80:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2278      	movs	r2, #120	; 0x78
 8005a86:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2201      	movs	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	220b      	movs	r2, #11
 8005aba:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2209      	movs	r2, #9
 8005ac0:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	22c7      	movs	r2, #199	; 0xc7
 8005af0:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	22db      	movs	r2, #219	; 0xdb
 8005afc:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2202      	movs	r2, #2
 8005b02:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	2200      	movs	r2, #0
 8005b08:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	2201      	movs	r2, #1
 8005b14:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2221      	movs	r2, #33	; 0x21
 8005b1a:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8005b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	9301      	str	r3, [sp, #4]
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff fecf 	bl	80058f0 <VL53L1_preset_mode_standard_ranging>
 8005b52:	4603      	mov	r3, r0
 8005b54:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d121      	bne.n	8005ba2 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2207      	movs	r2, #7
 8005b62:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2205      	movs	r2, #5
 8005b68:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2238      	movs	r2, #56	; 0x38
 8005b84:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2207      	movs	r2, #7
 8005b8a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2205      	movs	r2, #5
 8005b90:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8005ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b088      	sub	sp, #32
 8005bb2:	af02      	add	r7, sp, #8
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
 8005bba:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f7ff fe8e 	bl	80058f0 <VL53L1_preset_mode_standard_ranging>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005bd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d121      	bne.n	8005c24 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	220f      	movs	r2, #15
 8005be4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	220d      	movs	r2, #13
 8005bea:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2208      	movs	r2, #8
 8005c00:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	22b8      	movs	r2, #184	; 0xb8
 8005c06:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	220f      	movs	r2, #15
 8005c0c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	220d      	movs	r2, #13
 8005c12:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8005c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff fe4d 	bl	80058f0 <VL53L1_preset_mode_standard_ranging>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2202      	movs	r2, #2
 8005c66:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	223b      	movs	r2, #59	; 0x3b
 8005c6c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8005c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b088      	sub	sp, #32
 8005c7e:	af02      	add	r7, sp, #8
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff fe28 	bl	80058f0 <VL53L1_preset_mode_standard_ranging>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	225b      	movs	r2, #91	; 0x5b
 8005cb6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8005cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	9301      	str	r3, [sp, #4]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	68b9      	ldr	r1, [r7, #8]
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff fe03 	bl	80058f0 <VL53L1_preset_mode_standard_ranging>
 8005cea:	4603      	mov	r3, r0
 8005cec:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d11a      	bne.n	8005d2c <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	22b1      	movs	r2, #177	; 0xb1
 8005d06:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	22d4      	movs	r2, #212	; 0xd4
 8005d12:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005d1a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	2240      	movs	r2, #64	; 0x40
 8005d2a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8005d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff fee7 	bl	8005b2c <VL53L1_preset_mode_standard_ranging_short_range>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005d62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d11a      	bne.n	8005da0 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2284      	movs	r2, #132	; 0x84
 8005d7a:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	22b1      	movs	r2, #177	; 0xb1
 8005d86:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005d8e:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	2240      	movs	r2, #64	; 0x40
 8005d9e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8005da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff feee 	bl	8005bae <VL53L1_preset_mode_standard_ranging_long_range>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d11a      	bne.n	8005e14 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2200      	movs	r2, #0
 8005de2:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2297      	movs	r2, #151	; 0x97
 8005dee:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	22b1      	movs	r2, #177	; 0xb1
 8005dfa:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005e02:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	2240      	movs	r2, #64	; 0x40
 8005e12:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8005e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff ff3f 	bl	8005cc4 <VL53L1_preset_mode_timed_ranging>
 8005e46:	4603      	mov	r3, r0
 8005e48:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8005e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8005e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	68b8      	ldr	r0, [r7, #8]
 8005e58:	f000 fe8c 	bl	8006b74 <VL53L1_config_low_power_auto_mode>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7ff ff53 	bl	8005d38 <VL53L1_preset_mode_timed_ranging_short_range>
 8005e92:	4603      	mov	r3, r0
 8005e94:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8005e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8005e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	68b8      	ldr	r0, [r7, #8]
 8005ea4:	f000 fe66 	bl	8006b74 <VL53L1_config_low_power_auto_mode>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff ff67 	bl	8005dac <VL53L1_preset_mode_timed_ranging_long_range>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8005ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8005eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	68b8      	ldr	r0, [r7, #8]
 8005ef0:	f000 fe40 	bl	8006b74 <VL53L1_config_low_power_auto_mode>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f7ff fce3 	bl	80058f0 <VL53L1_preset_mode_standard_ranging>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d116      	bne.n	8005f64 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	22b1      	movs	r2, #177	; 0xb1
 8005f46:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	22d4      	movs	r2, #212	; 0xd4
 8005f52:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	2210      	movs	r2, #16
 8005f62:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8005f64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7ff fcad 	bl	80058f0 <VL53L1_preset_mode_standard_ranging>
 8005f96:	4603      	mov	r3, r0
 8005f98:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8005f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8005fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	220a      	movs	r2, #10
 8005fd4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	332c      	adds	r3, #44	; 0x2c
 8006000:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2200      	movs	r2, #0
 800600c:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2202      	movs	r2, #2
 8006012:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2200      	movs	r2, #0
 8006018:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	78fa      	ldrb	r2, [r7, #3]
 800601e:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2200      	movs	r2, #0
 8006024:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2202      	movs	r2, #2
 800602a:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2200      	movs	r2, #0
 8006030:	71da      	strb	r2, [r3, #7]

}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8006048:	2300      	movs	r3, #0
 800604a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	332c      	adds	r3, #44	; 0x2c
 8006054:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800605c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10c      	bne.n	800607e <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2203      	movs	r2, #3
 8006068:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2202      	movs	r2, #2
 8006074:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	71da      	strb	r2, [r3, #7]
 800607c:	e060      	b.n	8006140 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	795b      	ldrb	r3, [r3, #5]
 8006082:	2bff      	cmp	r3, #255	; 0xff
 8006084:	d103      	bne.n	800608e <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	715a      	strb	r2, [r3, #5]
 800608c:	e005      	b.n	800609a <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	795b      	ldrb	r3, [r3, #5]
 8006092:	3301      	adds	r3, #1
 8006094:	b2da      	uxtb	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	799b      	ldrb	r3, [r3, #6]
 800609e:	f083 0302 	eor.w	r3, r3, #2
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	791b      	ldrb	r3, [r3, #4]
 80060ac:	3b03      	subs	r3, #3
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d839      	bhi.n	8006126 <VL53L1_update_ll_driver_rd_state+0xe6>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <VL53L1_update_ll_driver_rd_state+0x78>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060d1 	.word	0x080060d1
 80060bc:	08006127 	.word	0x08006127
 80060c0:	08006127 	.word	0x08006127
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	08006109 	.word	0x08006109
 80060cc:	08006111 	.word	0x08006111

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	dd03      	ble.n	80060e6 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2206      	movs	r2, #6
 80060e2:	711a      	strb	r2, [r3, #4]
 80060e4:	e002      	b.n	80060ec <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2208      	movs	r2, #8
 80060ea:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	71da      	strb	r2, [r3, #7]

		break;
 80060f8:	e022      	b.n	8006140 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2208      	movs	r2, #8
 8006104:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006106:	e01b      	b.n	8006140 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2208      	movs	r2, #8
 800610c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800610e:	e017      	b.n	8006140 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	79db      	ldrb	r3, [r3, #7]
 8006114:	f083 0301 	eor.w	r3, r3, #1
 8006118:	b2da      	uxtb	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2208      	movs	r2, #8
 8006122:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006124:	e00c      	b.n	8006140 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2203      	movs	r2, #3
 800612a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2202      	movs	r2, #2
 8006136:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	71da      	strb	r2, [r3, #7]

		break;
 800613e:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006140:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006144:	4618      	mov	r0, r3
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <VL53L1_update_ll_driver_cfg_state>:
}


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006158:	2300      	movs	r3, #0
 800615a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	332c      	adds	r3, #44	; 0x2c
 8006164:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800616c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10c      	bne.n	800618e <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2203      	movs	r2, #3
 8006178:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2202      	movs	r2, #2
 8006184:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	70da      	strb	r2, [r3, #3]
 800618c:	e03e      	b.n	800620c <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	2bff      	cmp	r3, #255	; 0xff
 8006194:	d103      	bne.n	800619e <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2280      	movs	r2, #128	; 0x80
 800619a:	705a      	strb	r2, [r3, #1]
 800619c:	e005      	b.n	80061aa <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	3301      	adds	r3, #1
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	789b      	ldrb	r3, [r3, #2]
 80061ae:	f083 0302 	eor.w	r3, r3, #2
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d002      	beq.n	80061c6 <VL53L1_update_ll_driver_cfg_state+0x76>
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d00e      	beq.n	80061e2 <VL53L1_update_ll_driver_cfg_state+0x92>
 80061c4:	e015      	b.n	80061f2 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	78db      	ldrb	r3, [r3, #3]
 80061ca:	f083 0301 	eor.w	r3, r3, #1
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2204      	movs	r2, #4
 80061de:	701a      	strb	r2, [r3, #0]
		break;
 80061e0:	e014      	b.n	800620c <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	f083 0301 	eor.w	r3, r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	70da      	strb	r2, [r3, #3]

		break;
 80061f0:	e00c      	b.n	800620c <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2203      	movs	r2, #3
 80061f6:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2202      	movs	r2, #2
 8006202:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	70da      	strb	r2, [r3, #3]

		break;
 800620a:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800620c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006210:	4618      	mov	r0, r3
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	7c1a      	ldrb	r2, [r3, #16]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	7c52      	ldrb	r2, [r2, #17]
 8006236:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	3302      	adds	r3, #2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7c92      	ldrb	r2, [r2, #18]
 8006240:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	3303      	adds	r3, #3
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	7cd2      	ldrb	r2, [r2, #19]
 800624a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	3304      	adds	r3, #4
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	7d12      	ldrb	r2, [r2, #20]
 8006254:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	3305      	adds	r3, #5
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	7d52      	ldrb	r2, [r2, #21]
 800625e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	3306      	adds	r3, #6
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	7d92      	ldrb	r2, [r2, #22]
 8006268:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	3307      	adds	r3, #7
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	7dd2      	ldrb	r2, [r2, #23]
 8006272:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	7e12      	ldrb	r2, [r2, #24]
 800627c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	3309      	adds	r3, #9
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	7e52      	ldrb	r2, [r2, #25]
 8006286:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	330a      	adds	r3, #10
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	7e92      	ldrb	r2, [r2, #26]
 8006290:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	330b      	adds	r3, #11
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	7ed2      	ldrb	r2, [r2, #27]
 800629a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	7f12      	ldrb	r2, [r2, #28]
 80062a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	330d      	adds	r3, #13
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	7f52      	ldrb	r2, [r2, #29]
 80062ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	330e      	adds	r3, #14
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	7f92      	ldrb	r2, [r2, #30]
 80062b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	330f      	adds	r3, #15
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	7fd2      	ldrb	r2, [r2, #31]
 80062c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	3310      	adds	r3, #16
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80062ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	3311      	adds	r3, #17
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80062da:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	3312      	adds	r3, #18
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 80062e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	3313      	adds	r3, #19
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80062f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	3314      	adds	r3, #20
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80062fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	3315      	adds	r3, #21
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800630a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	3316      	adds	r3, #22
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8006316:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	3317      	adds	r3, #23
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8006322:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	3318      	adds	r3, #24
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800632e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	3319      	adds	r3, #25
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800633a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	331a      	adds	r3, #26
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8006346:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	331b      	adds	r3, #27
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8006352:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	331c      	adds	r3, #28
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800635e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	331d      	adds	r3, #29
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800636a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	331e      	adds	r3, #30
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006376:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	331f      	adds	r3, #31
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8006382:	701a      	strb	r2, [r3, #0]
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	603a      	str	r2, [r7, #0]
 800639a:	80fb      	strh	r3, [r7, #6]
 800639c:	460b      	mov	r3, r1
 800639e:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 80063ac:	2300      	movs	r3, #0
 80063ae:	81fb      	strh	r3, [r7, #14]
 80063b0:	e00e      	b.n	80063d0 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80063b2:	88ba      	ldrh	r2, [r7, #4]
 80063b4:	89fb      	ldrh	r3, [r7, #14]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	4413      	add	r3, r2
 80063be:	89ba      	ldrh	r2, [r7, #12]
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80063c4:	89bb      	ldrh	r3, [r7, #12]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 80063ca:	89fb      	ldrh	r3, [r7, #14]
 80063cc:	3301      	adds	r3, #1
 80063ce:	81fb      	strh	r3, [r7, #14]
 80063d0:	89fa      	ldrh	r2, [r7, #14]
 80063d2:	88bb      	ldrh	r3, [r7, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d3ec      	bcc.n	80063b2 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	4603      	mov	r3, r0
 80063ee:	6039      	str	r1, [r7, #0]
 80063f0:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 80063f2:	2300      	movs	r3, #0
 80063f4:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 80063f6:	e00a      	b.n	800640e <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80063f8:	89fb      	ldrh	r3, [r7, #14]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	b21a      	sxth	r2, r3
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	1c59      	adds	r1, r3, #1
 8006402:	6039      	str	r1, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	b21b      	sxth	r3, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	b21b      	sxth	r3, r3
 800640c:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	1e5a      	subs	r2, r3, #1
 8006412:	80fa      	strh	r2, [r7, #6]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1ef      	bne.n	80063f8 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8006418:	89fb      	ldrh	r3, [r7, #14]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006426:	b480      	push	{r7}
 8006428:	b085      	sub	sp, #20
 800642a:	af00      	add	r7, sp, #0
 800642c:	4603      	mov	r3, r0
 800642e:	603a      	str	r2, [r7, #0]
 8006430:	80fb      	strh	r3, [r7, #6]
 8006432:	460b      	mov	r3, r1
 8006434:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8006442:	2300      	movs	r3, #0
 8006444:	81fb      	strh	r3, [r7, #14]
 8006446:	e00f      	b.n	8006468 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8006448:	88ba      	ldrh	r2, [r7, #4]
 800644a:	89fb      	ldrh	r3, [r7, #14]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	4413      	add	r3, r2
 8006454:	89ba      	ldrh	r2, [r7, #12]
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800645a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800645e:	121b      	asrs	r3, r3, #8
 8006460:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8006462:	89fb      	ldrh	r3, [r7, #14]
 8006464:	3301      	adds	r3, #1
 8006466:	81fb      	strh	r3, [r7, #14]
 8006468:	89fa      	ldrh	r2, [r7, #14]
 800646a:	88bb      	ldrh	r3, [r7, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d3eb      	bcc.n	8006448 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8006470:	bf00      	nop
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	4603      	mov	r3, r0
 8006486:	6039      	str	r1, [r7, #0]
 8006488:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800648a:	2300      	movs	r3, #0
 800648c:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	b25b      	sxtb	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	da0e      	bge.n	80064b6 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8006498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800649c:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800649e:	e00a      	b.n	80064b6 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80064a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	b21a      	sxth	r2, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	b21b      	sxth	r3, r3
 80064b2:	4313      	orrs	r3, r2
 80064b4:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	1e5a      	subs	r2, r3, #1
 80064ba:	80fa      	strh	r2, [r7, #6]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ef      	bne.n	80064a0 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 80064c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	460b      	mov	r3, r1
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 80064ea:	2300      	movs	r3, #0
 80064ec:	82fb      	strh	r3, [r7, #22]
 80064ee:	e00e      	b.n	800650e <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80064f0:	897a      	ldrh	r2, [r7, #10]
 80064f2:	8afb      	ldrh	r3, [r7, #22]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8006508:	8afb      	ldrh	r3, [r7, #22]
 800650a:	3301      	adds	r3, #1
 800650c:	82fb      	strh	r3, [r7, #22]
 800650e:	8afa      	ldrh	r2, [r7, #22]
 8006510:	897b      	ldrh	r3, [r7, #10]
 8006512:	429a      	cmp	r2, r3
 8006514:	d3ec      	bcc.n	80064f0 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8006516:	bf00      	nop
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	460a      	mov	r2, r1
 800652e:	80fb      	strh	r3, [r7, #6]
 8006530:	4613      	mov	r3, r2
 8006532:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8006540:	88fb      	ldrh	r3, [r7, #6]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fb36 	bl	8006bb4 <VL53L1_calc_pll_period_us>
 8006548:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800654a:	797b      	ldrb	r3, [r7, #5]
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fb45 	bl	8006bdc <VL53L1_decode_vcsel_period>
 8006552:	4603      	mov	r3, r0
 8006554:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4613      	mov	r3, r2
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	4413      	add	r3, r2
 800655e:	021b      	lsls	r3, r3, #8
 8006560:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	099b      	lsrs	r3, r3, #6
 8006566:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8006568:	7cfa      	ldrb	r2, [r7, #19]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	099b      	lsrs	r3, r3, #6
 8006576:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8006578:	68fb      	ldr	r3, [r7, #12]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8006584:	b480      	push	{r7}
 8006586:	b089      	sub	sp, #36	; 0x24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	461a      	mov	r2, r3
 8006592:	4603      	mov	r3, r0
 8006594:	817b      	strh	r3, [r7, #10]
 8006596:	460b      	mov	r3, r1
 8006598:	813b      	strh	r3, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	4a23      	ldr	r2, [pc, #140]	; (8006644 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80065b8:	fb82 1203 	smull	r1, r2, r2, r3
 80065bc:	1192      	asrs	r2, r2, #6
 80065be:	17db      	asrs	r3, r3, #31
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 80065c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	da03      	bge.n	80065d4 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 80065cc:	897b      	ldrh	r3, [r7, #10]
 80065ce:	425b      	negs	r3, r3
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 80065d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	da03      	bge.n	80065e4 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80065dc:	893b      	ldrh	r3, [r7, #8]
 80065de:	425b      	negs	r3, r3
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80065e4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80065e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80065ec:	4413      	add	r3, r2
 80065ee:	015b      	lsls	r3, r3, #5
 80065f0:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4a13      	ldr	r2, [pc, #76]	; (8006644 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80065f6:	fb82 1203 	smull	r1, r2, r2, r3
 80065fa:	1192      	asrs	r2, r2, #6
 80065fc:	17db      	asrs	r3, r3, #31
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4413      	add	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800660a:	79fa      	ldrb	r2, [r7, #7]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3310      	adds	r3, #16
 8006618:	2b00      	cmp	r3, #0
 800661a:	da00      	bge.n	800661e <VL53L1_calc_range_ignore_threshold+0x9a>
 800661c:	331f      	adds	r3, #31
 800661e:	115b      	asrs	r3, r3, #5
 8006620:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006628:	db03      	blt.n	8006632 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800662a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800662e:	83fb      	strh	r3, [r7, #30]
 8006630:	e001      	b.n	8006636 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8006636:	8bfb      	ldrh	r3, [r7, #30]
}
 8006638:	4618      	mov	r0, r3
 800663a:	3724      	adds	r7, #36	; 0x24
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	10624dd3 	.word	0x10624dd3

08006648 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	031a      	lsls	r2, r3, #12
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	085b      	lsrs	r3, r3, #1
 800665e:	441a      	add	r2, r3
	timeout_mclks   =
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	fbb2 f3f3 	udiv	r3, r2, r3
 8006666:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8006668:	68fb      	ldr	r3, [r7, #12]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ffdc 	bl	8006648 <VL53L1_calc_timeout_mclks>
 8006690:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f860 	bl	8006758 <VL53L1_encode_timeout>
 8006698:	4603      	mov	r3, r0
 800669a:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800669c:	897b      	ldrh	r3, [r7, #10]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 80066a6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 80066b2:	2100      	movs	r1, #0
 80066b4:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 80066b6:	f04f 0000 	mov.w	r0, #0
 80066ba:	f04f 0100 	mov.w	r1, #0
 80066be:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	2000      	movs	r0, #0
 80066c6:	4688      	mov	r8, r1
 80066c8:	4681      	mov	r9, r0
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	2000      	movs	r0, #0
 80066ce:	460c      	mov	r4, r1
 80066d0:	4605      	mov	r5, r0
 80066d2:	fb04 f009 	mul.w	r0, r4, r9
 80066d6:	fb08 f105 	mul.w	r1, r8, r5
 80066da:	4401      	add	r1, r0
 80066dc:	fba8 2304 	umull	r2, r3, r8, r4
 80066e0:	4419      	add	r1, r3
 80066e2:	460b      	mov	r3, r1
 80066e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80066e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80066ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066f0:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 80066f4:	f143 0b00 	adc.w	fp, r3, #0
 80066f8:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 80066fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	0b02      	lsrs	r2, r0, #12
 800670a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800670e:	0b0b      	lsrs	r3, r1, #12
 8006710:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8006718:	697b      	ldr	r3, [r7, #20]
}
 800671a:	4618      	mov	r0, r3
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8006724:	4770      	bx	lr

08006726 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	4603      	mov	r3, r0
 800672e:	6039      	str	r1, [r7, #0]
 8006730:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f837 	bl	80067b0 <VL53L1_decode_timeout>
 8006742:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff ffad 	bl	80066a6 <VL53L1_calc_timeout_us>
 800674c:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800674e:	68bb      	ldr	r3, [r7, #8]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d017      	beq.n	80067a2 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3b01      	subs	r3, #1
 8006776:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006778:	e005      	b.n	8006786 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006780:	89fb      	ldrh	r3, [r7, #14]
 8006782:	3301      	adds	r3, #1
 8006784:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f4      	bne.n	800677a <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006790:	89fb      	ldrh	r3, [r7, #14]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	b29b      	uxth	r3, r3
 800679a:	b2db      	uxtb	r3, r3
 800679c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800679e:	4413      	add	r3, r2
 80067a0:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80067a2:	8afb      	ldrh	r3, [r7, #22]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	371c      	adds	r7, #28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80067be:	88fb      	ldrh	r3, [r7, #6]
 80067c0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	0a12      	lsrs	r2, r2, #8
 80067c6:	b292      	uxth	r2, r2
 80067c8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80067ce:	68fb      	ldr	r3, [r7, #12]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80067fa:	887b      	ldrh	r3, [r7, #2]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8006800:	23f1      	movs	r3, #241	; 0xf1
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e05d      	b.n	80068c2 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8006806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006808:	799a      	ldrb	r2, [r3, #6]
 800680a:	887b      	ldrh	r3, [r7, #2]
 800680c:	4611      	mov	r1, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f7ff fe88 	bl	8006524 <VL53L1_calc_macro_period_us>
 8006814:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8006816:	6979      	ldr	r1, [r7, #20]
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f7ff ff15 	bl	8006648 <VL53L1_calc_timeout_mclks>
 800681e:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2bff      	cmp	r3, #255	; 0xff
 8006824:	d901      	bls.n	800682a <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8006826:	23ff      	movs	r3, #255	; 0xff
 8006828:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8006832:	6979      	ldr	r1, [r7, #20]
 8006834:	68b8      	ldr	r0, [r7, #8]
 8006836:	f7ff ff1e 	bl	8006676 <VL53L1_calc_encoded_timeout>
 800683a:	4603      	mov	r3, r0
 800683c:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800683e:	8a7b      	ldrh	r3, [r7, #18]
 8006840:	0a1b      	lsrs	r3, r3, #8
 8006842:	b29b      	uxth	r3, r3
 8006844:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800684a:	8a7b      	ldrh	r3, [r7, #18]
 800684c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8006852:	6979      	ldr	r1, [r7, #20]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff ff0e 	bl	8006676 <VL53L1_calc_encoded_timeout>
 800685a:	4603      	mov	r3, r0
 800685c:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800685e:	8a7b      	ldrh	r3, [r7, #18]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	b29b      	uxth	r3, r3
 8006864:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800686a:	8a7b      	ldrh	r3, [r7, #18]
 800686c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800686e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006870:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	7a5a      	ldrb	r2, [r3, #9]
 8006876:	887b      	ldrh	r3, [r7, #2]
 8006878:	4611      	mov	r1, r2
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fe52 	bl	8006524 <VL53L1_calc_macro_period_us>
 8006880:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8006882:	6979      	ldr	r1, [r7, #20]
 8006884:	68b8      	ldr	r0, [r7, #8]
 8006886:	f7ff fef6 	bl	8006676 <VL53L1_calc_encoded_timeout>
 800688a:	4603      	mov	r3, r0
 800688c:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800688e:	8a7b      	ldrh	r3, [r7, #18]
 8006890:	0a1b      	lsrs	r3, r3, #8
 8006892:	b29b      	uxth	r3, r3
 8006894:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800689a:	8a7b      	ldrh	r3, [r7, #18]
 800689c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 80068a2:	6979      	ldr	r1, [r7, #20]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff fee6 	bl	8006676 <VL53L1_calc_encoded_timeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80068ae:	8a7b      	ldrh	r3, [r7, #18]
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80068ba:	8a7b      	ldrh	r3, [r7, #18]
 80068bc:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80068c2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	4603      	mov	r3, r0
 80068d6:	603a      	str	r2, [r7, #0]
 80068d8:	71fb      	strb	r3, [r7, #7]
 80068da:	460b      	mov	r3, r1
 80068dc:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80068de:	79fb      	ldrb	r3, [r7, #7]
 80068e0:	2b07      	cmp	r3, #7
 80068e2:	d90a      	bls.n	80068fa <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 80068e4:	79bb      	ldrb	r3, [r7, #6]
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	3b71      	subs	r3, #113	; 0x71
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 80068f8:	e00a      	b.n	8006910 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 80068fa:	79bb      	ldrb	r3, [r7, #6]
 80068fc:	f1c3 030f 	rsb	r3, r3, #15
 8006900:	b2db      	uxtb	r3, r3
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	b2da      	uxtb	r2, r3
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	4413      	add	r3, r2
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	701a      	strb	r2, [r3, #0]
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	091b      	lsrs	r3, r3, #4
 800692e:	b2da      	uxtb	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	b2da      	uxtb	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	701a      	strb	r2, [r3, #0]

}
 8006940:	bf00      	nop
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	603a      	str	r2, [r7, #0]
 8006956:	71fb      	strb	r3, [r7, #7]
 8006958:	460b      	mov	r3, r1
 800695a:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800695c:	79bb      	ldrb	r3, [r7, #6]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	b2da      	uxtb	r2, r3
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	4413      	add	r3, r2
 8006966:	b2da      	uxtb	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	701a      	strb	r2, [r3, #0]

}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <VL53L1_encode_GPIO_interrupt_config>:
 * Encodes VL53L1_GPIO_interrupt_config_t structure to FW register format
 */

uint8_t	VL53L1_encode_GPIO_interrupt_config(
	VL53L1_GPIO_interrupt_config_t	*pintconf)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	uint8_t system__interrupt_config;

	system__interrupt_config = pintconf->intr_mode_distance;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_mode_rate) << 2);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	b25a      	sxtb	r2, r3
 800698e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006992:	4313      	orrs	r3, r2
 8006994:	b25b      	sxtb	r3, r3
 8006996:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_new_measure_ready) << 5);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	789b      	ldrb	r3, [r3, #2]
 800699c:	015b      	lsls	r3, r3, #5
 800699e:	b25a      	sxtb	r2, r3
 80069a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	b25b      	sxtb	r3, r3
 80069a8:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_no_target) << 6);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	78db      	ldrb	r3, [r3, #3]
 80069ae:	019b      	lsls	r3, r3, #6
 80069b0:	b25a      	sxtb	r2, r3
 80069b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	b25b      	sxtb	r3, r3
 80069ba:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_combined_mode) << 7);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	791b      	ldrb	r3, [r3, #4]
 80069c0:	01db      	lsls	r3, r3, #7
 80069c2:	b25a      	sxtb	r2, r3
 80069c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	b25b      	sxtb	r3, r3
 80069cc:	73fb      	strb	r3, [r7, #15]

	return system__interrupt_config;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <VL53L1_decode_GPIO_interrupt_config>:
 * Decodes FW register to VL53L1_GPIO_interrupt_config_t structure
 */

VL53L1_GPIO_interrupt_config_t VL53L1_decode_GPIO_interrupt_config(
	uint8_t		system__interrupt_config)
{
 80069dc:	b490      	push	{r4, r7}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	70fb      	strb	r3, [r7, #3]
	VL53L1_GPIO_interrupt_config_t	intconf;

	intconf.intr_mode_distance = system__interrupt_config & 0x03;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	723b      	strb	r3, [r7, #8]
	intconf.intr_mode_rate = (system__interrupt_config >> 2) & 0x03;
 80069f2:	78fb      	ldrb	r3, [r7, #3]
 80069f4:	089b      	lsrs	r3, r3, #2
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	727b      	strb	r3, [r7, #9]
	intconf.intr_new_measure_ready = (system__interrupt_config >> 5) & 0x01;
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	72bb      	strb	r3, [r7, #10]
	intconf.intr_no_target = (system__interrupt_config >> 6) & 0x01;
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	099b      	lsrs	r3, r3, #6
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	72fb      	strb	r3, [r7, #11]
	intconf.intr_combined_mode = (system__interrupt_config >> 7) & 0x01;
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	09db      	lsrs	r3, r3, #7
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	733b      	strb	r3, [r7, #12]

	/* set some default values */
	intconf.threshold_rate_low = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	82bb      	strh	r3, [r7, #20]
	intconf.threshold_rate_high = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	827b      	strh	r3, [r7, #18]
	intconf.threshold_distance_low = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	823b      	strh	r3, [r7, #16]
	intconf.threshold_distance_high = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	81fb      	strh	r3, [r7, #14]

	return intconf;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	461c      	mov	r4, r3
 8006a38:	f107 0308 	add.w	r3, r7, #8
 8006a3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a3e:	6020      	str	r0, [r4, #0]
 8006a40:	6061      	str	r1, [r4, #4]
 8006a42:	60a2      	str	r2, [r4, #8]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	81a3      	strh	r3, [r4, #12]
}
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	3718      	adds	r7, #24
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc90      	pop	{r4, r7}
 8006a50:	4770      	bx	lr

08006a52 <VL53L1_set_GPIO_distance_threshold>:

VL53L1_Error VL53L1_set_GPIO_distance_threshold(
	VL53L1_DEV                      Dev,
	uint16_t			threshold_high,
	uint16_t			threshold_low)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	807b      	strh	r3, [r7, #2]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	803b      	strh	r3, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dyn_cfg.system__thresh_high = threshold_high;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	887a      	ldrh	r2, [r7, #2]
 8006a6e:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
	pdev->dyn_cfg.system__thresh_low = threshold_low;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	883a      	ldrh	r2, [r7, #0]
 8006a76:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8

	LOG_FUNCTION_END(status);
	return status;
 8006a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <VL53L1_set_GPIO_rate_threshold>:

VL53L1_Error VL53L1_set_GPIO_rate_threshold(
	VL53L1_DEV                      Dev,
	uint16_t			threshold_high,
	uint16_t			threshold_low)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	807b      	strh	r3, [r7, #2]
 8006a96:	4613      	mov	r3, r2
 8006a98:	803b      	strh	r3, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->gen_cfg.system__thresh_rate_high = threshold_high;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	887a      	ldrh	r2, [r7, #2]
 8006aa6:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
	pdev->gen_cfg.system__thresh_rate_low = threshold_low;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	883a      	ldrh	r2, [r7, #0]
 8006aae:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192

	LOG_FUNCTION_END(status);
	return status;
 8006ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <VL53L1_set_GPIO_thresholds_from_struct>:
 */

VL53L1_Error VL53L1_set_GPIO_thresholds_from_struct(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t *pintconf)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_GPIO_distance_threshold(
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	88d9      	ldrh	r1, [r3, #6]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	891b      	ldrh	r3, [r3, #8]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ffb9 	bl	8006a52 <VL53L1_set_GPIO_distance_threshold>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	73fb      	strb	r3, [r7, #15]
			Dev,
			pintconf->threshold_distance_high,
			pintconf->threshold_distance_low);

	if (status == VL53L1_ERROR_NONE) {
 8006ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d109      	bne.n	8006b00 <VL53L1_set_GPIO_thresholds_from_struct+0x3e>
		status =
			VL53L1_set_GPIO_rate_threshold(
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	8959      	ldrh	r1, [r3, #10]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	899b      	ldrh	r3, [r3, #12]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff ffc7 	bl	8006a8a <VL53L1_set_GPIO_rate_threshold>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]
				pintconf->threshold_rate_high,
				pintconf->threshold_rate_low);
	}

	LOG_FUNCTION_END(status);
	return status;
 8006b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2203      	movs	r2, #3
 8006b20:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8006b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b80:	2300      	movs	r3, #0
 8006b82:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	228b      	movs	r2, #139	; 0x8b
 8006b94:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8006b9c:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 8006ba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8006bc2:	88fb      	ldrh	r3, [r7, #6]
 8006bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006bc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8006bcc:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8006bce:	68fb      	ldr	r3, [r7, #12]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	3301      	adds	r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	4603      	mov	r3, r0
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8006c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	da10      	bge.n	8006c3a <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	3308      	adds	r3, #8
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	3b80      	subs	r3, #128	; 0x80
 8006c30:	10db      	asrs	r3, r3, #3
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8006c38:	e00c      	b.n	8006c54 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
 8006c48:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8006c4c:	10db      	asrs	r3, r3, #3
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	701a      	strb	r2, [r3, #0]
}
 8006c54:	bf00      	nop
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <VL53L1_WriteMulti>:
// int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
//    int status = 0;
//    return Status;
// }

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	75fb      	strb	r3, [r7, #23]
    return Status;
 8006c74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	460b      	mov	r3, r1
 8006c92:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	75fb      	strb	r3, [r7, #23]
    return Status;
 8006c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <VL53L1_RdWord>:
VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    return Status;
}

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75fb      	strb	r3, [r7, #23]
    return Status;
 8006cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <VL53L1_WaitUs>:
VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
	VL53L1_Error status  = VL53L1_ERROR_NONE;
	return status;
}

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
	return status;
 8006cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	80fb      	strh	r3, [r7, #6]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	717b      	strb	r3, [r7, #5]
	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	75fb      	strb	r3, [r7, #23]
	return status;
 8006d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	607a      	str	r2, [r7, #4]
 8006d1e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006d24:	897b      	ldrh	r3, [r7, #10]
 8006d26:	2b0a      	cmp	r3, #10
 8006d28:	d802      	bhi.n	8006d30 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006d2a:	f06f 0309 	mvn.w	r3, #9
 8006d2e:	e047      	b.n	8006dc0 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d38:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8006d46:	f002 020f 	and.w	r2, r2, #15
 8006d4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8006d4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8006d56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8006d5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8006d66:	f002 0203 	and.w	r2, r2, #3
 8006d6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8006d6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8006d76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8006d7c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	88d8      	ldrh	r0, [r3, #6]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3305      	adds	r3, #5
 8006d86:	461a      	mov	r2, r3
 8006d88:	2102      	movs	r1, #2
 8006d8a:	f7ff fb01 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8006d96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8006da0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8006daa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006dae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8006db0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8006dba:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8006dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006dda:	89fb      	ldrh	r3, [r7, #14]
 8006ddc:	2b0a      	cmp	r3, #10
 8006dde:	d802      	bhi.n	8006de6 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006de0:	f06f 0309 	mvn.w	r3, #9
 8006de4:	e046      	b.n	8006e74 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dee:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	3301      	adds	r3, #1
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	3302      	adds	r3, #2
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e0e:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	3303      	adds	r3, #3
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	3304      	adds	r3, #4
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2e:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	3305      	adds	r3, #5
 8006e38:	4619      	mov	r1, r3
 8006e3a:	2002      	movs	r0, #2
 8006e3c:	f7ff fad3 	bl	80063e6 <VL53L1_i2c_decode_uint16_t>
 8006e40:	4603      	mov	r3, r0
 8006e42:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	79da      	ldrb	r2, [r3, #7]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	7a1a      	ldrb	r2, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	3309      	adds	r3, #9
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e62:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	7a9a      	ldrb	r2, [r3, #10]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8006e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006e86:	2300      	movs	r3, #0
 8006e88:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8006e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d108      	bne.n	8006ea4 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8006e92:	f107 020c 	add.w	r2, r7, #12
 8006e96:	230b      	movs	r3, #11
 8006e98:	2101      	movs	r1, #1
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fef2 	bl	8006c84 <VL53L1_ReadMulti>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8006ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d108      	bne.n	8006ebe <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8006eac:	f107 030c 	add.w	r3, r7, #12
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	200b      	movs	r0, #11
 8006eb6:	f7ff ff87 	bl	8006dc8 <VL53L1_i2c_decode_static_nvm_managed>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8006ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006edc:	897b      	ldrh	r3, [r7, #10]
 8006ede:	2b16      	cmp	r3, #22
 8006ee0:	d802      	bhi.n	8006ee8 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006ee2:	f06f 0309 	mvn.w	r3, #9
 8006ee6:	e076      	b.n	8006fd6 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8006ef8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8006f02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8006f0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8006f16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8006f20:	f002 020f 	and.w	r2, r2, #15
 8006f24:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8006f26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8006f30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8006f3a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006f3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8006f40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8006f4a:	f002 0203 	and.w	r2, r2, #3
 8006f4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8006f50:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8958      	ldrh	r0, [r3, #10]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	3309      	adds	r3, #9
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	2102      	movs	r1, #2
 8006f5e:	f7ff fa17 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	330b      	adds	r3, #11
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	2102      	movs	r1, #2
 8006f70:	f7ff fa59 	bl	8006426 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	330d      	adds	r3, #13
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2102      	movs	r1, #2
 8006f82:	f7ff fa50 	bl	8006426 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8a18      	ldrh	r0, [r3, #16]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	330f      	adds	r3, #15
 8006f8e:	461a      	mov	r2, r3
 8006f90:	2102      	movs	r1, #2
 8006f92:	f7ff f9fd 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8006f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fa0:	b218      	sxth	r0, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3311      	adds	r3, #17
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2102      	movs	r1, #2
 8006faa:	f7ff fa3c 	bl	8006426 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3313      	adds	r3, #19
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2102      	movs	r1, #2
 8006fbc:	f7ff fa33 	bl	8006426 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3315      	adds	r3, #21
 8006fca:	461a      	mov	r2, r3
 8006fcc:	2102      	movs	r1, #2
 8006fce:	f7ff fa2a 	bl	8006426 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8006fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b086      	sub	sp, #24
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8006ff0:	89fb      	ldrh	r3, [r7, #14]
 8006ff2:	2b16      	cmp	r3, #22
 8006ff4:	d802      	bhi.n	8006ffc <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8006ff6:	f06f 0309 	mvn.w	r3, #9
 8006ffa:	e079      	b.n	80070f0 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	785a      	ldrb	r2, [r3, #1]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	789a      	ldrb	r2, [r3, #2]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	78da      	ldrb	r2, [r3, #3]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	791a      	ldrb	r2, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	3305      	adds	r3, #5
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	799a      	ldrb	r2, [r3, #6]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	3307      	adds	r3, #7
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007046:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	3308      	adds	r3, #8
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	3309      	adds	r3, #9
 8007060:	4619      	mov	r1, r3
 8007062:	2002      	movs	r0, #2
 8007064:	f7ff f9bf 	bl	80063e6 <VL53L1_i2c_decode_uint16_t>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	330b      	adds	r3, #11
 8007074:	4619      	mov	r1, r3
 8007076:	2002      	movs	r0, #2
 8007078:	f7ff fa01 	bl	800647e <VL53L1_i2c_decode_int16_t>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	330d      	adds	r3, #13
 8007088:	4619      	mov	r1, r3
 800708a:	2002      	movs	r0, #2
 800708c:	f7ff f9f7 	bl	800647e <VL53L1_i2c_decode_int16_t>
 8007090:	4603      	mov	r3, r0
 8007092:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	330f      	adds	r3, #15
 800709c:	4619      	mov	r1, r3
 800709e:	2002      	movs	r0, #2
 80070a0:	f7ff f9a1 	bl	80063e6 <VL53L1_i2c_decode_uint16_t>
 80070a4:	4603      	mov	r3, r0
 80070a6:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	3311      	adds	r3, #17
 80070b0:	4619      	mov	r1, r3
 80070b2:	2002      	movs	r0, #2
 80070b4:	f7ff f9e3 	bl	800647e <VL53L1_i2c_decode_int16_t>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070be:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	3313      	adds	r3, #19
 80070c8:	4619      	mov	r1, r3
 80070ca:	2002      	movs	r0, #2
 80070cc:	f7ff f9d7 	bl	800647e <VL53L1_i2c_decode_int16_t>
 80070d0:	4603      	mov	r3, r0
 80070d2:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3315      	adds	r3, #21
 80070dc:	4619      	mov	r1, r3
 80070de:	2002      	movs	r0, #2
 80070e0:	f7ff f9cd 	bl	800647e <VL53L1_i2c_decode_int16_t>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80070ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007102:	2300      	movs	r3, #0
 8007104:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007106:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d108      	bne.n	8007120 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800710e:	f107 0208 	add.w	r2, r7, #8
 8007112:	2317      	movs	r3, #23
 8007114:	210d      	movs	r1, #13
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff fdb4 	bl	8006c84 <VL53L1_ReadMulti>
 800711c:	4603      	mov	r3, r0
 800711e:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8007120:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d108      	bne.n	800713a <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8007128:	f107 0308 	add.w	r3, r7, #8
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	4619      	mov	r1, r3
 8007130:	2017      	movs	r0, #23
 8007132:	f7ff ff54 	bl	8006fde <VL53L1_i2c_decode_customer_nvm_managed>
 8007136:	4603      	mov	r3, r0
 8007138:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800713a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	460b      	mov	r3, r1
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007154:	2300      	movs	r3, #0
 8007156:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007158:	897b      	ldrh	r3, [r7, #10]
 800715a:	2b1f      	cmp	r3, #31
 800715c:	d802      	bhi.n	8007164 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800715e:	f06f 0309 	mvn.w	r3, #9
 8007162:	e0cf      	b.n	8007304 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	2102      	movs	r1, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff f90f 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800717a:	f002 0201 	and.w	r2, r2, #1
 800717e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8007180:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800718a:	f002 020f 	and.w	r2, r2, #15
 800718e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007190:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800719a:	f002 020f 	and.w	r2, r2, #15
 800719e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80071a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80071aa:	f002 021f 	and.w	r2, r2, #31
 80071ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80071b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80071ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80071c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80071ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80071d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80071da:	f002 0201 	and.w	r2, r2, #1
 80071de:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80071e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80071ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80071f4:	f002 0201 	and.w	r2, r2, #1
 80071f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80071fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007204:	f002 0203 	and.w	r2, r2, #3
 8007208:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800720a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007214:	f002 021f 	and.w	r2, r2, #31
 8007218:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800721a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8007224:	f002 0203 	and.w	r2, r2, #3
 8007228:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800722a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8007234:	f002 0203 	and.w	r2, r2, #3
 8007238:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800723a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007244:	f002 0207 	and.w	r2, r2, #7
 8007248:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800724a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007254:	f002 021f 	and.w	r2, r2, #31
 8007258:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800725a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007264:	f002 0201 	and.w	r2, r2, #1
 8007268:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800726a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8007274:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800727e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8007288:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8007292:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800729c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80072a6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8b18      	ldrh	r0, [r3, #24]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3318      	adds	r3, #24
 80072b0:	461a      	mov	r2, r3
 80072b2:	2102      	movs	r1, #2
 80072b4:	f7ff f86c 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80072c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80072ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80072d4:	f002 020f 	and.w	r2, r2, #15
 80072d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80072da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80072e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80072ee:	f002 020f 	and.w	r2, r2, #15
 80072f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80072f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80072fe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007300:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	460b      	mov	r3, r1
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800731a:	2300      	movs	r3, #0
 800731c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800731e:	897b      	ldrh	r3, [r7, #10]
 8007320:	2b15      	cmp	r3, #21
 8007322:	d802      	bhi.n	800732a <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007324:	f06f 0309 	mvn.w	r3, #9
 8007328:	e070      	b.n	800740c <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800733a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8007344:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800734e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007352:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007354:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800735a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800735e:	b298      	uxth	r0, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	461a      	mov	r2, r3
 8007366:	2102      	movs	r1, #2
 8007368:	f7ff f812 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8007374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007378:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800737a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8007384:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800738e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8007398:	f002 0201 	and.w	r2, r2, #1
 800739c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800739e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80073a8:	f002 0207 	and.w	r2, r2, #7
 80073ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80073ae:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8998      	ldrh	r0, [r3, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	330c      	adds	r3, #12
 80073b8:	461a      	mov	r2, r3
 80073ba:	2102      	movs	r1, #2
 80073bc:	f7fe ffe8 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	89d8      	ldrh	r0, [r3, #14]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	330e      	adds	r3, #14
 80073c8:	461a      	mov	r2, r3
 80073ca:	2102      	movs	r1, #2
 80073cc:	f7fe ffe0 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8a18      	ldrh	r0, [r3, #16]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3310      	adds	r3, #16
 80073d8:	461a      	mov	r2, r3
 80073da:	2102      	movs	r1, #2
 80073dc:	f7fe ffd8 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80073e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80073f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80073fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8007406:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007408:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	460b      	mov	r3, r1
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007422:	2300      	movs	r3, #0
 8007424:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007426:	897b      	ldrh	r3, [r7, #10]
 8007428:	2b16      	cmp	r3, #22
 800742a:	d802      	bhi.n	8007432 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800742c:	f06f 0309 	mvn.w	r3, #9
 8007430:	e06e      	b.n	8007510 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007448:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8007452:	f002 020f 	and.w	r2, r2, #15
 8007456:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8007458:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8007462:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800746c:	f002 020f 	and.w	r2, r2, #15
 8007470:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8007472:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800747c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8007486:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800748a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800748c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8007496:	f002 020f 	and.w	r2, r2, #15
 800749a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800749c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80074a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 80074b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80074b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80074b6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8958      	ldrh	r0, [r3, #10]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	330a      	adds	r3, #10
 80074c0:	461a      	mov	r2, r3
 80074c2:	2102      	movs	r1, #2
 80074c4:	f7fe ff64 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8998      	ldrh	r0, [r3, #12]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	330c      	adds	r3, #12
 80074d0:	461a      	mov	r2, r3
 80074d2:	2102      	movs	r1, #2
 80074d4:	f7fe ff5c 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80074e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80074ea:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6918      	ldr	r0, [r3, #16]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3312      	adds	r3, #18
 80074f4:	461a      	mov	r2, r3
 80074f6:	2104      	movs	r1, #4
 80074f8:	f7fe ffea 	bl	80064d0 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8007504:	f002 0201 	and.w	r2, r2, #1
 8007508:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800750a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800750c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	460b      	mov	r3, r1
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800752a:	897b      	ldrh	r3, [r7, #10]
 800752c:	2b11      	cmp	r3, #17
 800752e:	d802      	bhi.n	8007536 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007530:	f06f 0309 	mvn.w	r3, #9
 8007534:	e071      	b.n	800761a <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8858      	ldrh	r0, [r3, #2]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3301      	adds	r3, #1
 800754c:	461a      	mov	r2, r3
 800754e:	2102      	movs	r1, #2
 8007550:	f7fe ff1e 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8898      	ldrh	r0, [r3, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3303      	adds	r3, #3
 800755c:	461a      	mov	r2, r3
 800755e:	2102      	movs	r1, #2
 8007560:	f7fe ff16 	bl	8006390 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800756c:	f002 0201 	and.w	r2, r2, #1
 8007570:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007572:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800757c:	f002 0207 	and.w	r2, r2, #7
 8007580:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007582:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800758c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8007596:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80075a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80075a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80075a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80075b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80075b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80075b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80075c0:	f002 0203 	and.w	r2, r2, #3
 80075c4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80075c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80075d0:	f002 0203 	and.w	r2, r2, #3
 80075d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80075d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80075e0:	f002 020f 	and.w	r2, r2, #15
 80075e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80075e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80075f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80075fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8007604:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800760e:	f002 0203 	and.w	r2, r2, #3
 8007612:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8007614:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007622:	b480      	push	{r7}
 8007624:	b087      	sub	sp, #28
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	460b      	mov	r3, r1
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007630:	2300      	movs	r3, #0
 8007632:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8007634:	897b      	ldrh	r3, [r7, #10]
 8007636:	2b04      	cmp	r3, #4
 8007638:	d802      	bhi.n	8007640 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800763a:	f06f 0309 	mvn.w	r3, #9
 800763e:	e025      	b.n	800768c <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8007656:	f002 0201 	and.w	r2, r2, #1
 800765a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800765c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8007666:	f002 0201 	and.w	r2, r2, #1
 800766a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800766c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8007676:	f002 0203 	and.w	r2, r2, #3
 800767a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800767c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8007686:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007688:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800768c:	4618      	mov	r0, r3
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80076aa:	89fb      	ldrh	r3, [r7, #14]
 80076ac:	2b30      	cmp	r3, #48	; 0x30
 80076ae:	d802      	bhi.n	80076b6 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80076b0:	f06f 0309 	mvn.w	r3, #9
 80076b4:	e112      	b.n	80078dc <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	785a      	ldrb	r2, [r3, #1]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	789a      	ldrb	r2, [r3, #2]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	3303      	adds	r3, #3
 80076d2:	4619      	mov	r1, r3
 80076d4:	2002      	movs	r0, #2
 80076d6:	f7fe fe86 	bl	80063e6 <VL53L1_i2c_decode_uint16_t>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	3305      	adds	r3, #5
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ec:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	3306      	adds	r3, #6
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	3307      	adds	r3, #7
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	3308      	adds	r3, #8
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800771c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	3309      	adds	r3, #9
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800772c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	330a      	adds	r3, #10
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	330b      	adds	r3, #11
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	330c      	adds	r3, #12
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	330d      	adds	r3, #13
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800776c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	330e      	adds	r3, #14
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800777c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	7bda      	ldrb	r2, [r3, #15]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	7c1a      	ldrb	r2, [r3, #16]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	7c5a      	ldrb	r2, [r3, #17]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	7c9a      	ldrb	r2, [r3, #18]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	7cda      	ldrb	r2, [r3, #19]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	7d1a      	ldrb	r2, [r3, #20]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	7d5a      	ldrb	r2, [r3, #21]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	7d9a      	ldrb	r2, [r3, #22]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	7dda      	ldrb	r2, [r3, #23]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	7e1a      	ldrb	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	7e5a      	ldrb	r2, [r3, #25]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	7e9a      	ldrb	r2, [r3, #26]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	7eda      	ldrb	r2, [r3, #27]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	7f1a      	ldrb	r2, [r3, #28]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	7f5a      	ldrb	r2, [r3, #29]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	7f9a      	ldrb	r2, [r3, #30]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	7fda      	ldrb	r2, [r3, #31]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80078d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b090      	sub	sp, #64	; 0x40
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80078f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80078fc:	f107 020c 	add.w	r2, r7, #12
 8007900:	2331      	movs	r3, #49	; 0x31
 8007902:	f240 110f 	movw	r1, #271	; 0x10f
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff f9bc 	bl	8006c84 <VL53L1_ReadMulti>
 800790c:	4603      	mov	r3, r0
 800790e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8007912:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007916:	2b00      	cmp	r3, #0
 8007918:	d109      	bne.n	800792e <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800791a:	f107 030c 	add.w	r3, r7, #12
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	4619      	mov	r1, r3
 8007922:	2031      	movs	r0, #49	; 0x31
 8007924:	f7ff feb8 	bl	8007698 <VL53L1_i2c_decode_nvm_copy_data>
 8007928:	4603      	mov	r3, r0
 800792a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800792e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007932:	4618      	mov	r0, r3
 8007934:	3740      	adds	r7, #64	; 0x40
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <ConfigAndStartSensor>:
VL53L1_Dev_t                   devRight;
VL53L1_DEV                     DevL = &devLeft;
VL53L1_DEV					   DevR = &devRight;


void ConfigAndStartSensor(){
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0

	VL53L1_DetectionConfig_t DetectionConfig;

	// Configurando o sensor da esquerda

	DevL->comms_speed_khz = 400;
 8007942:	4b3b      	ldr	r3, [pc, #236]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800794a:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
	DevL->I2cHandle = &hi2c1;
 800794e:	4b38      	ldr	r3, [pc, #224]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a38      	ldr	r2, [pc, #224]	; (8007a34 <ConfigAndStartSensor+0xf8>)
 8007954:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	DevL->comms_type = 1;
 8007958:	4b35      	ldr	r3, [pc, #212]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2201      	movs	r2, #1
 800795e:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
	DevL->I2cDevAddr=0x52;
 8007962:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2252      	movs	r2, #82	; 0x52
 8007968:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

	// Configurando o sensor da direita
	DevR->comms_speed_khz = 400;
 800796c:	4b32      	ldr	r3, [pc, #200]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007974:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
	DevR->I2cHandle = &hi2c2;
 8007978:	4b2f      	ldr	r3, [pc, #188]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a2f      	ldr	r2, [pc, #188]	; (8007a3c <ConfigAndStartSensor+0x100>)
 800797e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	DevR->comms_type = 1;
 8007982:	4b2d      	ldr	r3, [pc, #180]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
	DevR->I2cDevAddr=0x52;
 800798c:	4b2a      	ldr	r3, [pc, #168]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2252      	movs	r2, #82	; 0x52
 8007992:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398


	//Configurando o Threshold

	DetectionConfig.DetectionMode = 1;
 8007996:	2301      	movs	r3, #1
 8007998:	713b      	strb	r3, [r7, #4]
	DetectionConfig.Distance.CrossMode = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	71bb      	strb	r3, [r7, #6]
	DetectionConfig.Distance.Low = 1000;
 800799e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079a2:	817b      	strh	r3, [r7, #10]

	//Inicializa o sensor da esquerda

	VL53L1_WaitDeviceBooted(DevL);
 80079a4:	4b22      	ldr	r3, [pc, #136]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fb ffdf 	bl	800396c <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit(DevL);
 80079ae:	4b20      	ldr	r3, [pc, #128]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fb ff5e 	bl	8003874 <VL53L1_DataInit>
	VL53L1_StaticInit(DevL);
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fb ffae 	bl	800391e <VL53L1_StaticInit>
	VL53L1_SetDistanceMode(DevL, VL53L1_DISTANCEMODE_LONG);
 80079c2:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2103      	movs	r1, #3
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fc f8fa 	bl	8003bc2 <VL53L1_SetDistanceMode>

	VL53L1_SetThresholdConfig(DevL, &DetectionConfig);
 80079ce:	4b18      	ldr	r3, [pc, #96]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	1d3a      	adds	r2, r7, #4
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fc fb5a 	bl	8004090 <VL53L1_SetThresholdConfig>

	VL53L1_StartMeasurement(DevL);
 80079dc:	4b14      	ldr	r3, [pc, #80]	; (8007a30 <ConfigAndStartSensor+0xf4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fc fb15 	bl	8004010 <VL53L1_StartMeasurement>


	//Inicializa o sensor da esquerda

	VL53L1_WaitDeviceBooted(DevR);
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fb ffbe 	bl	800396c <VL53L1_WaitDeviceBooted>
	VL53L1_DataInit(DevR);
 80079f0:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fb ff3d 	bl	8003874 <VL53L1_DataInit>
	VL53L1_StaticInit(DevR);
 80079fa:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fb ff8d 	bl	800391e <VL53L1_StaticInit>
	VL53L1_SetDistanceMode(DevR, VL53L1_DISTANCEMODE_LONG);
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2103      	movs	r1, #3
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fc f8d9 	bl	8003bc2 <VL53L1_SetDistanceMode>

	VL53L1_SetThresholdConfig(DevR, &DetectionConfig);
 8007a10:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	1d3a      	adds	r2, r7, #4
 8007a16:	4611      	mov	r1, r2
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fc fb39 	bl	8004090 <VL53L1_SetThresholdConfig>

	VL53L1_StartMeasurement(DevR);
 8007a1e:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <ConfigAndStartSensor+0xfc>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fc faf4 	bl	8004010 <VL53L1_StartMeasurement>
}
 8007a28:	bf00      	nop
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000010 	.word	0x20000010
 8007a34:	2000015c 	.word	0x2000015c
 8007a38:	20000014 	.word	0x20000014
 8007a3c:	200001b0 	.word	0x200001b0

08007a40 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8007a4e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff f939 	bl	8006cca <VL53L1_WaitUs>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8007a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8007a64:	2301      	movs	r3, #1
 8007a66:	9301      	str	r3, [sp, #4]
 8007a68:	2301      	movs	r3, #1
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	22e5      	movs	r2, #229	; 0xe5
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff f938 	bl	8006ce8 <VL53L1_WaitValueMaskEx>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8007a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d103      	bne.n	8007a8c <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8007a84:	2103      	movs	r1, #3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fe fab0 	bl	8005fec <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8007a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <__errno>:
 8007a98:	4b01      	ldr	r3, [pc, #4]	; (8007aa0 <__errno+0x8>)
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000018 	.word	0x20000018

08007aa4 <__libc_init_array>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4d0d      	ldr	r5, [pc, #52]	; (8007adc <__libc_init_array+0x38>)
 8007aa8:	4c0d      	ldr	r4, [pc, #52]	; (8007ae0 <__libc_init_array+0x3c>)
 8007aaa:	1b64      	subs	r4, r4, r5
 8007aac:	10a4      	asrs	r4, r4, #2
 8007aae:	2600      	movs	r6, #0
 8007ab0:	42a6      	cmp	r6, r4
 8007ab2:	d109      	bne.n	8007ac8 <__libc_init_array+0x24>
 8007ab4:	4d0b      	ldr	r5, [pc, #44]	; (8007ae4 <__libc_init_array+0x40>)
 8007ab6:	4c0c      	ldr	r4, [pc, #48]	; (8007ae8 <__libc_init_array+0x44>)
 8007ab8:	f000 fc8e 	bl	80083d8 <_init>
 8007abc:	1b64      	subs	r4, r4, r5
 8007abe:	10a4      	asrs	r4, r4, #2
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	42a6      	cmp	r6, r4
 8007ac4:	d105      	bne.n	8007ad2 <__libc_init_array+0x2e>
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007acc:	4798      	blx	r3
 8007ace:	3601      	adds	r6, #1
 8007ad0:	e7ee      	b.n	8007ab0 <__libc_init_array+0xc>
 8007ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad6:	4798      	blx	r3
 8007ad8:	3601      	adds	r6, #1
 8007ada:	e7f2      	b.n	8007ac2 <__libc_init_array+0x1e>
 8007adc:	080084ac 	.word	0x080084ac
 8007ae0:	080084ac 	.word	0x080084ac
 8007ae4:	080084ac 	.word	0x080084ac
 8007ae8:	080084b0 	.word	0x080084b0

08007aec <memcpy>:
 8007aec:	440a      	add	r2, r1
 8007aee:	4291      	cmp	r1, r2
 8007af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af4:	d100      	bne.n	8007af8 <memcpy+0xc>
 8007af6:	4770      	bx	lr
 8007af8:	b510      	push	{r4, lr}
 8007afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b02:	4291      	cmp	r1, r2
 8007b04:	d1f9      	bne.n	8007afa <memcpy+0xe>
 8007b06:	bd10      	pop	{r4, pc}

08007b08 <memset>:
 8007b08:	4402      	add	r2, r0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d100      	bne.n	8007b12 <memset+0xa>
 8007b10:	4770      	bx	lr
 8007b12:	f803 1b01 	strb.w	r1, [r3], #1
 8007b16:	e7f9      	b.n	8007b0c <memset+0x4>

08007b18 <siprintf>:
 8007b18:	b40e      	push	{r1, r2, r3}
 8007b1a:	b500      	push	{lr}
 8007b1c:	b09c      	sub	sp, #112	; 0x70
 8007b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b20:	9002      	str	r0, [sp, #8]
 8007b22:	9006      	str	r0, [sp, #24]
 8007b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b28:	4809      	ldr	r0, [pc, #36]	; (8007b50 <siprintf+0x38>)
 8007b2a:	9107      	str	r1, [sp, #28]
 8007b2c:	9104      	str	r1, [sp, #16]
 8007b2e:	4909      	ldr	r1, [pc, #36]	; (8007b54 <siprintf+0x3c>)
 8007b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b34:	9105      	str	r1, [sp, #20]
 8007b36:	6800      	ldr	r0, [r0, #0]
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	a902      	add	r1, sp, #8
 8007b3c:	f000 f868 	bl	8007c10 <_svfiprintf_r>
 8007b40:	9b02      	ldr	r3, [sp, #8]
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	b01c      	add	sp, #112	; 0x70
 8007b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b4c:	b003      	add	sp, #12
 8007b4e:	4770      	bx	lr
 8007b50:	20000018 	.word	0x20000018
 8007b54:	ffff0208 	.word	0xffff0208

08007b58 <__ssputs_r>:
 8007b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b5c:	688e      	ldr	r6, [r1, #8]
 8007b5e:	429e      	cmp	r6, r3
 8007b60:	4682      	mov	sl, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	4690      	mov	r8, r2
 8007b66:	461f      	mov	r7, r3
 8007b68:	d838      	bhi.n	8007bdc <__ssputs_r+0x84>
 8007b6a:	898a      	ldrh	r2, [r1, #12]
 8007b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b70:	d032      	beq.n	8007bd8 <__ssputs_r+0x80>
 8007b72:	6825      	ldr	r5, [r4, #0]
 8007b74:	6909      	ldr	r1, [r1, #16]
 8007b76:	eba5 0901 	sub.w	r9, r5, r1
 8007b7a:	6965      	ldr	r5, [r4, #20]
 8007b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b84:	3301      	adds	r3, #1
 8007b86:	444b      	add	r3, r9
 8007b88:	106d      	asrs	r5, r5, #1
 8007b8a:	429d      	cmp	r5, r3
 8007b8c:	bf38      	it	cc
 8007b8e:	461d      	movcc	r5, r3
 8007b90:	0553      	lsls	r3, r2, #21
 8007b92:	d531      	bpl.n	8007bf8 <__ssputs_r+0xa0>
 8007b94:	4629      	mov	r1, r5
 8007b96:	f000 fb55 	bl	8008244 <_malloc_r>
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	b950      	cbnz	r0, 8007bb4 <__ssputs_r+0x5c>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	f8ca 3000 	str.w	r3, [sl]
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007baa:	81a3      	strh	r3, [r4, #12]
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb4:	6921      	ldr	r1, [r4, #16]
 8007bb6:	464a      	mov	r2, r9
 8007bb8:	f7ff ff98 	bl	8007aec <memcpy>
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc6:	81a3      	strh	r3, [r4, #12]
 8007bc8:	6126      	str	r6, [r4, #16]
 8007bca:	6165      	str	r5, [r4, #20]
 8007bcc:	444e      	add	r6, r9
 8007bce:	eba5 0509 	sub.w	r5, r5, r9
 8007bd2:	6026      	str	r6, [r4, #0]
 8007bd4:	60a5      	str	r5, [r4, #8]
 8007bd6:	463e      	mov	r6, r7
 8007bd8:	42be      	cmp	r6, r7
 8007bda:	d900      	bls.n	8007bde <__ssputs_r+0x86>
 8007bdc:	463e      	mov	r6, r7
 8007bde:	6820      	ldr	r0, [r4, #0]
 8007be0:	4632      	mov	r2, r6
 8007be2:	4641      	mov	r1, r8
 8007be4:	f000 faa8 	bl	8008138 <memmove>
 8007be8:	68a3      	ldr	r3, [r4, #8]
 8007bea:	1b9b      	subs	r3, r3, r6
 8007bec:	60a3      	str	r3, [r4, #8]
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	4433      	add	r3, r6
 8007bf2:	6023      	str	r3, [r4, #0]
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	e7db      	b.n	8007bb0 <__ssputs_r+0x58>
 8007bf8:	462a      	mov	r2, r5
 8007bfa:	f000 fb97 	bl	800832c <_realloc_r>
 8007bfe:	4606      	mov	r6, r0
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d1e1      	bne.n	8007bc8 <__ssputs_r+0x70>
 8007c04:	6921      	ldr	r1, [r4, #16]
 8007c06:	4650      	mov	r0, sl
 8007c08:	f000 fab0 	bl	800816c <_free_r>
 8007c0c:	e7c7      	b.n	8007b9e <__ssputs_r+0x46>
	...

08007c10 <_svfiprintf_r>:
 8007c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c14:	4698      	mov	r8, r3
 8007c16:	898b      	ldrh	r3, [r1, #12]
 8007c18:	061b      	lsls	r3, r3, #24
 8007c1a:	b09d      	sub	sp, #116	; 0x74
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	460d      	mov	r5, r1
 8007c20:	4614      	mov	r4, r2
 8007c22:	d50e      	bpl.n	8007c42 <_svfiprintf_r+0x32>
 8007c24:	690b      	ldr	r3, [r1, #16]
 8007c26:	b963      	cbnz	r3, 8007c42 <_svfiprintf_r+0x32>
 8007c28:	2140      	movs	r1, #64	; 0x40
 8007c2a:	f000 fb0b 	bl	8008244 <_malloc_r>
 8007c2e:	6028      	str	r0, [r5, #0]
 8007c30:	6128      	str	r0, [r5, #16]
 8007c32:	b920      	cbnz	r0, 8007c3e <_svfiprintf_r+0x2e>
 8007c34:	230c      	movs	r3, #12
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	e0d1      	b.n	8007de2 <_svfiprintf_r+0x1d2>
 8007c3e:	2340      	movs	r3, #64	; 0x40
 8007c40:	616b      	str	r3, [r5, #20]
 8007c42:	2300      	movs	r3, #0
 8007c44:	9309      	str	r3, [sp, #36]	; 0x24
 8007c46:	2320      	movs	r3, #32
 8007c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c50:	2330      	movs	r3, #48	; 0x30
 8007c52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007dfc <_svfiprintf_r+0x1ec>
 8007c56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c5a:	f04f 0901 	mov.w	r9, #1
 8007c5e:	4623      	mov	r3, r4
 8007c60:	469a      	mov	sl, r3
 8007c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c66:	b10a      	cbz	r2, 8007c6c <_svfiprintf_r+0x5c>
 8007c68:	2a25      	cmp	r2, #37	; 0x25
 8007c6a:	d1f9      	bne.n	8007c60 <_svfiprintf_r+0x50>
 8007c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c70:	d00b      	beq.n	8007c8a <_svfiprintf_r+0x7a>
 8007c72:	465b      	mov	r3, fp
 8007c74:	4622      	mov	r2, r4
 8007c76:	4629      	mov	r1, r5
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7ff ff6d 	bl	8007b58 <__ssputs_r>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	f000 80aa 	beq.w	8007dd8 <_svfiprintf_r+0x1c8>
 8007c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c86:	445a      	add	r2, fp
 8007c88:	9209      	str	r2, [sp, #36]	; 0x24
 8007c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 80a2 	beq.w	8007dd8 <_svfiprintf_r+0x1c8>
 8007c94:	2300      	movs	r3, #0
 8007c96:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c9e:	f10a 0a01 	add.w	sl, sl, #1
 8007ca2:	9304      	str	r3, [sp, #16]
 8007ca4:	9307      	str	r3, [sp, #28]
 8007ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007caa:	931a      	str	r3, [sp, #104]	; 0x68
 8007cac:	4654      	mov	r4, sl
 8007cae:	2205      	movs	r2, #5
 8007cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb4:	4851      	ldr	r0, [pc, #324]	; (8007dfc <_svfiprintf_r+0x1ec>)
 8007cb6:	f7f8 fa93 	bl	80001e0 <memchr>
 8007cba:	9a04      	ldr	r2, [sp, #16]
 8007cbc:	b9d8      	cbnz	r0, 8007cf6 <_svfiprintf_r+0xe6>
 8007cbe:	06d0      	lsls	r0, r2, #27
 8007cc0:	bf44      	itt	mi
 8007cc2:	2320      	movmi	r3, #32
 8007cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc8:	0711      	lsls	r1, r2, #28
 8007cca:	bf44      	itt	mi
 8007ccc:	232b      	movmi	r3, #43	; 0x2b
 8007cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007cd8:	d015      	beq.n	8007d06 <_svfiprintf_r+0xf6>
 8007cda:	9a07      	ldr	r2, [sp, #28]
 8007cdc:	4654      	mov	r4, sl
 8007cde:	2000      	movs	r0, #0
 8007ce0:	f04f 0c0a 	mov.w	ip, #10
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cea:	3b30      	subs	r3, #48	; 0x30
 8007cec:	2b09      	cmp	r3, #9
 8007cee:	d94e      	bls.n	8007d8e <_svfiprintf_r+0x17e>
 8007cf0:	b1b0      	cbz	r0, 8007d20 <_svfiprintf_r+0x110>
 8007cf2:	9207      	str	r2, [sp, #28]
 8007cf4:	e014      	b.n	8007d20 <_svfiprintf_r+0x110>
 8007cf6:	eba0 0308 	sub.w	r3, r0, r8
 8007cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	46a2      	mov	sl, r4
 8007d04:	e7d2      	b.n	8007cac <_svfiprintf_r+0x9c>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	1d19      	adds	r1, r3, #4
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	9103      	str	r1, [sp, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bfbb      	ittet	lt
 8007d12:	425b      	neglt	r3, r3
 8007d14:	f042 0202 	orrlt.w	r2, r2, #2
 8007d18:	9307      	strge	r3, [sp, #28]
 8007d1a:	9307      	strlt	r3, [sp, #28]
 8007d1c:	bfb8      	it	lt
 8007d1e:	9204      	strlt	r2, [sp, #16]
 8007d20:	7823      	ldrb	r3, [r4, #0]
 8007d22:	2b2e      	cmp	r3, #46	; 0x2e
 8007d24:	d10c      	bne.n	8007d40 <_svfiprintf_r+0x130>
 8007d26:	7863      	ldrb	r3, [r4, #1]
 8007d28:	2b2a      	cmp	r3, #42	; 0x2a
 8007d2a:	d135      	bne.n	8007d98 <_svfiprintf_r+0x188>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	1d1a      	adds	r2, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	9203      	str	r2, [sp, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bfb8      	it	lt
 8007d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d3c:	3402      	adds	r4, #2
 8007d3e:	9305      	str	r3, [sp, #20]
 8007d40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e0c <_svfiprintf_r+0x1fc>
 8007d44:	7821      	ldrb	r1, [r4, #0]
 8007d46:	2203      	movs	r2, #3
 8007d48:	4650      	mov	r0, sl
 8007d4a:	f7f8 fa49 	bl	80001e0 <memchr>
 8007d4e:	b140      	cbz	r0, 8007d62 <_svfiprintf_r+0x152>
 8007d50:	2340      	movs	r3, #64	; 0x40
 8007d52:	eba0 000a 	sub.w	r0, r0, sl
 8007d56:	fa03 f000 	lsl.w	r0, r3, r0
 8007d5a:	9b04      	ldr	r3, [sp, #16]
 8007d5c:	4303      	orrs	r3, r0
 8007d5e:	3401      	adds	r4, #1
 8007d60:	9304      	str	r3, [sp, #16]
 8007d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d66:	4826      	ldr	r0, [pc, #152]	; (8007e00 <_svfiprintf_r+0x1f0>)
 8007d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d6c:	2206      	movs	r2, #6
 8007d6e:	f7f8 fa37 	bl	80001e0 <memchr>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d038      	beq.n	8007de8 <_svfiprintf_r+0x1d8>
 8007d76:	4b23      	ldr	r3, [pc, #140]	; (8007e04 <_svfiprintf_r+0x1f4>)
 8007d78:	bb1b      	cbnz	r3, 8007dc2 <_svfiprintf_r+0x1b2>
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	3307      	adds	r3, #7
 8007d7e:	f023 0307 	bic.w	r3, r3, #7
 8007d82:	3308      	adds	r3, #8
 8007d84:	9303      	str	r3, [sp, #12]
 8007d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d88:	4433      	add	r3, r6
 8007d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8c:	e767      	b.n	8007c5e <_svfiprintf_r+0x4e>
 8007d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d92:	460c      	mov	r4, r1
 8007d94:	2001      	movs	r0, #1
 8007d96:	e7a5      	b.n	8007ce4 <_svfiprintf_r+0xd4>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	3401      	adds	r4, #1
 8007d9c:	9305      	str	r3, [sp, #20]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f04f 0c0a 	mov.w	ip, #10
 8007da4:	4620      	mov	r0, r4
 8007da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007daa:	3a30      	subs	r2, #48	; 0x30
 8007dac:	2a09      	cmp	r2, #9
 8007dae:	d903      	bls.n	8007db8 <_svfiprintf_r+0x1a8>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0c5      	beq.n	8007d40 <_svfiprintf_r+0x130>
 8007db4:	9105      	str	r1, [sp, #20]
 8007db6:	e7c3      	b.n	8007d40 <_svfiprintf_r+0x130>
 8007db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e7f0      	b.n	8007da4 <_svfiprintf_r+0x194>
 8007dc2:	ab03      	add	r3, sp, #12
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <_svfiprintf_r+0x1f8>)
 8007dca:	a904      	add	r1, sp, #16
 8007dcc:	4638      	mov	r0, r7
 8007dce:	f3af 8000 	nop.w
 8007dd2:	1c42      	adds	r2, r0, #1
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	d1d6      	bne.n	8007d86 <_svfiprintf_r+0x176>
 8007dd8:	89ab      	ldrh	r3, [r5, #12]
 8007dda:	065b      	lsls	r3, r3, #25
 8007ddc:	f53f af2c 	bmi.w	8007c38 <_svfiprintf_r+0x28>
 8007de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007de2:	b01d      	add	sp, #116	; 0x74
 8007de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de8:	ab03      	add	r3, sp, #12
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	462a      	mov	r2, r5
 8007dee:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <_svfiprintf_r+0x1f8>)
 8007df0:	a904      	add	r1, sp, #16
 8007df2:	4638      	mov	r0, r7
 8007df4:	f000 f87a 	bl	8007eec <_printf_i>
 8007df8:	e7eb      	b.n	8007dd2 <_svfiprintf_r+0x1c2>
 8007dfa:	bf00      	nop
 8007dfc:	08008470 	.word	0x08008470
 8007e00:	0800847a 	.word	0x0800847a
 8007e04:	00000000 	.word	0x00000000
 8007e08:	08007b59 	.word	0x08007b59
 8007e0c:	08008476 	.word	0x08008476

08007e10 <_printf_common>:
 8007e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e14:	4616      	mov	r6, r2
 8007e16:	4699      	mov	r9, r3
 8007e18:	688a      	ldr	r2, [r1, #8]
 8007e1a:	690b      	ldr	r3, [r1, #16]
 8007e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	bfb8      	it	lt
 8007e24:	4613      	movlt	r3, r2
 8007e26:	6033      	str	r3, [r6, #0]
 8007e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	b10a      	cbz	r2, 8007e36 <_printf_common+0x26>
 8007e32:	3301      	adds	r3, #1
 8007e34:	6033      	str	r3, [r6, #0]
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	0699      	lsls	r1, r3, #26
 8007e3a:	bf42      	ittt	mi
 8007e3c:	6833      	ldrmi	r3, [r6, #0]
 8007e3e:	3302      	addmi	r3, #2
 8007e40:	6033      	strmi	r3, [r6, #0]
 8007e42:	6825      	ldr	r5, [r4, #0]
 8007e44:	f015 0506 	ands.w	r5, r5, #6
 8007e48:	d106      	bne.n	8007e58 <_printf_common+0x48>
 8007e4a:	f104 0a19 	add.w	sl, r4, #25
 8007e4e:	68e3      	ldr	r3, [r4, #12]
 8007e50:	6832      	ldr	r2, [r6, #0]
 8007e52:	1a9b      	subs	r3, r3, r2
 8007e54:	42ab      	cmp	r3, r5
 8007e56:	dc26      	bgt.n	8007ea6 <_printf_common+0x96>
 8007e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e5c:	1e13      	subs	r3, r2, #0
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	bf18      	it	ne
 8007e62:	2301      	movne	r3, #1
 8007e64:	0692      	lsls	r2, r2, #26
 8007e66:	d42b      	bmi.n	8007ec0 <_printf_common+0xb0>
 8007e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	4638      	mov	r0, r7
 8007e70:	47c0      	blx	r8
 8007e72:	3001      	adds	r0, #1
 8007e74:	d01e      	beq.n	8007eb4 <_printf_common+0xa4>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	68e5      	ldr	r5, [r4, #12]
 8007e7a:	6832      	ldr	r2, [r6, #0]
 8007e7c:	f003 0306 	and.w	r3, r3, #6
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	bf08      	it	eq
 8007e84:	1aad      	subeq	r5, r5, r2
 8007e86:	68a3      	ldr	r3, [r4, #8]
 8007e88:	6922      	ldr	r2, [r4, #16]
 8007e8a:	bf0c      	ite	eq
 8007e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e90:	2500      	movne	r5, #0
 8007e92:	4293      	cmp	r3, r2
 8007e94:	bfc4      	itt	gt
 8007e96:	1a9b      	subgt	r3, r3, r2
 8007e98:	18ed      	addgt	r5, r5, r3
 8007e9a:	2600      	movs	r6, #0
 8007e9c:	341a      	adds	r4, #26
 8007e9e:	42b5      	cmp	r5, r6
 8007ea0:	d11a      	bne.n	8007ed8 <_printf_common+0xc8>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e008      	b.n	8007eb8 <_printf_common+0xa8>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	4652      	mov	r2, sl
 8007eaa:	4649      	mov	r1, r9
 8007eac:	4638      	mov	r0, r7
 8007eae:	47c0      	blx	r8
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d103      	bne.n	8007ebc <_printf_common+0xac>
 8007eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	e7c6      	b.n	8007e4e <_printf_common+0x3e>
 8007ec0:	18e1      	adds	r1, r4, r3
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	2030      	movs	r0, #48	; 0x30
 8007ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007eca:	4422      	add	r2, r4
 8007ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	e7c7      	b.n	8007e68 <_printf_common+0x58>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	4622      	mov	r2, r4
 8007edc:	4649      	mov	r1, r9
 8007ede:	4638      	mov	r0, r7
 8007ee0:	47c0      	blx	r8
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d0e6      	beq.n	8007eb4 <_printf_common+0xa4>
 8007ee6:	3601      	adds	r6, #1
 8007ee8:	e7d9      	b.n	8007e9e <_printf_common+0x8e>
	...

08007eec <_printf_i>:
 8007eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef0:	7e0f      	ldrb	r7, [r1, #24]
 8007ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ef4:	2f78      	cmp	r7, #120	; 0x78
 8007ef6:	4691      	mov	r9, r2
 8007ef8:	4680      	mov	r8, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	469a      	mov	sl, r3
 8007efe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f02:	d807      	bhi.n	8007f14 <_printf_i+0x28>
 8007f04:	2f62      	cmp	r7, #98	; 0x62
 8007f06:	d80a      	bhi.n	8007f1e <_printf_i+0x32>
 8007f08:	2f00      	cmp	r7, #0
 8007f0a:	f000 80d8 	beq.w	80080be <_printf_i+0x1d2>
 8007f0e:	2f58      	cmp	r7, #88	; 0x58
 8007f10:	f000 80a3 	beq.w	800805a <_printf_i+0x16e>
 8007f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f1c:	e03a      	b.n	8007f94 <_printf_i+0xa8>
 8007f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f22:	2b15      	cmp	r3, #21
 8007f24:	d8f6      	bhi.n	8007f14 <_printf_i+0x28>
 8007f26:	a101      	add	r1, pc, #4	; (adr r1, 8007f2c <_printf_i+0x40>)
 8007f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	08007f99 	.word	0x08007f99
 8007f34:	08007f15 	.word	0x08007f15
 8007f38:	08007f15 	.word	0x08007f15
 8007f3c:	08007f15 	.word	0x08007f15
 8007f40:	08007f15 	.word	0x08007f15
 8007f44:	08007f99 	.word	0x08007f99
 8007f48:	08007f15 	.word	0x08007f15
 8007f4c:	08007f15 	.word	0x08007f15
 8007f50:	08007f15 	.word	0x08007f15
 8007f54:	08007f15 	.word	0x08007f15
 8007f58:	080080a5 	.word	0x080080a5
 8007f5c:	08007fc9 	.word	0x08007fc9
 8007f60:	08008087 	.word	0x08008087
 8007f64:	08007f15 	.word	0x08007f15
 8007f68:	08007f15 	.word	0x08007f15
 8007f6c:	080080c7 	.word	0x080080c7
 8007f70:	08007f15 	.word	0x08007f15
 8007f74:	08007fc9 	.word	0x08007fc9
 8007f78:	08007f15 	.word	0x08007f15
 8007f7c:	08007f15 	.word	0x08007f15
 8007f80:	0800808f 	.word	0x0800808f
 8007f84:	682b      	ldr	r3, [r5, #0]
 8007f86:	1d1a      	adds	r2, r3, #4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	602a      	str	r2, [r5, #0]
 8007f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f94:	2301      	movs	r3, #1
 8007f96:	e0a3      	b.n	80080e0 <_printf_i+0x1f4>
 8007f98:	6820      	ldr	r0, [r4, #0]
 8007f9a:	6829      	ldr	r1, [r5, #0]
 8007f9c:	0606      	lsls	r6, r0, #24
 8007f9e:	f101 0304 	add.w	r3, r1, #4
 8007fa2:	d50a      	bpl.n	8007fba <_printf_i+0xce>
 8007fa4:	680e      	ldr	r6, [r1, #0]
 8007fa6:	602b      	str	r3, [r5, #0]
 8007fa8:	2e00      	cmp	r6, #0
 8007faa:	da03      	bge.n	8007fb4 <_printf_i+0xc8>
 8007fac:	232d      	movs	r3, #45	; 0x2d
 8007fae:	4276      	negs	r6, r6
 8007fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb4:	485e      	ldr	r0, [pc, #376]	; (8008130 <_printf_i+0x244>)
 8007fb6:	230a      	movs	r3, #10
 8007fb8:	e019      	b.n	8007fee <_printf_i+0x102>
 8007fba:	680e      	ldr	r6, [r1, #0]
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fc2:	bf18      	it	ne
 8007fc4:	b236      	sxthne	r6, r6
 8007fc6:	e7ef      	b.n	8007fa8 <_printf_i+0xbc>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	6820      	ldr	r0, [r4, #0]
 8007fcc:	1d19      	adds	r1, r3, #4
 8007fce:	6029      	str	r1, [r5, #0]
 8007fd0:	0601      	lsls	r1, r0, #24
 8007fd2:	d501      	bpl.n	8007fd8 <_printf_i+0xec>
 8007fd4:	681e      	ldr	r6, [r3, #0]
 8007fd6:	e002      	b.n	8007fde <_printf_i+0xf2>
 8007fd8:	0646      	lsls	r6, r0, #25
 8007fda:	d5fb      	bpl.n	8007fd4 <_printf_i+0xe8>
 8007fdc:	881e      	ldrh	r6, [r3, #0]
 8007fde:	4854      	ldr	r0, [pc, #336]	; (8008130 <_printf_i+0x244>)
 8007fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2308      	moveq	r3, #8
 8007fe6:	230a      	movne	r3, #10
 8007fe8:	2100      	movs	r1, #0
 8007fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fee:	6865      	ldr	r5, [r4, #4]
 8007ff0:	60a5      	str	r5, [r4, #8]
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	bfa2      	ittt	ge
 8007ff6:	6821      	ldrge	r1, [r4, #0]
 8007ff8:	f021 0104 	bicge.w	r1, r1, #4
 8007ffc:	6021      	strge	r1, [r4, #0]
 8007ffe:	b90e      	cbnz	r6, 8008004 <_printf_i+0x118>
 8008000:	2d00      	cmp	r5, #0
 8008002:	d04d      	beq.n	80080a0 <_printf_i+0x1b4>
 8008004:	4615      	mov	r5, r2
 8008006:	fbb6 f1f3 	udiv	r1, r6, r3
 800800a:	fb03 6711 	mls	r7, r3, r1, r6
 800800e:	5dc7      	ldrb	r7, [r0, r7]
 8008010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008014:	4637      	mov	r7, r6
 8008016:	42bb      	cmp	r3, r7
 8008018:	460e      	mov	r6, r1
 800801a:	d9f4      	bls.n	8008006 <_printf_i+0x11a>
 800801c:	2b08      	cmp	r3, #8
 800801e:	d10b      	bne.n	8008038 <_printf_i+0x14c>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	07de      	lsls	r6, r3, #31
 8008024:	d508      	bpl.n	8008038 <_printf_i+0x14c>
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	6861      	ldr	r1, [r4, #4]
 800802a:	4299      	cmp	r1, r3
 800802c:	bfde      	ittt	le
 800802e:	2330      	movle	r3, #48	; 0x30
 8008030:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008034:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008038:	1b52      	subs	r2, r2, r5
 800803a:	6122      	str	r2, [r4, #16]
 800803c:	f8cd a000 	str.w	sl, [sp]
 8008040:	464b      	mov	r3, r9
 8008042:	aa03      	add	r2, sp, #12
 8008044:	4621      	mov	r1, r4
 8008046:	4640      	mov	r0, r8
 8008048:	f7ff fee2 	bl	8007e10 <_printf_common>
 800804c:	3001      	adds	r0, #1
 800804e:	d14c      	bne.n	80080ea <_printf_i+0x1fe>
 8008050:	f04f 30ff 	mov.w	r0, #4294967295
 8008054:	b004      	add	sp, #16
 8008056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805a:	4835      	ldr	r0, [pc, #212]	; (8008130 <_printf_i+0x244>)
 800805c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008060:	6829      	ldr	r1, [r5, #0]
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	f851 6b04 	ldr.w	r6, [r1], #4
 8008068:	6029      	str	r1, [r5, #0]
 800806a:	061d      	lsls	r5, r3, #24
 800806c:	d514      	bpl.n	8008098 <_printf_i+0x1ac>
 800806e:	07df      	lsls	r7, r3, #31
 8008070:	bf44      	itt	mi
 8008072:	f043 0320 	orrmi.w	r3, r3, #32
 8008076:	6023      	strmi	r3, [r4, #0]
 8008078:	b91e      	cbnz	r6, 8008082 <_printf_i+0x196>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	f023 0320 	bic.w	r3, r3, #32
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	2310      	movs	r3, #16
 8008084:	e7b0      	b.n	8007fe8 <_printf_i+0xfc>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	f043 0320 	orr.w	r3, r3, #32
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	2378      	movs	r3, #120	; 0x78
 8008090:	4828      	ldr	r0, [pc, #160]	; (8008134 <_printf_i+0x248>)
 8008092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008096:	e7e3      	b.n	8008060 <_printf_i+0x174>
 8008098:	0659      	lsls	r1, r3, #25
 800809a:	bf48      	it	mi
 800809c:	b2b6      	uxthmi	r6, r6
 800809e:	e7e6      	b.n	800806e <_printf_i+0x182>
 80080a0:	4615      	mov	r5, r2
 80080a2:	e7bb      	b.n	800801c <_printf_i+0x130>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	6826      	ldr	r6, [r4, #0]
 80080a8:	6961      	ldr	r1, [r4, #20]
 80080aa:	1d18      	adds	r0, r3, #4
 80080ac:	6028      	str	r0, [r5, #0]
 80080ae:	0635      	lsls	r5, r6, #24
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	d501      	bpl.n	80080b8 <_printf_i+0x1cc>
 80080b4:	6019      	str	r1, [r3, #0]
 80080b6:	e002      	b.n	80080be <_printf_i+0x1d2>
 80080b8:	0670      	lsls	r0, r6, #25
 80080ba:	d5fb      	bpl.n	80080b4 <_printf_i+0x1c8>
 80080bc:	8019      	strh	r1, [r3, #0]
 80080be:	2300      	movs	r3, #0
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	4615      	mov	r5, r2
 80080c4:	e7ba      	b.n	800803c <_printf_i+0x150>
 80080c6:	682b      	ldr	r3, [r5, #0]
 80080c8:	1d1a      	adds	r2, r3, #4
 80080ca:	602a      	str	r2, [r5, #0]
 80080cc:	681d      	ldr	r5, [r3, #0]
 80080ce:	6862      	ldr	r2, [r4, #4]
 80080d0:	2100      	movs	r1, #0
 80080d2:	4628      	mov	r0, r5
 80080d4:	f7f8 f884 	bl	80001e0 <memchr>
 80080d8:	b108      	cbz	r0, 80080de <_printf_i+0x1f2>
 80080da:	1b40      	subs	r0, r0, r5
 80080dc:	6060      	str	r0, [r4, #4]
 80080de:	6863      	ldr	r3, [r4, #4]
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	2300      	movs	r3, #0
 80080e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e8:	e7a8      	b.n	800803c <_printf_i+0x150>
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	462a      	mov	r2, r5
 80080ee:	4649      	mov	r1, r9
 80080f0:	4640      	mov	r0, r8
 80080f2:	47d0      	blx	sl
 80080f4:	3001      	adds	r0, #1
 80080f6:	d0ab      	beq.n	8008050 <_printf_i+0x164>
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	079b      	lsls	r3, r3, #30
 80080fc:	d413      	bmi.n	8008126 <_printf_i+0x23a>
 80080fe:	68e0      	ldr	r0, [r4, #12]
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	4298      	cmp	r0, r3
 8008104:	bfb8      	it	lt
 8008106:	4618      	movlt	r0, r3
 8008108:	e7a4      	b.n	8008054 <_printf_i+0x168>
 800810a:	2301      	movs	r3, #1
 800810c:	4632      	mov	r2, r6
 800810e:	4649      	mov	r1, r9
 8008110:	4640      	mov	r0, r8
 8008112:	47d0      	blx	sl
 8008114:	3001      	adds	r0, #1
 8008116:	d09b      	beq.n	8008050 <_printf_i+0x164>
 8008118:	3501      	adds	r5, #1
 800811a:	68e3      	ldr	r3, [r4, #12]
 800811c:	9903      	ldr	r1, [sp, #12]
 800811e:	1a5b      	subs	r3, r3, r1
 8008120:	42ab      	cmp	r3, r5
 8008122:	dcf2      	bgt.n	800810a <_printf_i+0x21e>
 8008124:	e7eb      	b.n	80080fe <_printf_i+0x212>
 8008126:	2500      	movs	r5, #0
 8008128:	f104 0619 	add.w	r6, r4, #25
 800812c:	e7f5      	b.n	800811a <_printf_i+0x22e>
 800812e:	bf00      	nop
 8008130:	08008481 	.word	0x08008481
 8008134:	08008492 	.word	0x08008492

08008138 <memmove>:
 8008138:	4288      	cmp	r0, r1
 800813a:	b510      	push	{r4, lr}
 800813c:	eb01 0402 	add.w	r4, r1, r2
 8008140:	d902      	bls.n	8008148 <memmove+0x10>
 8008142:	4284      	cmp	r4, r0
 8008144:	4623      	mov	r3, r4
 8008146:	d807      	bhi.n	8008158 <memmove+0x20>
 8008148:	1e43      	subs	r3, r0, #1
 800814a:	42a1      	cmp	r1, r4
 800814c:	d008      	beq.n	8008160 <memmove+0x28>
 800814e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008156:	e7f8      	b.n	800814a <memmove+0x12>
 8008158:	4402      	add	r2, r0
 800815a:	4601      	mov	r1, r0
 800815c:	428a      	cmp	r2, r1
 800815e:	d100      	bne.n	8008162 <memmove+0x2a>
 8008160:	bd10      	pop	{r4, pc}
 8008162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800816a:	e7f7      	b.n	800815c <memmove+0x24>

0800816c <_free_r>:
 800816c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800816e:	2900      	cmp	r1, #0
 8008170:	d044      	beq.n	80081fc <_free_r+0x90>
 8008172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008176:	9001      	str	r0, [sp, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f1a1 0404 	sub.w	r4, r1, #4
 800817e:	bfb8      	it	lt
 8008180:	18e4      	addlt	r4, r4, r3
 8008182:	f000 f913 	bl	80083ac <__malloc_lock>
 8008186:	4a1e      	ldr	r2, [pc, #120]	; (8008200 <_free_r+0x94>)
 8008188:	9801      	ldr	r0, [sp, #4]
 800818a:	6813      	ldr	r3, [r2, #0]
 800818c:	b933      	cbnz	r3, 800819c <_free_r+0x30>
 800818e:	6063      	str	r3, [r4, #4]
 8008190:	6014      	str	r4, [r2, #0]
 8008192:	b003      	add	sp, #12
 8008194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008198:	f000 b90e 	b.w	80083b8 <__malloc_unlock>
 800819c:	42a3      	cmp	r3, r4
 800819e:	d908      	bls.n	80081b2 <_free_r+0x46>
 80081a0:	6825      	ldr	r5, [r4, #0]
 80081a2:	1961      	adds	r1, r4, r5
 80081a4:	428b      	cmp	r3, r1
 80081a6:	bf01      	itttt	eq
 80081a8:	6819      	ldreq	r1, [r3, #0]
 80081aa:	685b      	ldreq	r3, [r3, #4]
 80081ac:	1949      	addeq	r1, r1, r5
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	e7ed      	b.n	800818e <_free_r+0x22>
 80081b2:	461a      	mov	r2, r3
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	b10b      	cbz	r3, 80081bc <_free_r+0x50>
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	d9fa      	bls.n	80081b2 <_free_r+0x46>
 80081bc:	6811      	ldr	r1, [r2, #0]
 80081be:	1855      	adds	r5, r2, r1
 80081c0:	42a5      	cmp	r5, r4
 80081c2:	d10b      	bne.n	80081dc <_free_r+0x70>
 80081c4:	6824      	ldr	r4, [r4, #0]
 80081c6:	4421      	add	r1, r4
 80081c8:	1854      	adds	r4, r2, r1
 80081ca:	42a3      	cmp	r3, r4
 80081cc:	6011      	str	r1, [r2, #0]
 80081ce:	d1e0      	bne.n	8008192 <_free_r+0x26>
 80081d0:	681c      	ldr	r4, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	6053      	str	r3, [r2, #4]
 80081d6:	4421      	add	r1, r4
 80081d8:	6011      	str	r1, [r2, #0]
 80081da:	e7da      	b.n	8008192 <_free_r+0x26>
 80081dc:	d902      	bls.n	80081e4 <_free_r+0x78>
 80081de:	230c      	movs	r3, #12
 80081e0:	6003      	str	r3, [r0, #0]
 80081e2:	e7d6      	b.n	8008192 <_free_r+0x26>
 80081e4:	6825      	ldr	r5, [r4, #0]
 80081e6:	1961      	adds	r1, r4, r5
 80081e8:	428b      	cmp	r3, r1
 80081ea:	bf04      	itt	eq
 80081ec:	6819      	ldreq	r1, [r3, #0]
 80081ee:	685b      	ldreq	r3, [r3, #4]
 80081f0:	6063      	str	r3, [r4, #4]
 80081f2:	bf04      	itt	eq
 80081f4:	1949      	addeq	r1, r1, r5
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	6054      	str	r4, [r2, #4]
 80081fa:	e7ca      	b.n	8008192 <_free_r+0x26>
 80081fc:	b003      	add	sp, #12
 80081fe:	bd30      	pop	{r4, r5, pc}
 8008200:	200009a8 	.word	0x200009a8

08008204 <sbrk_aligned>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	4e0e      	ldr	r6, [pc, #56]	; (8008240 <sbrk_aligned+0x3c>)
 8008208:	460c      	mov	r4, r1
 800820a:	6831      	ldr	r1, [r6, #0]
 800820c:	4605      	mov	r5, r0
 800820e:	b911      	cbnz	r1, 8008216 <sbrk_aligned+0x12>
 8008210:	f000 f8bc 	bl	800838c <_sbrk_r>
 8008214:	6030      	str	r0, [r6, #0]
 8008216:	4621      	mov	r1, r4
 8008218:	4628      	mov	r0, r5
 800821a:	f000 f8b7 	bl	800838c <_sbrk_r>
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d00a      	beq.n	8008238 <sbrk_aligned+0x34>
 8008222:	1cc4      	adds	r4, r0, #3
 8008224:	f024 0403 	bic.w	r4, r4, #3
 8008228:	42a0      	cmp	r0, r4
 800822a:	d007      	beq.n	800823c <sbrk_aligned+0x38>
 800822c:	1a21      	subs	r1, r4, r0
 800822e:	4628      	mov	r0, r5
 8008230:	f000 f8ac 	bl	800838c <_sbrk_r>
 8008234:	3001      	adds	r0, #1
 8008236:	d101      	bne.n	800823c <sbrk_aligned+0x38>
 8008238:	f04f 34ff 	mov.w	r4, #4294967295
 800823c:	4620      	mov	r0, r4
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	200009ac 	.word	0x200009ac

08008244 <_malloc_r>:
 8008244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008248:	1ccd      	adds	r5, r1, #3
 800824a:	f025 0503 	bic.w	r5, r5, #3
 800824e:	3508      	adds	r5, #8
 8008250:	2d0c      	cmp	r5, #12
 8008252:	bf38      	it	cc
 8008254:	250c      	movcc	r5, #12
 8008256:	2d00      	cmp	r5, #0
 8008258:	4607      	mov	r7, r0
 800825a:	db01      	blt.n	8008260 <_malloc_r+0x1c>
 800825c:	42a9      	cmp	r1, r5
 800825e:	d905      	bls.n	800826c <_malloc_r+0x28>
 8008260:	230c      	movs	r3, #12
 8008262:	603b      	str	r3, [r7, #0]
 8008264:	2600      	movs	r6, #0
 8008266:	4630      	mov	r0, r6
 8008268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826c:	4e2e      	ldr	r6, [pc, #184]	; (8008328 <_malloc_r+0xe4>)
 800826e:	f000 f89d 	bl	80083ac <__malloc_lock>
 8008272:	6833      	ldr	r3, [r6, #0]
 8008274:	461c      	mov	r4, r3
 8008276:	bb34      	cbnz	r4, 80082c6 <_malloc_r+0x82>
 8008278:	4629      	mov	r1, r5
 800827a:	4638      	mov	r0, r7
 800827c:	f7ff ffc2 	bl	8008204 <sbrk_aligned>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	4604      	mov	r4, r0
 8008284:	d14d      	bne.n	8008322 <_malloc_r+0xde>
 8008286:	6834      	ldr	r4, [r6, #0]
 8008288:	4626      	mov	r6, r4
 800828a:	2e00      	cmp	r6, #0
 800828c:	d140      	bne.n	8008310 <_malloc_r+0xcc>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	4631      	mov	r1, r6
 8008292:	4638      	mov	r0, r7
 8008294:	eb04 0803 	add.w	r8, r4, r3
 8008298:	f000 f878 	bl	800838c <_sbrk_r>
 800829c:	4580      	cmp	r8, r0
 800829e:	d13a      	bne.n	8008316 <_malloc_r+0xd2>
 80082a0:	6821      	ldr	r1, [r4, #0]
 80082a2:	3503      	adds	r5, #3
 80082a4:	1a6d      	subs	r5, r5, r1
 80082a6:	f025 0503 	bic.w	r5, r5, #3
 80082aa:	3508      	adds	r5, #8
 80082ac:	2d0c      	cmp	r5, #12
 80082ae:	bf38      	it	cc
 80082b0:	250c      	movcc	r5, #12
 80082b2:	4629      	mov	r1, r5
 80082b4:	4638      	mov	r0, r7
 80082b6:	f7ff ffa5 	bl	8008204 <sbrk_aligned>
 80082ba:	3001      	adds	r0, #1
 80082bc:	d02b      	beq.n	8008316 <_malloc_r+0xd2>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	442b      	add	r3, r5
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	e00e      	b.n	80082e4 <_malloc_r+0xa0>
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	1b52      	subs	r2, r2, r5
 80082ca:	d41e      	bmi.n	800830a <_malloc_r+0xc6>
 80082cc:	2a0b      	cmp	r2, #11
 80082ce:	d916      	bls.n	80082fe <_malloc_r+0xba>
 80082d0:	1961      	adds	r1, r4, r5
 80082d2:	42a3      	cmp	r3, r4
 80082d4:	6025      	str	r5, [r4, #0]
 80082d6:	bf18      	it	ne
 80082d8:	6059      	strne	r1, [r3, #4]
 80082da:	6863      	ldr	r3, [r4, #4]
 80082dc:	bf08      	it	eq
 80082de:	6031      	streq	r1, [r6, #0]
 80082e0:	5162      	str	r2, [r4, r5]
 80082e2:	604b      	str	r3, [r1, #4]
 80082e4:	4638      	mov	r0, r7
 80082e6:	f104 060b 	add.w	r6, r4, #11
 80082ea:	f000 f865 	bl	80083b8 <__malloc_unlock>
 80082ee:	f026 0607 	bic.w	r6, r6, #7
 80082f2:	1d23      	adds	r3, r4, #4
 80082f4:	1af2      	subs	r2, r6, r3
 80082f6:	d0b6      	beq.n	8008266 <_malloc_r+0x22>
 80082f8:	1b9b      	subs	r3, r3, r6
 80082fa:	50a3      	str	r3, [r4, r2]
 80082fc:	e7b3      	b.n	8008266 <_malloc_r+0x22>
 80082fe:	6862      	ldr	r2, [r4, #4]
 8008300:	42a3      	cmp	r3, r4
 8008302:	bf0c      	ite	eq
 8008304:	6032      	streq	r2, [r6, #0]
 8008306:	605a      	strne	r2, [r3, #4]
 8008308:	e7ec      	b.n	80082e4 <_malloc_r+0xa0>
 800830a:	4623      	mov	r3, r4
 800830c:	6864      	ldr	r4, [r4, #4]
 800830e:	e7b2      	b.n	8008276 <_malloc_r+0x32>
 8008310:	4634      	mov	r4, r6
 8008312:	6876      	ldr	r6, [r6, #4]
 8008314:	e7b9      	b.n	800828a <_malloc_r+0x46>
 8008316:	230c      	movs	r3, #12
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	4638      	mov	r0, r7
 800831c:	f000 f84c 	bl	80083b8 <__malloc_unlock>
 8008320:	e7a1      	b.n	8008266 <_malloc_r+0x22>
 8008322:	6025      	str	r5, [r4, #0]
 8008324:	e7de      	b.n	80082e4 <_malloc_r+0xa0>
 8008326:	bf00      	nop
 8008328:	200009a8 	.word	0x200009a8

0800832c <_realloc_r>:
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	4680      	mov	r8, r0
 8008332:	4614      	mov	r4, r2
 8008334:	460e      	mov	r6, r1
 8008336:	b921      	cbnz	r1, 8008342 <_realloc_r+0x16>
 8008338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800833c:	4611      	mov	r1, r2
 800833e:	f7ff bf81 	b.w	8008244 <_malloc_r>
 8008342:	b92a      	cbnz	r2, 8008350 <_realloc_r+0x24>
 8008344:	f7ff ff12 	bl	800816c <_free_r>
 8008348:	4625      	mov	r5, r4
 800834a:	4628      	mov	r0, r5
 800834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008350:	f000 f838 	bl	80083c4 <_malloc_usable_size_r>
 8008354:	4284      	cmp	r4, r0
 8008356:	4607      	mov	r7, r0
 8008358:	d802      	bhi.n	8008360 <_realloc_r+0x34>
 800835a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800835e:	d812      	bhi.n	8008386 <_realloc_r+0x5a>
 8008360:	4621      	mov	r1, r4
 8008362:	4640      	mov	r0, r8
 8008364:	f7ff ff6e 	bl	8008244 <_malloc_r>
 8008368:	4605      	mov	r5, r0
 800836a:	2800      	cmp	r0, #0
 800836c:	d0ed      	beq.n	800834a <_realloc_r+0x1e>
 800836e:	42bc      	cmp	r4, r7
 8008370:	4622      	mov	r2, r4
 8008372:	4631      	mov	r1, r6
 8008374:	bf28      	it	cs
 8008376:	463a      	movcs	r2, r7
 8008378:	f7ff fbb8 	bl	8007aec <memcpy>
 800837c:	4631      	mov	r1, r6
 800837e:	4640      	mov	r0, r8
 8008380:	f7ff fef4 	bl	800816c <_free_r>
 8008384:	e7e1      	b.n	800834a <_realloc_r+0x1e>
 8008386:	4635      	mov	r5, r6
 8008388:	e7df      	b.n	800834a <_realloc_r+0x1e>
	...

0800838c <_sbrk_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4d06      	ldr	r5, [pc, #24]	; (80083a8 <_sbrk_r+0x1c>)
 8008390:	2300      	movs	r3, #0
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	602b      	str	r3, [r5, #0]
 8008398:	f7f9 f86e 	bl	8001478 <_sbrk>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d102      	bne.n	80083a6 <_sbrk_r+0x1a>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	b103      	cbz	r3, 80083a6 <_sbrk_r+0x1a>
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	200009b0 	.word	0x200009b0

080083ac <__malloc_lock>:
 80083ac:	4801      	ldr	r0, [pc, #4]	; (80083b4 <__malloc_lock+0x8>)
 80083ae:	f000 b811 	b.w	80083d4 <__retarget_lock_acquire_recursive>
 80083b2:	bf00      	nop
 80083b4:	200009b4 	.word	0x200009b4

080083b8 <__malloc_unlock>:
 80083b8:	4801      	ldr	r0, [pc, #4]	; (80083c0 <__malloc_unlock+0x8>)
 80083ba:	f000 b80c 	b.w	80083d6 <__retarget_lock_release_recursive>
 80083be:	bf00      	nop
 80083c0:	200009b4 	.word	0x200009b4

080083c4 <_malloc_usable_size_r>:
 80083c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c8:	1f18      	subs	r0, r3, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bfbc      	itt	lt
 80083ce:	580b      	ldrlt	r3, [r1, r0]
 80083d0:	18c0      	addlt	r0, r0, r3
 80083d2:	4770      	bx	lr

080083d4 <__retarget_lock_acquire_recursive>:
 80083d4:	4770      	bx	lr

080083d6 <__retarget_lock_release_recursive>:
 80083d6:	4770      	bx	lr

080083d8 <_init>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr

080083e4 <_fini>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	bf00      	nop
 80083e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	469e      	mov	lr, r3
 80083ee:	4770      	bx	lr
